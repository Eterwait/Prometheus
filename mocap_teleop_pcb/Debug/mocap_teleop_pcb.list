
mocap_teleop_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d7c  08008d7c  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d84  08008d84  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08008d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d4  20000100  08008e8c  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025d4  08008e8c  000225d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156c2  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004093  00000000  00000000  000357f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc90  00000000  00000000  0003bc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172d1  00000000  00000000  00058898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000978a9  00000000  00000000  0006fb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107412  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  00107464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008d00 	.word	0x08008d00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	08008d00 	.word	0x08008d00

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_CRC_Init+0x20>)
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <MX_CRC_Init+0x24>)
 80004e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_CRC_Init+0x20>)
 80004e4:	f001 fdaf 	bl	8002046 <HAL_CRC_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004ee:	f000 fbd3 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000011c 	.word	0x2000011c
 80004fc:	40023000 	.word	0x40023000

08000500 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_CRC_MspInit+0x3c>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d10d      	bne.n	800052e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <HAL_CRC_MspInit+0x40>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <HAL_CRC_MspInit+0x40>)
 800051c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <HAL_CRC_MspInit+0x40>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40023000 	.word	0x40023000
 8000540:	40023800 	.word	0x40023800

08000544 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800054e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000550:	4907      	ldr	r1, [pc, #28]	; (8000570 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800055a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4013      	ands	r3, r2
 8000560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000562:	68fb      	ldr	r3, [r7, #12]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40023800 	.word	0x40023800

08000574 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	041a      	lsls	r2, r3, #16
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	619a      	str	r2, [r3, #24]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80005aa:	2080      	movs	r0, #128	; 0x80
 80005ac:	f7ff ffca 	bl	8000544 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f7ff ffc7 	bl	8000544 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80005b6:	2004      	movs	r0, #4
 80005b8:	f7ff ffc4 	bl	8000544 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80005bc:	2002      	movs	r0, #2
 80005be:	f7ff ffc1 	bl	8000544 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, RE_DE_Pin|DIR_motor_Pin);
 80005c2:	2150      	movs	r1, #80	; 0x50
 80005c4:	4814      	ldr	r0, [pc, #80]	; (8000618 <MX_GPIO_Init+0x84>)
 80005c6:	f7ff ffd5 	bl	8000574 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EN_motor_GPIO_Port, EN_motor_Pin);
 80005ca:	2110      	movs	r1, #16
 80005cc:	4813      	ldr	r0, [pc, #76]	; (800061c <MX_GPIO_Init+0x88>)
 80005ce:	f7ff ffd1 	bl	8000574 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = RE_DE_Pin|DIR_motor_Pin;
 80005d2:	2350      	movs	r3, #80	; 0x50
 80005d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005d6:	2301      	movs	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0x84>)
 80005ec:	f003 fa8d 	bl	8003b0a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN_motor_Pin;
 80005f0:	2310      	movs	r3, #16
 80005f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005f4:	2301      	movs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80005f8:	2303      	movs	r3, #3
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EN_motor_GPIO_Port, &GPIO_InitStruct);
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_GPIO_Init+0x88>)
 800060a:	f003 fa7e 	bl	8003b0a <LL_GPIO_Init>

}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020000 	.word	0x40020000
 800061c:	40020800 	.word	0x40020800

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <__NVIC_EnableIRQ+0x38>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <LL_RCC_HSE_Enable+0x1c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <LL_RCC_HSE_Enable+0x1c>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <LL_RCC_HSE_IsReady+0x24>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800068c:	bf0c      	ite	eq
 800068e:	2301      	moveq	r3, #1
 8000690:	2300      	movne	r3, #0
 8000692:	b2db      	uxtb	r3, r3
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_RCC_SetSysClkSource+0x24>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f023 0203 	bic.w	r2, r3, #3
 80006b4:	4904      	ldr	r1, [pc, #16]	; (80006c8 <LL_RCC_SetSysClkSource+0x24>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	608b      	str	r3, [r1, #8]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800

080006cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <LL_RCC_GetSysClkSource+0x18>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f003 030c 	and.w	r3, r3, #12
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LL_RCC_SetAHBPrescaler+0x24>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006f8:	4904      	ldr	r1, [pc, #16]	; (800070c <LL_RCC_SetAHBPrescaler+0x24>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	608b      	str	r3, [r1, #8]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40023800 	.word	0x40023800

08000710 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LL_RCC_SetAPB1Prescaler+0x24>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	608b      	str	r3, [r1, #8]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000748:	4904      	ldr	r1, [pc, #16]	; (800075c <LL_RCC_SetAPB2Prescaler+0x24>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <LL_RCC_SetTIMPrescaler+0x28>)
 800076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800076e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000772:	4905      	ldr	r1, [pc, #20]	; (8000788 <LL_RCC_SetTIMPrescaler+0x28>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4313      	orrs	r3, r2
 8000778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40023800 	.word	0x40023800

0800078c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <LL_RCC_PLL_Enable+0x1c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <LL_RCC_PLL_Enable+0x1c>)
 8000796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_RCC_PLL_IsReady+0x24>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007bc:	bf0c      	ite	eq
 80007be:	2301      	moveq	r3, #1
 80007c0:	2300      	movne	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80007e8:	4013      	ands	r3, r2
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	4311      	orrs	r1, r2
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	0192      	lsls	r2, r2, #6
 80007f4:	430a      	orrs	r2, r1
 80007f6:	4908      	ldr	r1, [pc, #32]	; (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007f8:	4313      	orrs	r3, r2
 80007fa:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	4313      	orrs	r3, r2
 800080a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40023800 	.word	0x40023800
 800081c:	ffbf8000 	.word	0xffbf8000

08000820 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000834:	4013      	ands	r3, r2
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	4311      	orrs	r1, r2
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	0192      	lsls	r2, r2, #6
 8000840:	4311      	orrs	r1, r2
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	430a      	orrs	r2, r1
 8000846:	4904      	ldr	r1, [pc, #16]	; (8000858 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000848:	4313      	orrs	r3, r2
 800084a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40023800 	.word	0x40023800
 800085c:	f0bf8000 	.word	0xf0bf8000

08000860 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <LL_FLASH_SetLatency+0x24>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f023 0207 	bic.w	r2, r3, #7
 8000870:	4904      	ldr	r1, [pc, #16]	; (8000884 <LL_FLASH_SetLatency+0x24>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	600b      	str	r3, [r1, #0]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40023c00 	.word	0x40023c00

08000888 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <LL_FLASH_GetLatency+0x18>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f003 0307 	and.w	r3, r3, #7
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80008b4:	4904      	ldr	r1, [pc, #16]	; (80008c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	600b      	str	r3, [r1, #0]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40007000 	.word	0x40007000

080008cc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f043 0201 	orr.w	r2, r3, #1
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a1a      	ldr	r2, [r3, #32]
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	431a      	orrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	621a      	str	r2, [r3, #32]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800092a:	b480      	push	{r7}
 800092c:	b089      	sub	sp, #36	; 0x24
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	330c      	adds	r3, #12
 8000936:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	e853 3f00 	ldrex	r3, [r3]
 800093e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	f043 0320 	orr.w	r3, r3, #32
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	330c      	adds	r3, #12
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	61ba      	str	r2, [r7, #24]
 8000950:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000952:	6979      	ldr	r1, [r7, #20]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	e841 2300 	strex	r3, r2, [r1]
 800095a:	613b      	str	r3, [r7, #16]
   return(result);
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1e7      	bne.n	8000932 <LL_USART_EnableIT_RXNE+0x8>
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3724      	adds	r7, #36	; 0x24
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3314      	adds	r3, #20
 800097c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	e853 3f00 	ldrex	r3, [r3]
 8000984:	60bb      	str	r3, [r7, #8]
   return(result);
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3314      	adds	r3, #20
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	61ba      	str	r2, [r7, #24]
 8000996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000998:	6979      	ldr	r1, [r7, #20]
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	e841 2300 	strex	r3, r2, [r1]
 80009a0:	613b      	str	r3, [r7, #16]
   return(result);
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e7      	bne.n	8000978 <LL_USART_EnableIT_ERROR+0x8>
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_GPIO_SetOutputPin>:
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	619a      	str	r2, [r3, #24]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <LL_GPIO_ResetOutputPin>:
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	041a      	lsls	r2, r3, #16
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	619a      	str	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f001 f980 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f8fa 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f7ff fdca 	bl	8000594 <MX_GPIO_Init>
  MX_CRC_Init();
 8000a00:	f7ff fd6a 	bl	80004d8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000a04:	f001 f8ee 	bl	8001be4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a08:	f000 ff04 	bl	8001814 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a0c:	f000 ff7e 	bl	800190c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000a10:	f007 fbf4 	bl	80081fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	// Start Tim 4 to work, for encoder mode
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1);
 8000a14:	2101      	movs	r1, #1
 8000a16:	486b      	ldr	r0, [pc, #428]	; (8000bc4 <main+0x1d4>)
 8000a18:	f7ff ff68 	bl	80008ec <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4869      	ldr	r0, [pc, #420]	; (8000bc4 <main+0x1d4>)
 8000a20:	f7ff ff64 	bl	80008ec <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM4);
 8000a24:	4867      	ldr	r0, [pc, #412]	; (8000bc4 <main+0x1d4>)
 8000a26:	f7ff ff51 	bl	80008cc <LL_TIM_EnableCounter>

	// Allow Tim 3 to work, it will produce PWM
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4866      	ldr	r0, [pc, #408]	; (8000bc8 <main+0x1d8>)
 8000a2e:	f7ff ff5d 	bl	80008ec <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 8000a32:	4865      	ldr	r0, [pc, #404]	; (8000bc8 <main+0x1d8>)
 8000a34:	f7ff ff4a 	bl	80008cc <LL_TIM_EnableCounter>

	// Set En and Dir pins
	LL_GPIO_SetOutputPin(GPIOC, EN_motor_Pin);
 8000a38:	2110      	movs	r1, #16
 8000a3a:	4864      	ldr	r0, [pc, #400]	; (8000bcc <main+0x1dc>)
 8000a3c:	f7ff ffbb 	bl	80009b6 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, DIR_motor_Pin);
 8000a40:	2140      	movs	r1, #64	; 0x40
 8000a42:	4863      	ldr	r0, [pc, #396]	; (8000bd0 <main+0x1e0>)
 8000a44:	f7ff ffc5 	bl	80009d2 <LL_GPIO_ResetOutputPin>

	// Set PWM to 0 (equal ZERO current)
	LL_TIM_OC_SetCompareCH2(TIM3,0);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	485f      	ldr	r0, [pc, #380]	; (8000bc8 <main+0x1d8>)
 8000a4c:	f7ff ff5f 	bl	800090e <LL_TIM_OC_SetCompareCH2>

	// Allow USART 2 to work
	NVIC_EnableIRQ(USART2_IRQn);
 8000a50:	2026      	movs	r0, #38	; 0x26
 8000a52:	f7ff fde5 	bl	8000620 <__NVIC_EnableIRQ>

	//  LL_USART_Enable(USART2);
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000a56:	4b5f      	ldr	r3, [pc, #380]	; (8000bd4 <main+0x1e4>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a5e      	ldr	r2, [pc, #376]	; (8000bd4 <main+0x1e4>)
 8000a5c:	f043 030c 	orr.w	r3, r3, #12
 8000a60:	60d3      	str	r3, [r2, #12]
	LL_USART_EnableIT_RXNE(USART2);
 8000a62:	485c      	ldr	r0, [pc, #368]	; (8000bd4 <main+0x1e4>)
 8000a64:	f7ff ff61 	bl	800092a <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(USART2);
 8000a68:	485a      	ldr	r0, [pc, #360]	; (8000bd4 <main+0x1e4>)
 8000a6a:	f7ff ff81 	bl	8000970 <LL_USART_EnableIT_ERROR>

	LL_GPIO_ResetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Rx mode
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4857      	ldr	r0, [pc, #348]	; (8000bd0 <main+0x1e0>)
 8000a72:	f7ff ffae 	bl	80009d2 <LL_GPIO_ResetOutputPin>

//	gripper_position = TIM4->CCR1;
	calibration();
 8000a76:	f000 fa9b 	bl	8000fb0 <calibration>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LL_mDelay(1);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f005 fbc0 	bl	8006200 <LL_mDelay>
	  switch(USB_Rx_buffer[0])
 8000a80:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <main+0x1e8>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b72      	cmp	r3, #114	; 0x72
 8000a86:	d003      	beq.n	8000a90 <main+0xa0>
 8000a88:	2b73      	cmp	r3, #115	; 0x73
 8000a8a:	f000 8083 	beq.w	8000b94 <main+0x1a4>
 8000a8e:	e089      	b.n	8000ba4 <main+0x1b4>
		  {
			 case 'r':
				 // Function with communication with force sensor pcb
				 if (readForseSensor() == 1)
 8000a90:	f000 f9ae 	bl	8000df0 <readForseSensor>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d121      	bne.n	8000ade <main+0xee>
				 {
					 set_new_force();
 8000a9a:	f000 fa37 	bl	8000f0c <set_new_force>
					 gripper_position = TIM4->CNT;
 8000a9e:	4b49      	ldr	r3, [pc, #292]	; (8000bc4 <main+0x1d4>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <main+0x1ec>)
 8000aa6:	801a      	strh	r2, [r3, #0]
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <main+0x1ec>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]

					 memcpy(USB_Tx_buffer, (uint8_t*)(&gripper_position), sizeof(gripper_position));
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <main+0x1f0>)
 8000aae:	8013      	strh	r3, [r2, #0]
					 memcpy(USB_Tx_buffer + sizeof(gripper_position), (uint8_t*)(&force_sensor_4_value), sizeof(force_sensor_4_value));
 8000ab0:	4b4c      	ldr	r3, [pc, #304]	; (8000be4 <main+0x1f4>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	494c      	ldr	r1, [pc, #304]	; (8000be8 <main+0x1f8>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 f8e8 	bl	8008c8c <memcpy>
					 CDC_Transmit_FS(USB_Tx_buffer, sizeof(gripper_position) + sizeof(force_sensor_4_value));
 8000abc:	210a      	movs	r1, #10
 8000abe:	4848      	ldr	r0, [pc, #288]	; (8000be0 <main+0x1f0>)
 8000ac0:	f007 fc64 	bl	800838c <CDC_Transmit_FS>

					 clearBufferAndCounter();
 8000ac4:	f000 f9fc 	bl	8000ec0 <clearBufferAndCounter>
					 memset(USB_Tx_buffer, 0, sizeof(USB_Tx_buffer));  // Clear USB Tx buffer
 8000ac8:	2264      	movs	r2, #100	; 0x64
 8000aca:	2100      	movs	r1, #0
 8000acc:	4844      	ldr	r0, [pc, #272]	; (8000be0 <main+0x1f0>)
 8000ace:	f008 f8eb 	bl	8008ca8 <memset>
					 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 8000ad2:	2240      	movs	r2, #64	; 0x40
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4840      	ldr	r0, [pc, #256]	; (8000bd8 <main+0x1e8>)
 8000ad8:	f008 f8e6 	bl	8008ca8 <memset>
 8000adc:	e04d      	b.n	8000b7a <main+0x18a>
				 }
				 else
				 {
					 LL_mDelay(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f005 fb8e 	bl	8006200 <LL_mDelay>
					 if (readForseSensor() == 1)
 8000ae4:	f000 f984 	bl	8000df0 <readForseSensor>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d121      	bne.n	8000b32 <main+0x142>
					 {
						 set_new_force();
 8000aee:	f000 fa0d 	bl	8000f0c <set_new_force>
						 gripper_position = TIM4->CCR1;
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <main+0x1d4>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <main+0x1ec>)
 8000afa:	801a      	strh	r2, [r3, #0]
 8000afc:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <main+0x1ec>)
 8000afe:	881b      	ldrh	r3, [r3, #0]

						 memcpy(USB_Tx_buffer, (uint8_t*)(&gripper_position), sizeof(gripper_position));
 8000b00:	4a37      	ldr	r2, [pc, #220]	; (8000be0 <main+0x1f0>)
 8000b02:	8013      	strh	r3, [r2, #0]
						 memcpy(USB_Tx_buffer + sizeof(gripper_position), (uint8_t*)(&force_sensor_4_value), sizeof(force_sensor_4_value));
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <main+0x1f4>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	4937      	ldr	r1, [pc, #220]	; (8000be8 <main+0x1f8>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f008 f8be 	bl	8008c8c <memcpy>
						 CDC_Transmit_FS(USB_Tx_buffer, sizeof(gripper_position) + sizeof(force_sensor_4_value));
 8000b10:	210a      	movs	r1, #10
 8000b12:	4833      	ldr	r0, [pc, #204]	; (8000be0 <main+0x1f0>)
 8000b14:	f007 fc3a 	bl	800838c <CDC_Transmit_FS>

						 clearBufferAndCounter();
 8000b18:	f000 f9d2 	bl	8000ec0 <clearBufferAndCounter>
						 memset(USB_Tx_buffer, 0, sizeof(USB_Tx_buffer));  // Clear USB Tx buffer
 8000b1c:	2264      	movs	r2, #100	; 0x64
 8000b1e:	2100      	movs	r1, #0
 8000b20:	482f      	ldr	r0, [pc, #188]	; (8000be0 <main+0x1f0>)
 8000b22:	f008 f8c1 	bl	8008ca8 <memset>
						 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	2100      	movs	r1, #0
 8000b2a:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <main+0x1e8>)
 8000b2c:	f008 f8bc 	bl	8008ca8 <memset>
 8000b30:	e023      	b.n	8000b7a <main+0x18a>
					 }
					 else
					 {
						 gripper_position = TIM4->CCR1;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <main+0x1d4>)
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <main+0x1ec>)
 8000b3a:	801a      	strh	r2, [r3, #0]
						 memset(force_sensor_4_value, 0, sizeof(force_sensor_4_value)); // Clear force sensors buffer
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4829      	ldr	r0, [pc, #164]	; (8000be8 <main+0x1f8>)
 8000b42:	f008 f8b1 	bl	8008ca8 <memset>
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <main+0x1ec>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
						 memcpy(USB_Tx_buffer, (uint8_t*)(&gripper_position), sizeof(gripper_position));
 8000b4a:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <main+0x1f0>)
 8000b4c:	8013      	strh	r3, [r2, #0]
						 memcpy(USB_Tx_buffer + sizeof(gripper_position), (uint8_t*)(&force_sensor_4_value), sizeof(force_sensor_4_value));
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <main+0x1f4>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	4925      	ldr	r1, [pc, #148]	; (8000be8 <main+0x1f8>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 f899 	bl	8008c8c <memcpy>
						 CDC_Transmit_FS(USB_Tx_buffer, sizeof(gripper_position) + sizeof(force_sensor_4_value));
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	4820      	ldr	r0, [pc, #128]	; (8000be0 <main+0x1f0>)
 8000b5e:	f007 fc15 	bl	800838c <CDC_Transmit_FS>

						 clearBufferAndCounter();
 8000b62:	f000 f9ad 	bl	8000ec0 <clearBufferAndCounter>
						 memset(USB_Tx_buffer, 0, sizeof(USB_Tx_buffer));  // Clear USB Tx buffer
 8000b66:	2264      	movs	r2, #100	; 0x64
 8000b68:	2100      	movs	r1, #0
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <main+0x1f0>)
 8000b6c:	f008 f89c 	bl	8008ca8 <memset>
						 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 8000b70:	2240      	movs	r2, #64	; 0x40
 8000b72:	2100      	movs	r1, #0
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <main+0x1e8>)
 8000b76:	f008 f897 	bl	8008ca8 <memset>
					 }
//						 CDC_Transmit_FS(test_usb_buffer, sizeof(test_usb_buffer));
//						 stop_force_control_flag=1;
				 }
				 clearBufferAndCounter();
 8000b7a:	f000 f9a1 	bl	8000ec0 <clearBufferAndCounter>
				 memset(USB_Tx_buffer, 0, sizeof(USB_Tx_buffer));  // Clear USB Tx buffer
 8000b7e:	2264      	movs	r2, #100	; 0x64
 8000b80:	2100      	movs	r1, #0
 8000b82:	4817      	ldr	r0, [pc, #92]	; (8000be0 <main+0x1f0>)
 8000b84:	f008 f890 	bl	8008ca8 <memset>
				 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <main+0x1e8>)
 8000b8e:	f008 f88b 	bl	8008ca8 <memset>

				 break;
 8000b92:	e015      	b.n	8000bc0 <main+0x1d0>

			 case 's':
				 stop_motor();
 8000b94:	f000 fa02 	bl	8000f9c <stop_motor>
				 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 8000b98:	2240      	movs	r2, #64	; 0x40
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <main+0x1e8>)
 8000b9e:	f008 f883 	bl	8008ca8 <memset>
				 break;
 8000ba2:	e00d      	b.n	8000bc0 <main+0x1d0>

			 default:
				 if (stop_force_control_flag==1)
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <main+0x1fc>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d101      	bne.n	8000bb0 <main+0x1c0>
					 stop_motor();
 8000bac:	f000 f9f6 	bl	8000f9c <stop_motor>
				 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <main+0x1e8>)
 8000bb6:	f008 f877 	bl	8008ca8 <memset>
				 clearBufferAndCounter();
 8000bba:	f000 f981 	bl	8000ec0 <clearBufferAndCounter>
				 continue;
 8000bbe:	bf00      	nop
	  LL_mDelay(1);
 8000bc0:	e75b      	b.n	8000a7a <main+0x8a>
 8000bc2:	bf00      	nop
 8000bc4:	40000800 	.word	0x40000800
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	20000c68 	.word	0x20000c68
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000150 	.word	0x20000150
 8000be4:	20000152 	.word	0x20000152
 8000be8:	20000148 	.word	0x20000148
 8000bec:	20000132 	.word	0x20000132

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff fe33 	bl	8000860 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff fe44 	bl	8000888 <LL_FLASH_GetLatency>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d1fa      	bne.n	8000bfc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000c06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c0a:	f7ff fe4b 	bl	80008a4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000c0e:	f7ff fd25 	bl	800065c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000c12:	bf00      	nop
 8000c14:	f7ff fd32 	bl	800067c <LL_RCC_HSE_IsReady>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d1fa      	bne.n	8000c14 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_4);
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	22a8      	movs	r2, #168	; 0xa8
 8000c24:	2108      	movs	r1, #8
 8000c26:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000c2a:	f7ff fdd3 	bl	80007d4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLQ_DIV_7);
 8000c2e:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8000c32:	22a8      	movs	r2, #168	; 0xa8
 8000c34:	2108      	movs	r1, #8
 8000c36:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000c3a:	f7ff fdf1 	bl	8000820 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000c3e:	f7ff fda5 	bl	800078c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c42:	bf00      	nop
 8000c44:	f7ff fdb2 	bl	80007ac <LL_RCC_PLL_IsReady>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d1fa      	bne.n	8000c44 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fd4a 	bl	80006e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000c54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c58:	f7ff fd5a 	bl	8000710 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fd6b 	bl	8000738 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c62:	2002      	movs	r0, #2
 8000c64:	f7ff fd1e 	bl	80006a4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c68:	bf00      	nop
 8000c6a:	f7ff fd2f 	bl	80006cc <LL_RCC_GetSysClkSource>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d1fa      	bne.n	8000c6a <SystemClock_Config+0x7a>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <SystemClock_Config+0xa4>)
 8000c76:	f005 fae9 	bl	800624c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f001 f85e 	bl	8001d3c <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c86:	f000 f807 	bl	8000c98 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fd68 	bl	8000760 <LL_RCC_SetTIMPrescaler>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0501bd00 	.word	0x0501bd00

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>

08000ca2 <LL_TIM_OC_SetCompareCH2>:
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <LL_USART_IsActiveFlag_TC>:
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cce:	2b40      	cmp	r3, #64	; 0x40
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <LL_USART_IsActiveFlag_TXE>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf4:	2b80      	cmp	r3, #128	; 0x80
 8000cf6:	bf0c      	ite	eq
 8000cf8:	2301      	moveq	r3, #1
 8000cfa:	2300      	movne	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_USART_ClearFlag_TC>:
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000d32:	78fa      	ldrb	r2, [r7, #3]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	605a      	str	r2, [r3, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <LL_GPIO_SetOutputPin>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	619a      	str	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_GPIO_ResetOutputPin>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	619a      	str	r2, [r3, #24]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <transmitData>:
#include "gpio.h"
#include "crc.h"


void transmitData(USART_TypeDef *USARTx, uint8_t *data, int length)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	LL_GPIO_SetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Tx mode
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	4817      	ldr	r0, [pc, #92]	; (8000dec <transmitData+0x6c>)
 8000d90:	f7ff ffd8 	bl	8000d44 <LL_GPIO_SetOutputPin>
	for (int i = 0; i < length; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e011      	b.n	8000dbe <transmitData+0x3e>
	{
		while (!LL_USART_IsActiveFlag_TXE(USARTx));
 8000d9a:	bf00      	nop
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff ffa1 	bl	8000ce4 <LL_USART_IsActiveFlag_TXE>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f9      	beq.n	8000d9c <transmitData+0x1c>
		LL_USART_TransmitData8(USARTx, data[i]);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f7ff ffb7 	bl	8000d26 <LL_USART_TransmitData8>
	for (int i = 0; i < length; i++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbe9      	blt.n	8000d9a <transmitData+0x1a>
	}
	while (!LL_USART_IsActiveFlag_TC(USARTx))
 8000dc6:	bf00      	nop
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f7ff ff78 	bl	8000cbe <LL_USART_IsActiveFlag_TC>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f9      	beq.n	8000dc8 <transmitData+0x48>
		;
	LL_USART_ClearFlag_TC(USARTx);
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f7ff ff98 	bl	8000d0a <LL_USART_ClearFlag_TC>
	LL_GPIO_ResetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Rx mode
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <transmitData+0x6c>)
 8000dde:	f7ff ffbf 	bl	8000d60 <LL_GPIO_ResetOutputPin>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40020000 	.word	0x40020000

08000df0 <readForseSensor>:

uint8_t readForseSensor(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	memset(force_sensor_4_value, 0, sizeof(force_sensor_4_value)); // Clear force sensors buffer
 8000df6:	2208      	movs	r2, #8
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4827      	ldr	r0, [pc, #156]	; (8000e98 <readForseSensor+0xa8>)
 8000dfc:	f007 ff54 	bl	8008ca8 <memset>
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <readForseSensor+0xac>)
 8000e02:	781a      	ldrb	r2, [r3, #0]
	memcpy(txBuffer, (uint8_t*)(&command_to_read_force), sizeof(command_to_read_force)); //*
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <readForseSensor+0xb0>)
 8000e06:	701a      	strb	r2, [r3, #0]
	transmitData(USART2, (uint8_t*)txBuffer, (sizeof(command_to_read_force)));
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4925      	ldr	r1, [pc, #148]	; (8000ea0 <readForseSensor+0xb0>)
 8000e0c:	4825      	ldr	r0, [pc, #148]	; (8000ea4 <readForseSensor+0xb4>)
 8000e0e:	f7ff ffb7 	bl	8000d80 <transmitData>
	LL_mDelay(1);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f005 f9f4 	bl	8006200 <LL_mDelay>

	for(uint8_t i=0; i<4; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	e00d      	b.n	8000e3a <readForseSensor+0x4a>
		memcpy(&force_sensor_4_value[i], rxBuffer + (i * sizeof(uint16_t)), sizeof(uint16_t));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <readForseSensor+0xa8>)
 8000e24:	4413      	add	r3, r2
 8000e26:	79fa      	ldrb	r2, [r7, #7]
 8000e28:	0052      	lsls	r2, r2, #1
 8000e2a:	491f      	ldr	r1, [pc, #124]	; (8000ea8 <readForseSensor+0xb8>)
 8000e2c:	440a      	add	r2, r1
 8000e2e:	8812      	ldrh	r2, [r2, #0]
 8000e30:	b292      	uxth	r2, r2
 8000e32:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	3301      	adds	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d9ee      	bls.n	8000e1e <readForseSensor+0x2e>
	memcpy(&recieved_CRC_32, rxBuffer + (4 * sizeof(uint16_t)), sizeof(uint32_t));
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <readForseSensor+0xbc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <readForseSensor+0xc0>)
 8000e48:	601a      	str	r2, [r3, #0]

	for (uint8_t i = 0; i < 4; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	71bb      	strb	r3, [r7, #6]
 8000e4e:	e00b      	b.n	8000e68 <readForseSensor+0x78>
		CRC_uint32_calc_buffer[i] = (uint32_t)force_sensor_4_value[i];
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <readForseSensor+0xa8>)
 8000e54:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <readForseSensor+0xc4>)
 8000e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < 4; i++)
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	3301      	adds	r3, #1
 8000e66:	71bb      	strb	r3, [r7, #6]
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d9f0      	bls.n	8000e50 <readForseSensor+0x60>
	calculated_CRC_32 = HAL_CRC_Calculate(&hcrc, &CRC_uint32_calc_buffer, 4);
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4910      	ldr	r1, [pc, #64]	; (8000eb4 <readForseSensor+0xc4>)
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <readForseSensor+0xc8>)
 8000e74:	f001 f903 	bl	800207e <HAL_CRC_Calculate>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <readForseSensor+0xcc>)
 8000e7c:	6013      	str	r3, [r2, #0]
	if (recieved_CRC_32 == calculated_CRC_32)
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <readForseSensor+0xc0>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <readForseSensor+0xcc>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d101      	bne.n	8000e8e <readForseSensor+0x9e>
		return 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <readForseSensor+0xa0>
	else
		return 0;
 8000e8e:	2300      	movs	r3, #0

}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000148 	.word	0x20000148
 8000e9c:	20000002 	.word	0x20000002
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	2000059c 	.word	0x2000059c
 8000eac:	200005a4 	.word	0x200005a4
 8000eb0:	2000012c 	.word	0x2000012c
 8000eb4:	20000138 	.word	0x20000138
 8000eb8:	2000011c 	.word	0x2000011c
 8000ebc:	20000128 	.word	0x20000128

08000ec0 <clearBufferAndCounter>:


void clearBufferAndCounter(void)
	{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
		memset(rxBuffer, 0, sizeof(rxBuffer));
 8000ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <clearBufferAndCounter+0x38>)
 8000ecc:	f007 feec 	bl	8008ca8 <memset>
		rxBufferCounter = 0;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <clearBufferAndCounter+0x3c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
		memset(txBuffer, 0, sizeof(txBuffer));
 8000ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eda:	2100      	movs	r1, #0
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <clearBufferAndCounter+0x40>)
 8000ede:	f007 fee3 	bl	8008ca8 <memset>
		recieved_CRC_32 = 0;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <clearBufferAndCounter+0x44>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
		memset(CRC_uint32_calc_buffer, 0, sizeof(CRC_uint32_calc_buffer));
 8000ee8:	2210      	movs	r2, #16
 8000eea:	2100      	movs	r1, #0
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <clearBufferAndCounter+0x48>)
 8000eee:	f007 fedb 	bl	8008ca8 <memset>
	}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000059c 	.word	0x2000059c
 8000efc:	20000124 	.word	0x20000124
 8000f00:	200001b4 	.word	0x200001b4
 8000f04:	2000012c 	.word	0x2000012c
 8000f08:	20000138 	.word	0x20000138

08000f0c <set_new_force>:

void set_new_force(void)
	{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	    if (force_sensor_4_value[0] > 4096)
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <set_new_force+0x78>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f18:	d903      	bls.n	8000f22 <set_new_force+0x16>
	    	force_sensor_4_value[0] = 4096;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <set_new_force+0x78>)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	801a      	strh	r2, [r3, #0]

	    if (force_sensor_4_value[0] < 60)
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <set_new_force+0x78>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	2b3b      	cmp	r3, #59	; 0x3b
 8000f28:	d802      	bhi.n	8000f30 <set_new_force+0x24>
	    	force_sensor_4_value[0] = 0;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <set_new_force+0x78>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	801a      	strh	r2, [r3, #0]

	    pwm_calculations = force_sensor_4_value[3];
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <set_new_force+0x78>)
 8000f32:	88db      	ldrh	r3, [r3, #6]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <set_new_force+0x7c>)
 8000f3e:	edc3 7a00 	vstr	s15, [r3]

	    pwm = (uint16_t)roundf((pwm_calculations * 300.0f) / 4096.0f); // Scale value from 0-4096 to 0-350
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <set_new_force+0x7c>)
 8000f44:	edd3 7a00 	vldr	s15, [r3]
 8000f48:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f8c <set_new_force+0x80>
 8000f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f50:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000f90 <set_new_force+0x84>
 8000f54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f58:	eeb0 0a47 	vmov.f32	s0, s14
 8000f5c:	f007 feac 	bl	8008cb8 <roundf>
 8000f60:	eef0 7a40 	vmov.f32	s15, s0
 8000f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <set_new_force+0x88>)
 8000f70:	801a      	strh	r2, [r3, #0]

	    LL_TIM_OC_SetCompareCH2(TIM3,pwm);
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <set_new_force+0x88>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <set_new_force+0x8c>)
 8000f7a:	f7ff fe92 	bl	8000ca2 <LL_TIM_OC_SetCompareCH2>
	}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000148 	.word	0x20000148
 8000f88:	20000134 	.word	0x20000134
 8000f8c:	43960000 	.word	0x43960000
 8000f90:	45800000 	.word	0x45800000
 8000f94:	20000130 	.word	0x20000130
 8000f98:	40000400 	.word	0x40000400

08000f9c <stop_motor>:

void stop_motor(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH2(TIM3,0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4802      	ldr	r0, [pc, #8]	; (8000fac <stop_motor+0x10>)
 8000fa4:	f7ff fe7d 	bl	8000ca2 <LL_TIM_OC_SetCompareCH2>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40000400 	.word	0x40000400

08000fb0 <calibration>:

void calibration(void)
	{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
		LL_mDelay(100);
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	f005 f923 	bl	8006200 <LL_mDelay>
		LL_TIM_OC_SetCompareCH2(TIM3,100);
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <calibration+0x2c>)
 8000fbe:	f7ff fe70 	bl	8000ca2 <LL_TIM_OC_SetCompareCH2>
		LL_mDelay(4000);
 8000fc2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000fc6:	f005 f91b 	bl	8006200 <LL_mDelay>
		TIM4->CNT = 0;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <calibration+0x30>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
		LL_TIM_OC_SetCompareCH2(TIM3,0);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <calibration+0x2c>)
 8000fd4:	f7ff fe65 	bl	8000ca2 <LL_TIM_OC_SetCompareCH2>
	}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	40000800 	.word	0x40000800

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <LL_USART_IsActiveFlag_PE>:
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	bf0c      	ite	eq
 8001048:	2301      	moveq	r3, #1
 800104a:	2300      	movne	r3, #0
 800104c:	b2db      	uxtb	r3, r3
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_USART_IsActiveFlag_FE>:
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b02      	cmp	r3, #2
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_USART_IsActiveFlag_ORE>:
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b08      	cmp	r3, #8
 8001092:	bf0c      	ite	eq
 8001094:	2301      	moveq	r3, #1
 8001096:	2300      	movne	r3, #0
 8001098:	b2db      	uxtb	r3, r3
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_USART_IsActiveFlag_RXNE>:
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	2b20      	cmp	r3, #32
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_USART_ClearFlag_PE>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010da:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_USART_ClearFlag_FE>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010fe:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_USART_ClearFlag_ORE>:
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001122:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_USART_IsEnabledIT_RXNE>:
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b20      	cmp	r3, #32
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2db      	uxtb	r3, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_USART_ReceiveData8>:
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	b2db      	uxtb	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 fdea 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e8:	b598      	push	{r3, r4, r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80011ec:	481c      	ldr	r0, [pc, #112]	; (8001260 <USART2_IRQHandler+0x78>)
 80011ee:	f7ff ff5a 	bl	80010a6 <LL_USART_IsActiveFlag_RXNE>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d015      	beq.n	8001224 <USART2_IRQHandler+0x3c>
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <USART2_IRQHandler+0x78>)
 80011fa:	f7ff ff9d 	bl	8001138 <LL_USART_IsEnabledIT_RXNE>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00f      	beq.n	8001224 <USART2_IRQHandler+0x3c>
	{
		rxBuffer[rxBufferCounter] = LL_USART_ReceiveData8(USART2);
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <USART2_IRQHandler+0x7c>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	461c      	mov	r4, r3
 800120a:	4815      	ldr	r0, [pc, #84]	; (8001260 <USART2_IRQHandler+0x78>)
 800120c:	f7ff ffa7 	bl	800115e <LL_USART_ReceiveData8>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <USART2_IRQHandler+0x80>)
 8001216:	551a      	strb	r2, [r3, r4]
	    rxBufferCounter ++;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <USART2_IRQHandler+0x7c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <USART2_IRQHandler+0x7c>)
 8001222:	801a      	strh	r2, [r3, #0]
	}

    /* Check UART errors */
    if (LL_USART_IsActiveFlag_ORE(USART2)) // overrun
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <USART2_IRQHandler+0x78>)
 8001226:	f7ff ff2b 	bl	8001080 <LL_USART_IsActiveFlag_ORE>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <USART2_IRQHandler+0x4e>
        LL_USART_ClearFlag_ORE(USART2);
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <USART2_IRQHandler+0x78>)
 8001232:	f7ff ff6f 	bl	8001114 <LL_USART_ClearFlag_ORE>

    if (LL_USART_IsActiveFlag_FE(USART2)) // framing error
 8001236:	480a      	ldr	r0, [pc, #40]	; (8001260 <USART2_IRQHandler+0x78>)
 8001238:	f7ff ff0f 	bl	800105a <LL_USART_IsActiveFlag_FE>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <USART2_IRQHandler+0x60>
        LL_USART_ClearFlag_FE(USART2);
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <USART2_IRQHandler+0x78>)
 8001244:	f7ff ff54 	bl	80010f0 <LL_USART_ClearFlag_FE>

    if (LL_USART_IsActiveFlag_PE(USART2)) // parity error
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <USART2_IRQHandler+0x78>)
 800124a:	f7ff fef3 	bl	8001034 <LL_USART_IsActiveFlag_PE>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <USART2_IRQHandler+0x72>
        LL_USART_ClearFlag_PE(USART2);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <USART2_IRQHandler+0x78>)
 8001256:	f7ff ff39 	bl	80010cc <LL_USART_ClearFlag_PE>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd98      	pop	{r3, r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	40004400 	.word	0x40004400
 8001264:	20000124 	.word	0x20000124
 8001268:	2000059c 	.word	0x2000059c

0800126c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <OTG_FS_IRQHandler+0x10>)
 8001272:	f001 fa0b 	bl	800268c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20001ea8 	.word	0x20001ea8

08001280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <LL_AHB1_GRP1_EnableClock>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40023800 	.word	0x40023800

080013e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40023800 	.word	0x40023800

08001418 <LL_TIM_DisableARRPreload>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_TIM_OC_DisableFast>:
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d01c      	beq.n	8001482 <LL_TIM_OC_DisableFast+0x4a>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b04      	cmp	r3, #4
 800144c:	d017      	beq.n	800147e <LL_TIM_OC_DisableFast+0x46>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b10      	cmp	r3, #16
 8001452:	d012      	beq.n	800147a <LL_TIM_OC_DisableFast+0x42>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b40      	cmp	r3, #64	; 0x40
 8001458:	d00d      	beq.n	8001476 <LL_TIM_OC_DisableFast+0x3e>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001460:	d007      	beq.n	8001472 <LL_TIM_OC_DisableFast+0x3a>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001468:	d101      	bne.n	800146e <LL_TIM_OC_DisableFast+0x36>
 800146a:	2305      	movs	r3, #5
 800146c:	e00a      	b.n	8001484 <LL_TIM_OC_DisableFast+0x4c>
 800146e:	2306      	movs	r3, #6
 8001470:	e008      	b.n	8001484 <LL_TIM_OC_DisableFast+0x4c>
 8001472:	2304      	movs	r3, #4
 8001474:	e006      	b.n	8001484 <LL_TIM_OC_DisableFast+0x4c>
 8001476:	2303      	movs	r3, #3
 8001478:	e004      	b.n	8001484 <LL_TIM_OC_DisableFast+0x4c>
 800147a:	2302      	movs	r3, #2
 800147c:	e002      	b.n	8001484 <LL_TIM_OC_DisableFast+0x4c>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_TIM_OC_DisableFast+0x4c>
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3318      	adds	r3, #24
 800148a:	4619      	mov	r1, r3
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <LL_TIM_OC_DisableFast+0x84>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	440b      	add	r3, r1
 8001494:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	4908      	ldr	r1, [pc, #32]	; (80014c0 <LL_TIM_OC_DisableFast+0x88>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	4619      	mov	r1, r3
 80014a2:	2304      	movs	r3, #4
 80014a4:	408b      	lsls	r3, r1
 80014a6:	43db      	mvns	r3, r3
 80014a8:	401a      	ands	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	08008d5c 	.word	0x08008d5c
 80014c0:	08008d64 	.word	0x08008d64

080014c4 <LL_TIM_OC_EnablePreload>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d01c      	beq.n	800150e <LL_TIM_OC_EnablePreload+0x4a>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d017      	beq.n	800150a <LL_TIM_OC_EnablePreload+0x46>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b10      	cmp	r3, #16
 80014de:	d012      	beq.n	8001506 <LL_TIM_OC_EnablePreload+0x42>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2b40      	cmp	r3, #64	; 0x40
 80014e4:	d00d      	beq.n	8001502 <LL_TIM_OC_EnablePreload+0x3e>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ec:	d007      	beq.n	80014fe <LL_TIM_OC_EnablePreload+0x3a>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f4:	d101      	bne.n	80014fa <LL_TIM_OC_EnablePreload+0x36>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e00a      	b.n	8001510 <LL_TIM_OC_EnablePreload+0x4c>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e008      	b.n	8001510 <LL_TIM_OC_EnablePreload+0x4c>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <LL_TIM_OC_EnablePreload+0x4c>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <LL_TIM_OC_EnablePreload+0x4c>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <LL_TIM_OC_EnablePreload+0x4c>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_TIM_OC_EnablePreload+0x4c>
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3318      	adds	r3, #24
 8001516:	4619      	mov	r1, r3
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LL_TIM_OC_EnablePreload+0x80>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	440b      	add	r3, r1
 8001520:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <LL_TIM_OC_EnablePreload+0x84>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	4619      	mov	r1, r3
 800152e:	2308      	movs	r3, #8
 8001530:	408b      	lsls	r3, r1
 8001532:	431a      	orrs	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	08008d5c 	.word	0x08008d5c
 8001548:	08008d64 	.word	0x08008d64

0800154c <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d01c      	beq.n	8001598 <LL_TIM_IC_SetActiveInput+0x4c>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d017      	beq.n	8001594 <LL_TIM_IC_SetActiveInput+0x48>
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d012      	beq.n	8001590 <LL_TIM_IC_SetActiveInput+0x44>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d00d      	beq.n	800158c <LL_TIM_IC_SetActiveInput+0x40>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001576:	d007      	beq.n	8001588 <LL_TIM_IC_SetActiveInput+0x3c>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157e:	d101      	bne.n	8001584 <LL_TIM_IC_SetActiveInput+0x38>
 8001580:	2305      	movs	r3, #5
 8001582:	e00a      	b.n	800159a <LL_TIM_IC_SetActiveInput+0x4e>
 8001584:	2306      	movs	r3, #6
 8001586:	e008      	b.n	800159a <LL_TIM_IC_SetActiveInput+0x4e>
 8001588:	2304      	movs	r3, #4
 800158a:	e006      	b.n	800159a <LL_TIM_IC_SetActiveInput+0x4e>
 800158c:	2303      	movs	r3, #3
 800158e:	e004      	b.n	800159a <LL_TIM_IC_SetActiveInput+0x4e>
 8001590:	2302      	movs	r3, #2
 8001592:	e002      	b.n	800159a <LL_TIM_IC_SetActiveInput+0x4e>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_TIM_IC_SetActiveInput+0x4e>
 8001598:	2300      	movs	r3, #0
 800159a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3318      	adds	r3, #24
 80015a0:	4619      	mov	r1, r3
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <LL_TIM_IC_SetActiveInput+0x94>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	440b      	add	r3, r1
 80015aa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	490c      	ldr	r1, [pc, #48]	; (80015e4 <LL_TIM_IC_SetActiveInput+0x98>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	4619      	mov	r1, r3
 80015b8:	2303      	movs	r3, #3
 80015ba:	408b      	lsls	r3, r1
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	7df9      	ldrb	r1, [r7, #23]
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <LL_TIM_IC_SetActiveInput+0x98>)
 80015c8:	5c41      	ldrb	r1, [r0, r1]
 80015ca:	408b      	lsls	r3, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	08008d5c 	.word	0x08008d5c
 80015e4:	08008d6c 	.word	0x08008d6c

080015e8 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d01c      	beq.n	8001634 <LL_TIM_IC_SetPrescaler+0x4c>
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d017      	beq.n	8001630 <LL_TIM_IC_SetPrescaler+0x48>
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d012      	beq.n	800162c <LL_TIM_IC_SetPrescaler+0x44>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d00d      	beq.n	8001628 <LL_TIM_IC_SetPrescaler+0x40>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001612:	d007      	beq.n	8001624 <LL_TIM_IC_SetPrescaler+0x3c>
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161a:	d101      	bne.n	8001620 <LL_TIM_IC_SetPrescaler+0x38>
 800161c:	2305      	movs	r3, #5
 800161e:	e00a      	b.n	8001636 <LL_TIM_IC_SetPrescaler+0x4e>
 8001620:	2306      	movs	r3, #6
 8001622:	e008      	b.n	8001636 <LL_TIM_IC_SetPrescaler+0x4e>
 8001624:	2304      	movs	r3, #4
 8001626:	e006      	b.n	8001636 <LL_TIM_IC_SetPrescaler+0x4e>
 8001628:	2303      	movs	r3, #3
 800162a:	e004      	b.n	8001636 <LL_TIM_IC_SetPrescaler+0x4e>
 800162c:	2302      	movs	r3, #2
 800162e:	e002      	b.n	8001636 <LL_TIM_IC_SetPrescaler+0x4e>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_TIM_IC_SetPrescaler+0x4e>
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3318      	adds	r3, #24
 800163c:	4619      	mov	r1, r3
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <LL_TIM_IC_SetPrescaler+0x94>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	440b      	add	r3, r1
 8001646:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <LL_TIM_IC_SetPrescaler+0x98>)
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	4619      	mov	r1, r3
 8001654:	230c      	movs	r3, #12
 8001656:	408b      	lsls	r3, r1
 8001658:	43db      	mvns	r3, r3
 800165a:	401a      	ands	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	7df9      	ldrb	r1, [r7, #23]
 8001662:	4807      	ldr	r0, [pc, #28]	; (8001680 <LL_TIM_IC_SetPrescaler+0x98>)
 8001664:	5c41      	ldrb	r1, [r0, r1]
 8001666:	408b      	lsls	r3, r1
 8001668:	431a      	orrs	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	08008d5c 	.word	0x08008d5c
 8001680:	08008d6c 	.word	0x08008d6c

08001684 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d01c      	beq.n	80016d0 <LL_TIM_IC_SetFilter+0x4c>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d017      	beq.n	80016cc <LL_TIM_IC_SetFilter+0x48>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d012      	beq.n	80016c8 <LL_TIM_IC_SetFilter+0x44>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b40      	cmp	r3, #64	; 0x40
 80016a6:	d00d      	beq.n	80016c4 <LL_TIM_IC_SetFilter+0x40>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d007      	beq.n	80016c0 <LL_TIM_IC_SetFilter+0x3c>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d101      	bne.n	80016bc <LL_TIM_IC_SetFilter+0x38>
 80016b8:	2305      	movs	r3, #5
 80016ba:	e00a      	b.n	80016d2 <LL_TIM_IC_SetFilter+0x4e>
 80016bc:	2306      	movs	r3, #6
 80016be:	e008      	b.n	80016d2 <LL_TIM_IC_SetFilter+0x4e>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e006      	b.n	80016d2 <LL_TIM_IC_SetFilter+0x4e>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e004      	b.n	80016d2 <LL_TIM_IC_SetFilter+0x4e>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e002      	b.n	80016d2 <LL_TIM_IC_SetFilter+0x4e>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_TIM_IC_SetFilter+0x4e>
 80016d0:	2300      	movs	r3, #0
 80016d2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3318      	adds	r3, #24
 80016d8:	4619      	mov	r1, r3
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <LL_TIM_IC_SetFilter+0x94>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	440b      	add	r3, r1
 80016e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	490c      	ldr	r1, [pc, #48]	; (800171c <LL_TIM_IC_SetFilter+0x98>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	4619      	mov	r1, r3
 80016f0:	23f0      	movs	r3, #240	; 0xf0
 80016f2:	408b      	lsls	r3, r1
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	7df9      	ldrb	r1, [r7, #23]
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <LL_TIM_IC_SetFilter+0x98>)
 8001700:	5c41      	ldrb	r1, [r0, r1]
 8001702:	408b      	lsls	r3, r1
 8001704:	431a      	orrs	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	601a      	str	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	08008d5c 	.word	0x08008d5c
 800171c:	08008d6c 	.word	0x08008d6c

08001720 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d01c      	beq.n	800176c <LL_TIM_IC_SetPolarity+0x4c>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d017      	beq.n	8001768 <LL_TIM_IC_SetPolarity+0x48>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b10      	cmp	r3, #16
 800173c:	d012      	beq.n	8001764 <LL_TIM_IC_SetPolarity+0x44>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b40      	cmp	r3, #64	; 0x40
 8001742:	d00d      	beq.n	8001760 <LL_TIM_IC_SetPolarity+0x40>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174a:	d007      	beq.n	800175c <LL_TIM_IC_SetPolarity+0x3c>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001752:	d101      	bne.n	8001758 <LL_TIM_IC_SetPolarity+0x38>
 8001754:	2305      	movs	r3, #5
 8001756:	e00a      	b.n	800176e <LL_TIM_IC_SetPolarity+0x4e>
 8001758:	2306      	movs	r3, #6
 800175a:	e008      	b.n	800176e <LL_TIM_IC_SetPolarity+0x4e>
 800175c:	2304      	movs	r3, #4
 800175e:	e006      	b.n	800176e <LL_TIM_IC_SetPolarity+0x4e>
 8001760:	2303      	movs	r3, #3
 8001762:	e004      	b.n	800176e <LL_TIM_IC_SetPolarity+0x4e>
 8001764:	2302      	movs	r3, #2
 8001766:	e002      	b.n	800176e <LL_TIM_IC_SetPolarity+0x4e>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_TIM_IC_SetPolarity+0x4e>
 800176c:	2300      	movs	r3, #0
 800176e:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	490b      	ldr	r1, [pc, #44]	; (80017a4 <LL_TIM_IC_SetPolarity+0x84>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	4619      	mov	r1, r3
 800177c:	230a      	movs	r3, #10
 800177e:	408b      	lsls	r3, r1
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	4907      	ldr	r1, [pc, #28]	; (80017a4 <LL_TIM_IC_SetPolarity+0x84>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	4619      	mov	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	408b      	lsls	r3, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	08008d74 	.word	0x08008d74

080017a8 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	609a      	str	r2, [r3, #8]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b094      	sub	sp, #80	; 0x50
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800181a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	2220      	movs	r2, #32
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f007 fa38 	bl	8008ca8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001848:	2002      	movs	r0, #2
 800184a:	f7ff fdcd 	bl	80013e8 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800184e:	f7ff fd29 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001852:	4603      	mov	r3, r0
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fd79 	bl	8001350 <NVIC_EncodePriority>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	201d      	movs	r0, #29
 8001864:	f7ff fd4a 	bl	80012fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001868:	201d      	movs	r0, #29
 800186a:	f7ff fd29 	bl	80012c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 3;
 800186e:	2303      	movs	r3, #3
 8001870:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001872:	2300      	movs	r3, #0
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 999;
 8001876:	f240 33e7 	movw	r3, #999	; 0x3e7
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001880:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001884:	4619      	mov	r1, r3
 8001886:	481f      	ldr	r0, [pc, #124]	; (8001904 <MX_TIM3_Init+0xf0>)
 8001888:	f002 fb5a 	bl	8003f40 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800188c:	481d      	ldr	r0, [pc, #116]	; (8001904 <MX_TIM3_Init+0xf0>)
 800188e:	f7ff fdc3 	bl	8001418 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8001892:	2110      	movs	r1, #16
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <MX_TIM3_Init+0xf0>)
 8001896:	f7ff fe15 	bl	80014c4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800189a:	2360      	movs	r3, #96	; 0x60
 800189c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 499;
 80018a6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	461a      	mov	r2, r3
 80018b6:	2110      	movs	r1, #16
 80018b8:	4812      	ldr	r0, [pc, #72]	; (8001904 <MX_TIM3_Init+0xf0>)
 80018ba:	f002 fbbb 	bl	8004034 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 80018be:	2110      	movs	r1, #16
 80018c0:	4810      	ldr	r0, [pc, #64]	; (8001904 <MX_TIM3_Init+0xf0>)
 80018c2:	f7ff fdb9 	bl	8001438 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80018c6:	2100      	movs	r1, #0
 80018c8:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_TIM3_Init+0xf0>)
 80018ca:	f7ff ff80 	bl	80017ce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_TIM3_Init+0xf0>)
 80018d0:	f7ff ff90 	bl	80017f4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff fd6f 	bl	80013b8 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018de:	2302      	movs	r3, #2
 80018e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_TIM3_Init+0xf4>)
 80018f8:	f002 f907 	bl	8003b0a <LL_GPIO_Init>

}
 80018fc:	bf00      	nop
 80018fe:	3750      	adds	r7, #80	; 0x50
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40000400 	.word	0x40000400
 8001908:	40020000 	.word	0x40020000

0800190c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001932:	2004      	movs	r0, #4
 8001934:	f7ff fd58 	bl	80013e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001938:	2002      	movs	r0, #2
 800193a:	f7ff fd3d 	bl	80013b8 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001942:	2302      	movs	r3, #2
 8001944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4830      	ldr	r0, [pc, #192]	; (8001a1c <MX_TIM4_Init+0x110>)
 800195c:	f002 f8d5 	bl	8003b0a <LL_GPIO_Init>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001960:	f7ff fca0 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001964:	4603      	mov	r3, r0
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fcf0 	bl	8001350 <NVIC_EncodePriority>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	201e      	movs	r0, #30
 8001976:	f7ff fcc1 	bl	80012fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 800197a:	201e      	movs	r0, #30
 800197c:	f7ff fca0 	bl	80012c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X4_TI12);
 8001980:	2103      	movs	r1, #3
 8001982:	4827      	ldr	r0, [pc, #156]	; (8001a20 <MX_TIM4_Init+0x114>)
 8001984:	f7ff ff10 	bl	80017a8 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001988:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800198c:	2101      	movs	r1, #1
 800198e:	4824      	ldr	r0, [pc, #144]	; (8001a20 <MX_TIM4_Init+0x114>)
 8001990:	f7ff fddc 	bl	800154c <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001994:	2200      	movs	r2, #0
 8001996:	2101      	movs	r1, #1
 8001998:	4821      	ldr	r0, [pc, #132]	; (8001a20 <MX_TIM4_Init+0x114>)
 800199a:	f7ff fe25 	bl	80015e8 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 800199e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80019a2:	2101      	movs	r1, #1
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <MX_TIM4_Init+0x114>)
 80019a6:	f7ff fe6d 	bl	8001684 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	481c      	ldr	r0, [pc, #112]	; (8001a20 <MX_TIM4_Init+0x114>)
 80019b0:	f7ff feb6 	bl	8001720 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80019b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b8:	2110      	movs	r1, #16
 80019ba:	4819      	ldr	r0, [pc, #100]	; (8001a20 <MX_TIM4_Init+0x114>)
 80019bc:	f7ff fdc6 	bl	800154c <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2110      	movs	r1, #16
 80019c4:	4816      	ldr	r0, [pc, #88]	; (8001a20 <MX_TIM4_Init+0x114>)
 80019c6:	f7ff fe0f 	bl	80015e8 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 80019ca:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80019ce:	2110      	movs	r1, #16
 80019d0:	4813      	ldr	r0, [pc, #76]	; (8001a20 <MX_TIM4_Init+0x114>)
 80019d2:	f7ff fe57 	bl	8001684 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2110      	movs	r1, #16
 80019da:	4811      	ldr	r0, [pc, #68]	; (8001a20 <MX_TIM4_Init+0x114>)
 80019dc:	f7ff fea0 	bl	8001720 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80019e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <MX_TIM4_Init+0x114>)
 80019fa:	f002 faa1 	bl	8003f40 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80019fe:	4808      	ldr	r0, [pc, #32]	; (8001a20 <MX_TIM4_Init+0x114>)
 8001a00:	f7ff fd0a 	bl	8001418 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_TIM4_Init+0x114>)
 8001a08:	f7ff fee1 	bl	80017ce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_TIM4_Init+0x114>)
 8001a0e:	f7ff fef1 	bl	80017f4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3730      	adds	r7, #48	; 0x30
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40000800 	.word	0x40000800

08001a24 <__NVIC_GetPriorityGrouping>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <__NVIC_EnableIRQ+0x38>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <LL_AHB1_GRP1_EnableClock>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40023800 	.word	0x40023800

08001b68 <LL_APB1_GRP1_EnableClock>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4013      	ands	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40023800 	.word	0x40023800

08001b98 <LL_USART_Enable>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_USART_ConfigAsyncMode>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	615a      	str	r2, [r3, #20]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001c0e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c12:	f7ff ffa9 	bl	8001b68 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff ff8e 	bl	8001b38 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001c1c:	230c      	movs	r3, #12
 8001c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c20:	2302      	movs	r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c30:	2307      	movs	r3, #7
 8001c32:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4818      	ldr	r0, [pc, #96]	; (8001c9c <MX_USART2_UART_Init+0xb8>)
 8001c3a:	f001 ff66 	bl	8003b0a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c3e:	f7ff fef1 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff41 	bl	8001ad0 <NVIC_EncodePriority>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4619      	mov	r1, r3
 8001c52:	2026      	movs	r0, #38	; 0x26
 8001c54:	f7ff ff12 	bl	8001a7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001c58:	2026      	movs	r0, #38	; 0x26
 8001c5a:	f7ff fef1 	bl	8001a40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001c5e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c62:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c70:	230c      	movs	r3, #12
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <MX_USART2_UART_Init+0xbc>)
 8001c84:	f002 fe0a 	bl	800489c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART2_UART_Init+0xbc>)
 8001c8a:	f7ff ff95 	bl	8001bb8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_USART2_UART_Init+0xbc>)
 8001c90:	f7ff ff82 	bl	8001b98 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3738      	adds	r7, #56	; 0x38
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40004400 	.word	0x40004400

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001caa:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cc0:	4c0b      	ldr	r4, [pc, #44]	; (8001cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cce:	f7ff fad7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f006 ffb7 	bl	8008c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7fe fe8b 	bl	80009f0 <main>
  bx  lr    
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001ce8:	08008d8c 	.word	0x08008d8c
  ldr r2, =_sbss
 8001cec:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001cf0:	200025d4 	.word	0x200025d4

08001cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_Init+0x40>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_Init+0x40>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x40>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f94f 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff f95a 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f967 	bl	800202e <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 f92f 	bl	8001fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000004 	.word	0x20000004
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	2000000c 	.word	0x2000000c
 8001dc0:	20000984 	.word	0x20000984

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000984 	.word	0x20000984

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff ffee 	bl	8001dc4 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_Delay+0x44>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000000c 	.word	0x2000000c

08001e24 <__NVIC_SetPriorityGrouping>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <__NVIC_EnableIRQ+0x38>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff29 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff3e 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff31 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa2 	bl	8001f80 <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e00e      	b.n	8002076 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	795b      	ldrb	r3, [r3, #5]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7fe fa49 	bl	8000500 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2202      	movs	r2, #2
 8002092:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	441a      	add	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3f0      	bcc.n	80020aa <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80020d6:	693b      	ldr	r3, [r7, #16]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e159      	b.n	80023b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8148 	bne.w	80023ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a2 	beq.w	80023ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b57      	ldr	r3, [pc, #348]	; (80023cc <HAL_GPIO_Init+0x2e8>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a56      	ldr	r2, [pc, #344]	; (80023cc <HAL_GPIO_Init+0x2e8>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b54      	ldr	r3, [pc, #336]	; (80023cc <HAL_GPIO_Init+0x2e8>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_GPIO_Init+0x2ec>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a49      	ldr	r2, [pc, #292]	; (80023d4 <HAL_GPIO_Init+0x2f0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x202>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <HAL_GPIO_Init+0x2f4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x1fe>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_GPIO_Init+0x2f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x1fa>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a46      	ldr	r2, [pc, #280]	; (80023e0 <HAL_GPIO_Init+0x2fc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x1f6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a45      	ldr	r2, [pc, #276]	; (80023e4 <HAL_GPIO_Init+0x300>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x1f2>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e008      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022d6:	2307      	movs	r3, #7
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022da:	2303      	movs	r3, #3
 80022dc:	e004      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022e6:	2300      	movs	r3, #0
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f002 0203 	and.w	r2, r2, #3
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4093      	lsls	r3, r2
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f8:	4935      	ldr	r1, [pc, #212]	; (80023d0 <HAL_GPIO_Init+0x2ec>)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002306:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232a:	4a2f      	ldr	r2, [pc, #188]	; (80023e8 <HAL_GPIO_Init+0x304>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235a:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_GPIO_Init+0x304>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237e:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a8:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_GPIO_Init+0x304>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	f67f aea2 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40020800 	.word	0x40020800
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40013c00 	.word	0x40013c00

080023ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ee:	b08f      	sub	sp, #60	; 0x3c
 80023f0:	af0a      	add	r7, sp, #40	; 0x28
 80023f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e10f      	b.n	800261e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f006 f8ff 	bl	800861c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2203      	movs	r2, #3
 8002422:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f002 fba6 	bl	8004b8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	687e      	ldr	r6, [r7, #4]
 800244a:	466d      	mov	r5, sp
 800244c:	f106 0410 	add.w	r4, r6, #16
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002460:	1d33      	adds	r3, r6, #4
 8002462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f002 fa7d 	bl	8004964 <USB_CoreInit>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d0      	b.n	800261e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f002 fb94 	bl	8004bb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e04a      	b.n	8002524 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333d      	adds	r3, #61	; 0x3d
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	333c      	adds	r3, #60	; 0x3c
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	b298      	uxth	r0, r3
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3344      	adds	r3, #68	; 0x44
 80024ca:	4602      	mov	r2, r0
 80024cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3340      	adds	r3, #64	; 0x40
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3348      	adds	r3, #72	; 0x48
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	334c      	adds	r3, #76	; 0x4c
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3354      	adds	r3, #84	; 0x54
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	3301      	adds	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	d3af      	bcc.n	800248e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e044      	b.n	80025be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3b5      	bcc.n	8002534 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	687e      	ldr	r6, [r7, #4]
 80025d0:	466d      	mov	r5, sp
 80025d2:	f106 0410 	add.w	r4, r6, #16
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e6:	1d33      	adds	r3, r6, #4
 80025e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ea:	6838      	ldr	r0, [r7, #0]
 80025ec:	f002 fb2c 	bl	8004c48 <USB_DevInit>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00d      	b.n	800261e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fc7b 	bl	8005f12 <USB_DevDisconnect>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002626 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_PCD_Start+0x1c>
 800263e:	2302      	movs	r3, #2
 8002640:	e020      	b.n	8002684 <HAL_PCD_Start+0x5e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	2b01      	cmp	r3, #1
 8002650:	d109      	bne.n	8002666 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002656:	2b01      	cmp	r3, #1
 8002658:	d005      	beq.n	8002666 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f002 fa7e 	bl	8004b6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 fc2b 	bl	8005ed0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b08d      	sub	sp, #52	; 0x34
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fce9 	bl	800607a <USB_GetMode>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 848a 	bne.w	8002fc4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 fc4d 	bl	8005f54 <USB_ReadInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8480 	beq.w	8002fc2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fc3a 	bl	8005f54 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 0202 	and.w	r2, r2, #2
 80026f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 fc28 	bl	8005f54 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b10      	cmp	r3, #16
 800270c:	d161      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0210 	bic.w	r2, r2, #16
 800271c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	0c5b      	lsrs	r3, r3, #17
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	2b02      	cmp	r3, #2
 8002748:	d124      	bne.n	8002794 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d035      	beq.n	80027c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	6a38      	ldr	r0, [r7, #32]
 800276a:	f003 fa5f 	bl	8005c2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277a:	441a      	add	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	6a1a      	ldr	r2, [r3, #32]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278c:	441a      	add	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
 8002792:	e016      	b.n	80027c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	0c5b      	lsrs	r3, r3, #17
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	2b06      	cmp	r3, #6
 800279e:	d110      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027a6:	2208      	movs	r2, #8
 80027a8:	4619      	mov	r1, r3
 80027aa:	6a38      	ldr	r0, [r7, #32]
 80027ac:	f003 fa3e 	bl	8005c2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027bc:	441a      	add	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0210 	orr.w	r2, r2, #16
 80027d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fbbc 	bl	8005f54 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027e6:	f040 80a7 	bne.w	8002938 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fbc1 	bl	8005f7a <USB_ReadDevAllOutEpInterrupt>
 80027f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027fa:	e099      	b.n	8002930 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 808e 	beq.w	8002924 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fbe5 	bl	8005fe2 <USB_ReadDevOutEPInterrupt>
 8002818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00c      	beq.n	800283e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002830:	461a      	mov	r2, r3
 8002832:	2301      	movs	r3, #1
 8002834:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fec3 	bl	80035c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2308      	movs	r3, #8
 8002858:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800285a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 ff99 	bl	8003794 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002878:	461a      	mov	r2, r3
 800287a:	2310      	movs	r3, #16
 800287c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d030      	beq.n	80028ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	d109      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	78db      	ldrb	r3, [r3, #3]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f005 ffa8 	bl	8008828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2302      	movs	r3, #2
 80028e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002900:	461a      	mov	r2, r3
 8002902:	2320      	movs	r3, #32
 8002904:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291c:	461a      	mov	r2, r3
 800291e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002922:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3301      	adds	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	f47f af62 	bne.w	80027fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 fb09 	bl	8005f54 <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800294c:	f040 80db 	bne.w	8002b06 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f003 fb2a 	bl	8005fae <USB_ReadDevAllInEpInterrupt>
 800295a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002960:	e0cd      	b.n	8002afe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80c2 	beq.w	8002af2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fb50 	bl	800601e <USB_ReadDevInEPInterrupt>
 800297e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d057      	beq.n	8002a3a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	2201      	movs	r2, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69f9      	ldr	r1, [r7, #28]
 80029a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029aa:	4013      	ands	r3, r2
 80029ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ba:	461a      	mov	r2, r3
 80029bc:	2301      	movs	r3, #1
 80029be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d132      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334c      	adds	r3, #76	; 0x4c
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4403      	add	r3, r0
 80029e8:	3348      	adds	r3, #72	; 0x48
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4419      	add	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4403      	add	r3, r0
 80029fc:	334c      	adds	r3, #76	; 0x4c
 80029fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x3a2>
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3354      	adds	r3, #84	; 0x54
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d108      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a26:	461a      	mov	r2, r3
 8002a28:	2101      	movs	r1, #1
 8002a2a:	f003 fb57 	bl	80060dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f005 fe72 	bl	800871e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a50:	461a      	mov	r2, r3
 8002a52:	2308      	movs	r3, #8
 8002a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2310      	movs	r3, #16
 8002a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2340      	movs	r3, #64	; 0x40
 8002a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d023      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a9a:	6a38      	ldr	r0, [r7, #32]
 8002a9c:	f002 fa38 	bl	8004f10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	3338      	adds	r3, #56	; 0x38
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	78db      	ldrb	r3, [r3, #3]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f005 febf 	bl	800884c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ada:	461a      	mov	r2, r3
 8002adc:	2302      	movs	r3, #2
 8002ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fcdb 	bl	80034a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f47f af2e 	bne.w	8002962 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fa22 	bl	8005f54 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b1a:	d122      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b42:	2100      	movs	r1, #0
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fec3 	bl	80038d0 <HAL_PCDEx_LPM_Callback>
 8002b4a:	e002      	b.n	8002b52 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f005 fe5d 	bl	800880c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 f9f4 	bl	8005f54 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b76:	d112      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f005 fe19 	bl	80087c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b9c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 f9d6 	bl	8005f54 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	f040 80b7 	bne.w	8002d24 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2110      	movs	r1, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 f99d 	bl	8004f10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	e046      	b.n	8002c6a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be8:	461a      	mov	r2, r3
 8002bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c00:	0151      	lsls	r1, r2, #5
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	440a      	add	r2, r1
 8002c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c22:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c34:	0151      	lsls	r1, r2, #5
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	440a      	add	r2, r1
 8002c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c54:	0151      	lsls	r1, r2, #5
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	440a      	add	r2, r1
 8002c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c62:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	3301      	adds	r3, #1
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d3b3      	bcc.n	8002bdc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c82:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c86:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d016      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca0:	f043 030b 	orr.w	r3, r3, #11
 8002ca4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb6:	f043 030b 	orr.w	r3, r3, #11
 8002cba:	6453      	str	r3, [r2, #68]	; 0x44
 8002cbc:	e015      	b.n	8002cea <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cd4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce4:	f043 030b 	orr.w	r3, r3, #11
 8002ce8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cfc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f003 f9e4 	bl	80060dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 f913 	bl	8005f54 <USB_ReadInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d38:	d124      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 f9a9 	bl	8006096 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 f95e 	bl	800500a <USB_GetDevSpeed>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681c      	ldr	r4, [r3, #0]
 8002d5a:	f000 fdc5 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8002d5e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f001 fe5d 	bl	8004a28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f005 fcfd 	bl	800876e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 f8e3 	bl	8005f54 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d10a      	bne.n	8002dae <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f005 fcda 	bl	8008752 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f002 0208 	and.w	r2, r2, #8
 8002dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 f8ce 	bl	8005f54 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d122      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dce:	2301      	movs	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e014      	b.n	8002dfe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fb27 	bl	8003446 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3e5      	bcc.n	8002dd4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 f8a1 	bl	8005f54 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1c:	d13b      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e1e:	2301      	movs	r3, #1
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	e02b      	b.n	8002e7c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3340      	adds	r3, #64	; 0x40
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d115      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da12      	bge.n	8002e76 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	333f      	adds	r3, #63	; 0x3f
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fae8 	bl	8003446 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	3301      	adds	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3ce      	bcc.n	8002e24 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f85a 	bl	8005f54 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eaa:	d155      	bne.n	8002f58 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eac:	2301      	movs	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	e045      	b.n	8002f3e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d12e      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002eda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da2b      	bge.n	8002f38 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002eec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d121      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f34:	6053      	str	r3, [r2, #4]
            break;
 8002f36:	e007      	b.n	8002f48 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d3b4      	bcc.n	8002eb2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f002 fff9 	bl	8005f54 <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d10a      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f005 fc7e 	bl	8008870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f002 ffe3 	bl	8005f54 <USB_ReadInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d115      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f005 fc6e 	bl	800888c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	e000      	b.n	8002fc4 <HAL_PCD_IRQHandler+0x938>
      return;
 8002fc2:	bf00      	nop
    }
  }
}
 8002fc4:	3734      	adds	r7, #52	; 0x34
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}

08002fca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_PCD_SetAddress+0x1a>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e013      	b.n	800300c <HAL_PCD_SetAddress+0x42>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 ff41 	bl	8005e84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	461a      	mov	r2, r3
 8003022:	4603      	mov	r3, r0
 8003024:	70fb      	strb	r3, [r7, #3]
 8003026:	460b      	mov	r3, r1
 8003028:	803b      	strh	r3, [r7, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003036:	2b00      	cmp	r3, #0
 8003038:	da0f      	bge.n	800305a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 020f 	and.w	r2, r3, #15
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3338      	adds	r3, #56	; 0x38
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	3304      	adds	r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	705a      	strb	r2, [r3, #1]
 8003058:	e00f      	b.n	800307a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 020f 	and.w	r2, r3, #15
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	3304      	adds	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003086:	883a      	ldrh	r2, [r7, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	78ba      	ldrb	r2, [r7, #2]
 8003090:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	785b      	ldrb	r3, [r3, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030a4:	78bb      	ldrb	r3, [r7, #2]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d102      	bne.n	80030b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_PCD_EP_Open+0xaa>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e00e      	b.n	80030dc <HAL_PCD_EP_Open+0xc8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 ffc1 	bl	8005054 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80030da:	7afb      	ldrb	r3, [r7, #11]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da0f      	bge.n	8003118 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	3338      	adds	r3, #56	; 0x38
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	3304      	adds	r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	705a      	strb	r2, [r3, #1]
 8003116:	e00f      	b.n	8003138 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_PCD_EP_Close+0x6e>
 800314e:	2302      	movs	r3, #2
 8003150:	e00e      	b.n	8003170 <HAL_PCD_EP_Close+0x8c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	4618      	mov	r0, r3
 8003162:	f001 ffff 	bl	8005164 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	460b      	mov	r3, r1
 8003186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003188:	7afb      	ldrb	r3, [r7, #11]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	3304      	adds	r3, #4
 80031a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2200      	movs	r2, #0
 80031b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d4:	7afb      	ldrb	r3, [r7, #11]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	f002 fade 	bl	80057ac <USB_EP0StartXfer>
 80031f0:	e008      	b.n	8003204 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6979      	ldr	r1, [r7, #20]
 8003200:	f002 f88c 	bl	800531c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 020f 	and.w	r2, r3, #15
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003230:	681b      	ldr	r3, [r3, #0]
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	460b      	mov	r3, r1
 800324c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324e:	7afb      	ldrb	r3, [r7, #11]
 8003250:	f003 020f 	and.w	r2, r3, #15
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	3338      	adds	r3, #56	; 0x38
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	3304      	adds	r3, #4
 8003264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2201      	movs	r2, #1
 800327c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	6979      	ldr	r1, [r7, #20]
 80032b0:	f002 fa7c 	bl	80057ac <USB_EP0StartXfer>
 80032b4:	e008      	b.n	80032c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	6979      	ldr	r1, [r7, #20]
 80032c4:	f002 f82a 	bl	800531c <USB_EPStartXfer>
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d901      	bls.n	80032f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e050      	b.n	8003392 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	da0f      	bge.n	8003318 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	3338      	adds	r3, #56	; 0x38
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	705a      	strb	r2, [r3, #1]
 8003316:	e00d      	b.n	8003334 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_PCD_EP_SetStall+0x82>
 8003350:	2302      	movs	r3, #2
 8003352:	e01e      	b.n	8003392 <HAL_PCD_EP_SetStall+0xc0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68f9      	ldr	r1, [r7, #12]
 8003362:	4618      	mov	r0, r3
 8003364:	f002 fcba 	bl	8005cdc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	b2d9      	uxtb	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003382:	461a      	mov	r2, r3
 8003384:	f002 feaa 	bl	80060dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d901      	bls.n	80033b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e042      	b.n	800343e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0f      	bge.n	80033e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3338      	adds	r3, #56	; 0x38
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	705a      	strb	r2, [r3, #1]
 80033de:	e00f      	b.n	8003400 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_PCD_EP_ClrStall+0x86>
 800341c:	2302      	movs	r3, #2
 800341e:	e00e      	b.n	800343e <HAL_PCD_EP_ClrStall+0xa4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f002 fcc2 	bl	8005db8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da0c      	bge.n	8003474 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3338      	adds	r3, #56	; 0x38
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e00c      	b.n	800348e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f002 fae1 	bl	8005a5c <USB_EPStopXfer>
 800349a:	4603      	mov	r3, r0
 800349c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800349e:	7afb      	ldrb	r3, [r7, #11]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3338      	adds	r3, #56	; 0x38
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d901      	bls.n	80034e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e06c      	b.n	80035ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d902      	bls.n	80034fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3303      	adds	r3, #3
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003504:	e02b      	b.n	800355e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3303      	adds	r3, #3
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6919      	ldr	r1, [r3, #16]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800353a:	b2db      	uxtb	r3, r3
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	4603      	mov	r3, r0
 8003540:	6978      	ldr	r0, [r7, #20]
 8003542:	f002 fb35 	bl	8005bb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	441a      	add	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	441a      	add	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	b29b      	uxth	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	429a      	cmp	r2, r3
 8003572:	d809      	bhi.n	8003588 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800357c:	429a      	cmp	r2, r3
 800357e:	d203      	bcs.n	8003588 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1be      	bne.n	8003506 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	429a      	cmp	r2, r3
 8003592:	d811      	bhi.n	80035b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	2201      	movs	r2, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	6939      	ldr	r1, [r7, #16]
 80035b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b4:	4013      	ands	r3, r2
 80035b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	333c      	adds	r3, #60	; 0x3c
 80035dc:	3304      	adds	r3, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d17b      	bne.n	80036f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4a61      	ldr	r2, [pc, #388]	; (800378c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	f240 80b9 	bls.w	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80b3 	beq.w	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362c:	6093      	str	r3, [r2, #8]
 800362e:	e0a7      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003646:	461a      	mov	r2, r3
 8003648:	2320      	movs	r3, #32
 800364a:	6093      	str	r3, [r2, #8]
 800364c:	e098      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	f040 8093 	bne.w	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4a4b      	ldr	r2, [pc, #300]	; (800378c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d90f      	bls.n	8003682 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	461a      	mov	r2, r3
 800367a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367e:	6093      	str	r3, [r2, #8]
 8003680:	e07e      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	0159      	lsls	r1, r3, #5
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	440b      	add	r3, r1
 80036a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	1ad2      	subs	r2, r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d114      	bne.n	80036e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036cc:	461a      	mov	r2, r3
 80036ce:	2101      	movs	r1, #1
 80036d0:	f002 fd04 	bl	80060dc <USB_EP0_OutStart>
 80036d4:	e006      	b.n	80036e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f004 fffc 	bl	80086e8 <HAL_PCD_DataOutStageCallback>
 80036f0:	e046      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d124      	bne.n	8003744 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	e032      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	2320      	movs	r3, #32
 8003734:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f004 ffd3 	bl	80086e8 <HAL_PCD_DataOutStageCallback>
 8003742:	e01d      	b.n	8003780 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d114      	bne.n	8003774 <PCD_EP_OutXfrComplete_int+0x1b0>
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800376c:	461a      	mov	r2, r3
 800376e:	2100      	movs	r1, #0
 8003770:	f002 fcb4 	bl	80060dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4619      	mov	r1, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f004 ffb4 	bl	80086e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	4f54300a 	.word	0x4f54300a
 8003790:	4f54310a 	.word	0x4f54310a

08003794 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	333c      	adds	r3, #60	; 0x3c
 80037ac:	3304      	adds	r3, #4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a15      	ldr	r2, [pc, #84]	; (800381c <PCD_EP_OutSetupPacket_int+0x88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d90e      	bls.n	80037e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e0:	461a      	mov	r2, r3
 80037e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f004 ff6b 	bl	80086c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <PCD_EP_OutSetupPacket_int+0x88>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d90c      	bls.n	8003810 <PCD_EP_OutSetupPacket_int+0x7c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003808:	461a      	mov	r2, r3
 800380a:	2101      	movs	r1, #1
 800380c:	f002 fc66 	bl	80060dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	4f54300a 	.word	0x4f54300a

08003820 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
 800382c:	4613      	mov	r3, r2
 800382e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800383e:	883b      	ldrh	r3, [r7, #0]
 8003840:	0419      	lsls	r1, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	430a      	orrs	r2, r1
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
 800384c:	e028      	b.n	80038a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4413      	add	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e00d      	b.n	800387e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	3340      	adds	r3, #64	; 0x40
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	4413      	add	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	3301      	adds	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	3b01      	subs	r3, #1
 8003884:	429a      	cmp	r2, r3
 8003886:	d3ec      	bcc.n	8003862 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003888:	883b      	ldrh	r3, [r7, #0]
 800388a:	0418      	lsls	r0, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	3b01      	subs	r3, #1
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	4302      	orrs	r2, r0
 8003898:	3340      	adds	r3, #64	; 0x40
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000004 	.word	0x20000004

08003900 <LL_GPIO_SetPinMode>:
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	613b      	str	r3, [r7, #16]
  return result;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2103      	movs	r1, #3
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	61bb      	str	r3, [r7, #24]
  return result;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_GPIO_SetPinOutputType>:
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	605a      	str	r2, [r3, #4]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_GPIO_SetPinSpeed>:
{
 800398e:	b480      	push	{r7}
 8003990:	b089      	sub	sp, #36	; 0x24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	613b      	str	r3, [r7, #16]
  return result;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2103      	movs	r1, #3
 80039b6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	401a      	ands	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	61bb      	str	r3, [r7, #24]
  return result;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	431a      	orrs	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	3724      	adds	r7, #36	; 0x24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_GPIO_SetPinPull>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	613b      	str	r3, [r7, #16]
  return result;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	2103      	movs	r1, #3
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	61bb      	str	r3, [r7, #24]
  return result;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	60da      	str	r2, [r3, #12]
}
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_GPIO_SetAFPin_0_7>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b089      	sub	sp, #36	; 0x24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	613b      	str	r3, [r7, #16]
  return result;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	210f      	movs	r1, #15
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	401a      	ands	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	61bb      	str	r3, [r7, #24]
  return result;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	431a      	orrs	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]
}
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	; 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_GPIO_SetAFPin_8_15>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	; 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	613b      	str	r3, [r7, #16]
  return result;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	210f      	movs	r1, #15
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	401a      	ands	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	61bb      	str	r3, [r7, #24]
  return result;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003afe:	bf00      	nop
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b088      	sub	sp, #32
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	613b      	str	r3, [r7, #16]
  return result;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003b34:	e050      	b.n	8003bd8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d042      	beq.n	8003bd2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d003      	beq.n	8003b5c <LL_GPIO_Init+0x52>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d10d      	bne.n	8003b78 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	461a      	mov	r2, r3
 8003b62:	69b9      	ldr	r1, [r7, #24]
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff ff12 	bl	800398e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fef3 	bl	800395e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	69b9      	ldr	r1, [r7, #24]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff33 	bl	80039ec <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d11a      	bne.n	8003bc4 <LL_GPIO_Init+0xba>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	60bb      	str	r3, [r7, #8]
  return result;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003b9c:	fab3 f383 	clz	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b07      	cmp	r3, #7
 8003ba4:	d807      	bhi.n	8003bb6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	461a      	mov	r2, r3
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ff4b 	bl	8003a4a <LL_GPIO_SetAFPin_0_7>
 8003bb4:	e006      	b.n	8003bc4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ff72 	bl	8003aa8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	69b9      	ldr	r1, [r7, #24]
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fe97 	bl	8003900 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1a7      	bne.n	8003b36 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <LL_RCC_GetSysClkSource>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <LL_RCC_GetSysClkSource+0x18>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800

08003c0c <LL_RCC_GetAHBPrescaler>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <LL_RCC_GetAHBPrescaler+0x18>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800

08003c28 <LL_RCC_GetAPB1Prescaler>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800

08003c44 <LL_RCC_GetAPB2Prescaler>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <LL_RCC_GetAPB2Prescaler+0x18>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800

08003c60 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <LL_RCC_PLL_GetMainSource+0x18>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <LL_RCC_PLL_GetN+0x18>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40023800 	.word	0x40023800

08003c98 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <LL_RCC_PLL_GetP+0x18>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800

08003cb4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <LL_RCC_PLL_GetDivider+0x18>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800

08003cd0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003cd8:	f000 f820 	bl	8003d1c <RCC_GetSystemClockFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f83e 	bl	8003d68 <RCC_GetHCLKClockFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f84c 	bl	8003d94 <RCC_GetPCLK1ClockFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f858 	bl	8003dbc <RCC_GetPCLK2ClockFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	60da      	str	r2, [r3, #12]
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003d26:	f7ff ff63 	bl	8003bf0 <LL_RCC_GetSysClkSource>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d00c      	beq.n	8003d4a <RCC_GetSystemClockFreq+0x2e>
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d80f      	bhi.n	8003d54 <RCC_GetSystemClockFreq+0x38>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <RCC_GetSystemClockFreq+0x22>
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d003      	beq.n	8003d44 <RCC_GetSystemClockFreq+0x28>
 8003d3c:	e00a      	b.n	8003d54 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <RCC_GetSystemClockFreq+0x48>)
 8003d40:	607b      	str	r3, [r7, #4]
      break;
 8003d42:	e00a      	b.n	8003d5a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <RCC_GetSystemClockFreq+0x48>)
 8003d46:	607b      	str	r3, [r7, #4]
      break;
 8003d48:	e007      	b.n	8003d5a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003d4a:	2008      	movs	r0, #8
 8003d4c:	f000 f84a 	bl	8003de4 <RCC_PLL_GetFreqDomain_SYS>
 8003d50:	6078      	str	r0, [r7, #4]
      break;
 8003d52:	e002      	b.n	8003d5a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <RCC_GetSystemClockFreq+0x48>)
 8003d56:	607b      	str	r3, [r7, #4]
      break;
 8003d58:	bf00      	nop
  }

  return frequency;
 8003d5a:	687b      	ldr	r3, [r7, #4]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	00f42400 	.word	0x00f42400

08003d68 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003d70:	f7ff ff4c 	bl	8003c0c <LL_RCC_GetAHBPrescaler>
 8003d74:	4603      	mov	r3, r0
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <RCC_GetHCLKClockFreq+0x28>)
 8003d7e:	5cd3      	ldrb	r3, [r2, r3]
 8003d80:	461a      	mov	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	40d3      	lsrs	r3, r2
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08008d44 	.word	0x08008d44

08003d94 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003d9c:	f7ff ff44 	bl	8003c28 <LL_RCC_GetAPB1Prescaler>
 8003da0:	4603      	mov	r3, r0
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <RCC_GetPCLK1ClockFreq+0x24>)
 8003da6:	5cd3      	ldrb	r3, [r2, r3]
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	40d3      	lsrs	r3, r2
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	08008d54 	.word	0x08008d54

08003dbc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003dc4:	f7ff ff3e 	bl	8003c44 <LL_RCC_GetAPB2Prescaler>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	0b5b      	lsrs	r3, r3, #13
 8003dcc:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <RCC_GetPCLK2ClockFreq+0x24>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	40d3      	lsrs	r3, r2
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	08008d54 	.word	0x08008d54

08003de4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003df8:	f7ff ff32 	bl	8003c60 <LL_RCC_PLL_GetMainSource>
 8003dfc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0a:	d003      	beq.n	8003e14 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003e0c:	e005      	b.n	8003e1a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e10:	617b      	str	r3, [r7, #20]
      break;
 8003e12:	e005      	b.n	8003e20 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e16:	617b      	str	r3, [r7, #20]
      break;
 8003e18:	e002      	b.n	8003e20 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e1c:	617b      	str	r3, [r7, #20]
      break;
 8003e1e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d113      	bne.n	8003e4e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e26:	f7ff ff45 	bl	8003cb4 <LL_RCC_PLL_GetDivider>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003e32:	f7ff ff23 	bl	8003c7c <LL_RCC_PLL_GetN>
 8003e36:	4603      	mov	r3, r0
 8003e38:	fb03 f404 	mul.w	r4, r3, r4
 8003e3c:	f7ff ff2c 	bl	8003c98 <LL_RCC_PLL_GetP>
 8003e40:	4603      	mov	r3, r0
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	3301      	adds	r3, #1
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e4c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003e4e:	693b      	ldr	r3, [r7, #16]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	00f42400 	.word	0x00f42400

08003e5c <LL_TIM_SetPrescaler>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_TIM_SetAutoReload>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_TIM_SetRepetitionCounter>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_TIM_OC_SetCompareCH1>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_TIM_OC_SetCompareCH2>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_TIM_OC_SetCompareCH3>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_TIM_OC_SetCompareCH4>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	615a      	str	r2, [r3, #20]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a31      	ldr	r2, [pc, #196]	; (8004018 <LL_TIM_Init+0xd8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00f      	beq.n	8003f78 <LL_TIM_Init+0x38>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d00b      	beq.n	8003f78 <LL_TIM_Init+0x38>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a2e      	ldr	r2, [pc, #184]	; (800401c <LL_TIM_Init+0xdc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <LL_TIM_Init+0x38>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <LL_TIM_Init+0xe0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <LL_TIM_Init+0x38>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <LL_TIM_Init+0xe4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d106      	bne.n	8003f86 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <LL_TIM_Init+0xd8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01b      	beq.n	8003fc6 <LL_TIM_Init+0x86>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d017      	beq.n	8003fc6 <LL_TIM_Init+0x86>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a20      	ldr	r2, [pc, #128]	; (800401c <LL_TIM_Init+0xdc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <LL_TIM_Init+0x86>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <LL_TIM_Init+0xe0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00f      	beq.n	8003fc6 <LL_TIM_Init+0x86>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <LL_TIM_Init+0xe4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <LL_TIM_Init+0x86>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <LL_TIM_Init+0xe8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <LL_TIM_Init+0x86>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	; (800402c <LL_TIM_Init+0xec>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <LL_TIM_Init+0x86>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <LL_TIM_Init+0xf0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d106      	bne.n	8003fd4 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ff49 	bl	8003e78 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff35 	bl	8003e5c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a08      	ldr	r2, [pc, #32]	; (8004018 <LL_TIM_Init+0xd8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d105      	bne.n	8004006 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff47 	bl	8003e94 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff8a 	bl	8003f20 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40014000 	.word	0x40014000
 800402c:	40014400 	.word	0x40014400
 8004030:	40014800 	.word	0x40014800

08004034 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d027      	beq.n	800409c <LL_TIM_OC_Init+0x68>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d82a      	bhi.n	80040aa <LL_TIM_OC_Init+0x76>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d018      	beq.n	800408e <LL_TIM_OC_Init+0x5a>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004062:	d822      	bhi.n	80040aa <LL_TIM_OC_Init+0x76>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d003      	beq.n	8004072 <LL_TIM_OC_Init+0x3e>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b10      	cmp	r3, #16
 800406e:	d007      	beq.n	8004080 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004070:	e01b      	b.n	80040aa <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f81f 	bl	80040b8 <OC1Config>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]
      break;
 800407e:	e015      	b.n	80040ac <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f87e 	bl	8004184 <OC2Config>
 8004088:	4603      	mov	r3, r0
 800408a:	75fb      	strb	r3, [r7, #23]
      break;
 800408c:	e00e      	b.n	80040ac <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f8e1 	bl	8004258 <OC3Config>
 8004096:	4603      	mov	r3, r0
 8004098:	75fb      	strb	r3, [r7, #23]
      break;
 800409a:	e007      	b.n	80040ac <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f944 	bl	800432c <OC4Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	e000      	b.n	80040ac <LL_TIM_OC_Init+0x78>
      break;
 80040aa:	bf00      	nop
  }

  return result;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0201 	bic.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 0202 	bic.w	r2, r3, #2
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0201 	bic.w	r2, r3, #1
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <OC1Config+0xc8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d11e      	bne.n	8004158 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 0208 	bic.w	r2, r3, #8
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 0204 	bic.w	r2, r3, #4
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fea0 	bl	8003eb0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40010000 	.word	0x40010000

08004184 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0210 	bic.w	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0220 	bic.w	r2, r3, #32
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0210 	bic.w	r2, r3, #16
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <OC2Config+0xd0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d11f      	bne.n	800422c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	019b      	lsls	r3, r3, #6
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	019b      	lsls	r3, r3, #6
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fe44 	bl	8003ecc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40010000 	.word	0x40010000

08004258 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <OC3Config+0xd0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d11f      	bne.n	80042fe <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	029b      	lsls	r3, r3, #10
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	029b      	lsls	r3, r3, #10
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	015b      	lsls	r3, r3, #5
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff fde9 	bl	8003ee8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000

0800432c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	031b      	lsls	r3, r3, #12
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	031b      	lsls	r3, r3, #12
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <OC4Config+0xa0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d107      	bne.n	80043a4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	019b      	lsls	r3, r3, #6
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fda4 	bl	8003f04 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40010000 	.word	0x40010000

080043d0 <LL_USART_IsEnabled>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_USART_SetStopBitsLength>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	611a      	str	r2, [r3, #16]
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_USART_SetHWFlowCtrl>:
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	615a      	str	r2, [r3, #20]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_USART_SetBaudRate>:
{
 8004444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004448:	b0c0      	sub	sp, #256	; 0x100
 800444a:	af00      	add	r7, sp, #0
 800444c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004450:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004454:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004458:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	f040 810c 	bne.w	8004680 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004468:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004472:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004476:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800447a:	4622      	mov	r2, r4
 800447c:	462b      	mov	r3, r5
 800447e:	1891      	adds	r1, r2, r2
 8004480:	6639      	str	r1, [r7, #96]	; 0x60
 8004482:	415b      	adcs	r3, r3
 8004484:	667b      	str	r3, [r7, #100]	; 0x64
 8004486:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800448a:	4621      	mov	r1, r4
 800448c:	eb12 0801 	adds.w	r8, r2, r1
 8004490:	4629      	mov	r1, r5
 8004492:	eb43 0901 	adc.w	r9, r3, r1
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044aa:	4690      	mov	r8, r2
 80044ac:	4699      	mov	r9, r3
 80044ae:	4623      	mov	r3, r4
 80044b0:	eb18 0303 	adds.w	r3, r8, r3
 80044b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044b8:	462b      	mov	r3, r5
 80044ba:	eb49 0303 	adc.w	r3, r9, r3
 80044be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044c6:	2200      	movs	r2, #0
 80044c8:	469a      	mov	sl, r3
 80044ca:	4693      	mov	fp, r2
 80044cc:	eb1a 030a 	adds.w	r3, sl, sl
 80044d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d2:	eb4b 030b 	adc.w	r3, fp, fp
 80044d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044e0:	f7fb fe78 	bl	80001d4 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4b64      	ldr	r3, [pc, #400]	; (800467c <LL_USART_SetBaudRate+0x238>)
 80044ea:	fba3 2302 	umull	r2, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	b29c      	uxth	r4, r3
 80044f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004500:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004504:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	6539      	str	r1, [r7, #80]	; 0x50
 8004510:	415b      	adcs	r3, r3
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
 8004514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004518:	4641      	mov	r1, r8
 800451a:	1851      	adds	r1, r2, r1
 800451c:	64b9      	str	r1, [r7, #72]	; 0x48
 800451e:	4649      	mov	r1, r9
 8004520:	414b      	adcs	r3, r1
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004530:	4659      	mov	r1, fp
 8004532:	00cb      	lsls	r3, r1, #3
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453a:	4651      	mov	r1, sl
 800453c:	00ca      	lsls	r2, r1, #3
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4603      	mov	r3, r0
 8004544:	4642      	mov	r2, r8
 8004546:	189b      	adds	r3, r3, r2
 8004548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800454c:	464b      	mov	r3, r9
 800454e:	460a      	mov	r2, r1
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004558:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800455c:	2200      	movs	r2, #0
 800455e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004562:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004566:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800456a:	460b      	mov	r3, r1
 800456c:	18db      	adds	r3, r3, r3
 800456e:	643b      	str	r3, [r7, #64]	; 0x40
 8004570:	4613      	mov	r3, r2
 8004572:	eb42 0303 	adc.w	r3, r2, r3
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
 8004578:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800457c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004580:	f7fb fe28 	bl	80001d4 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4611      	mov	r1, r2
 800458a:	4b3c      	ldr	r3, [pc, #240]	; (800467c <LL_USART_SetBaudRate+0x238>)
 800458c:	fba3 2301 	umull	r2, r3, r3, r1
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	2264      	movs	r2, #100	; 0x64
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	1acb      	subs	r3, r1, r3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045a0:	4b36      	ldr	r3, [pc, #216]	; (800467c <LL_USART_SetBaudRate+0x238>)
 80045a2:	fba3 2302 	umull	r2, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4423      	add	r3, r4
 80045b6:	b29c      	uxth	r4, r3
 80045b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045c6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80045ca:	4642      	mov	r2, r8
 80045cc:	464b      	mov	r3, r9
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	63b9      	str	r1, [r7, #56]	; 0x38
 80045d2:	415b      	adcs	r3, r3
 80045d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045da:	4641      	mov	r1, r8
 80045dc:	1851      	adds	r1, r2, r1
 80045de:	6339      	str	r1, [r7, #48]	; 0x30
 80045e0:	4649      	mov	r1, r9
 80045e2:	414b      	adcs	r3, r1
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045f2:	4659      	mov	r1, fp
 80045f4:	00cb      	lsls	r3, r1, #3
 80045f6:	4651      	mov	r1, sl
 80045f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fc:	4651      	mov	r1, sl
 80045fe:	00ca      	lsls	r2, r1, #3
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	4603      	mov	r3, r0
 8004606:	4642      	mov	r2, r8
 8004608:	189b      	adds	r3, r3, r2
 800460a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800460e:	464b      	mov	r3, r9
 8004610:	460a      	mov	r2, r1
 8004612:	eb42 0303 	adc.w	r3, r2, r3
 8004616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800461a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004624:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004628:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800462c:	460b      	mov	r3, r1
 800462e:	18db      	adds	r3, r3, r3
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
 8004632:	4613      	mov	r3, r2
 8004634:	eb42 0303 	adc.w	r3, r2, r3
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004642:	f7fb fdc7 	bl	80001d4 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <LL_USART_SetBaudRate+0x238>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	; 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <LL_USART_SetBaudRate+0x238>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	b29b      	uxth	r3, r3
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	b29b      	uxth	r3, r3
 800466e:	4423      	add	r3, r4
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004678:	609a      	str	r2, [r3, #8]
}
 800467a:	e107      	b.n	800488c <LL_USART_SetBaudRate+0x448>
 800467c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004680:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800468a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800468e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	1891      	adds	r1, r2, r2
 8004698:	6239      	str	r1, [r7, #32]
 800469a:	415b      	adcs	r3, r3
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046a2:	4641      	mov	r1, r8
 80046a4:	1854      	adds	r4, r2, r1
 80046a6:	4649      	mov	r1, r9
 80046a8:	eb43 0501 	adc.w	r5, r3, r1
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	00eb      	lsls	r3, r5, #3
 80046b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ba:	00e2      	lsls	r2, r4, #3
 80046bc:	4614      	mov	r4, r2
 80046be:	461d      	mov	r5, r3
 80046c0:	4643      	mov	r3, r8
 80046c2:	18e3      	adds	r3, r4, r3
 80046c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046c8:	464b      	mov	r3, r9
 80046ca:	eb45 0303 	adc.w	r3, r5, r3
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80046ec:	4629      	mov	r1, r5
 80046ee:	008b      	lsls	r3, r1, #2
 80046f0:	4621      	mov	r1, r4
 80046f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f6:	4621      	mov	r1, r4
 80046f8:	008a      	lsls	r2, r1, #2
 80046fa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80046fe:	f7fb fd69 	bl	80001d4 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4b64      	ldr	r3, [pc, #400]	; (8004898 <LL_USART_SetBaudRate+0x454>)
 8004708:	fba3 2302 	umull	r2, r3, r3, r2
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	b29b      	uxth	r3, r3
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	b29c      	uxth	r4, r3
 8004714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800471e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004722:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004726:	4642      	mov	r2, r8
 8004728:	464b      	mov	r3, r9
 800472a:	1891      	adds	r1, r2, r2
 800472c:	61b9      	str	r1, [r7, #24]
 800472e:	415b      	adcs	r3, r3
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004736:	4641      	mov	r1, r8
 8004738:	1851      	adds	r1, r2, r1
 800473a:	6139      	str	r1, [r7, #16]
 800473c:	4649      	mov	r1, r9
 800473e:	414b      	adcs	r3, r1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800474e:	4659      	mov	r1, fp
 8004750:	00cb      	lsls	r3, r1, #3
 8004752:	4651      	mov	r1, sl
 8004754:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004758:	4651      	mov	r1, sl
 800475a:	00ca      	lsls	r2, r1, #3
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	4603      	mov	r3, r0
 8004762:	4642      	mov	r2, r8
 8004764:	189b      	adds	r3, r3, r2
 8004766:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800476a:	464b      	mov	r3, r9
 800476c:	460a      	mov	r2, r1
 800476e:	eb42 0303 	adc.w	r3, r2, r3
 8004772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004776:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004780:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80047a2:	f7fb fd17 	bl	80001d4 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <LL_USART_SetBaudRate+0x454>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	; 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	3332      	adds	r3, #50	; 0x32
 80047be:	4a36      	ldr	r2, [pc, #216]	; (8004898 <LL_USART_SetBaudRate+0x454>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4423      	add	r3, r4
 80047d0:	b29c      	uxth	r4, r3
 80047d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047d6:	2200      	movs	r2, #0
 80047d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	1891      	adds	r1, r2, r2
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	415b      	adcs	r3, r3
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f0:	4641      	mov	r1, r8
 80047f2:	1851      	adds	r1, r2, r1
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	4649      	mov	r1, r9
 80047f8:	414b      	adcs	r3, r1
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004808:	4659      	mov	r1, fp
 800480a:	00cb      	lsls	r3, r1, #3
 800480c:	4651      	mov	r1, sl
 800480e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004812:	4651      	mov	r1, sl
 8004814:	00ca      	lsls	r2, r1, #3
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	4603      	mov	r3, r0
 800481c:	4642      	mov	r2, r8
 800481e:	189b      	adds	r3, r3, r2
 8004820:	673b      	str	r3, [r7, #112]	; 0x70
 8004822:	464b      	mov	r3, r9
 8004824:	460a      	mov	r2, r1
 8004826:	eb42 0303 	adc.w	r3, r2, r3
 800482a:	677b      	str	r3, [r7, #116]	; 0x74
 800482c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004830:	2200      	movs	r2, #0
 8004832:	66bb      	str	r3, [r7, #104]	; 0x68
 8004834:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004842:	4649      	mov	r1, r9
 8004844:	008b      	lsls	r3, r1, #2
 8004846:	4641      	mov	r1, r8
 8004848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484c:	4641      	mov	r1, r8
 800484e:	008a      	lsls	r2, r1, #2
 8004850:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004854:	f7fb fcbe 	bl	80001d4 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <LL_USART_SetBaudRate+0x454>)
 800485e:	fba3 1302 	umull	r1, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2164      	movs	r1, #100	; 0x64
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	3332      	adds	r3, #50	; 0x32
 8004870:	4a09      	ldr	r2, [pc, #36]	; (8004898 <LL_USART_SetBaudRate+0x454>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	b29b      	uxth	r3, r3
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	b29b      	uxth	r3, r3
 8004880:	4423      	add	r3, r4
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004898:	51eb851f 	.word	0x51eb851f

0800489c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fd8e 	bl	80043d0 <LL_USART_IsEnabled>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d149      	bne.n	800494e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048c2:	f023 030c 	bic.w	r3, r3, #12
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	6851      	ldr	r1, [r2, #4]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	68d2      	ldr	r2, [r2, #12]
 80048ce:	4311      	orrs	r1, r2
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	6912      	ldr	r2, [r2, #16]
 80048d4:	4311      	orrs	r1, r2
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	6992      	ldr	r2, [r2, #24]
 80048da:	430a      	orrs	r2, r1
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fd85 	bl	80043f8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff fd92 	bl	800441e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80048fa:	f107 0308 	add.w	r3, r7, #8
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff f9e6 	bl	8003cd0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <LL_USART_Init+0xbc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d102      	bne.n	8004912 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	e00c      	b.n	800492c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a11      	ldr	r2, [pc, #68]	; (800495c <LL_USART_Init+0xc0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d102      	bne.n	8004920 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e005      	b.n	800492c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <LL_USART_Init+0xc4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800493a:	2300      	movs	r3, #0
 800493c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fd7b 	bl	8004444 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800494e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40011000 	.word	0x40011000
 800495c:	40004400 	.word	0x40004400
 8004960:	40011400 	.word	0x40011400

08004964 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004964:	b084      	sub	sp, #16
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	f107 001c 	add.w	r0, r7, #28
 8004972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	2b01      	cmp	r3, #1
 800497a:	d122      	bne.n	80049c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fbee 	bl	8006198 <USB_CoreReset>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	e01a      	b.n	80049f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fbe2 	bl	8006198 <USB_CoreReset>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
 80049ea:	e005      	b.n	80049f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10b      	bne.n	8004a16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f043 0206 	orr.w	r2, r3, #6
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a22:	b004      	add	sp, #16
 8004a24:	4770      	bx	lr
	...

08004a28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d165      	bne.n	8004b08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4a41      	ldr	r2, [pc, #260]	; (8004b44 <USB_SetTurnaroundTime+0x11c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d906      	bls.n	8004a52 <USB_SetTurnaroundTime+0x2a>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4a40      	ldr	r2, [pc, #256]	; (8004b48 <USB_SetTurnaroundTime+0x120>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d202      	bcs.n	8004a52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a4c:	230f      	movs	r3, #15
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e062      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a3c      	ldr	r2, [pc, #240]	; (8004b48 <USB_SetTurnaroundTime+0x120>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d306      	bcc.n	8004a68 <USB_SetTurnaroundTime+0x40>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <USB_SetTurnaroundTime+0x124>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d202      	bcs.n	8004a68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a62:	230e      	movs	r3, #14
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e057      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a38      	ldr	r2, [pc, #224]	; (8004b4c <USB_SetTurnaroundTime+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d306      	bcc.n	8004a7e <USB_SetTurnaroundTime+0x56>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a37      	ldr	r2, [pc, #220]	; (8004b50 <USB_SetTurnaroundTime+0x128>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d202      	bcs.n	8004a7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a78:	230d      	movs	r3, #13
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e04c      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4a33      	ldr	r2, [pc, #204]	; (8004b50 <USB_SetTurnaroundTime+0x128>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d306      	bcc.n	8004a94 <USB_SetTurnaroundTime+0x6c>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4a32      	ldr	r2, [pc, #200]	; (8004b54 <USB_SetTurnaroundTime+0x12c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d802      	bhi.n	8004a94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a8e:	230c      	movs	r3, #12
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e041      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <USB_SetTurnaroundTime+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d906      	bls.n	8004aaa <USB_SetTurnaroundTime+0x82>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4a2e      	ldr	r2, [pc, #184]	; (8004b58 <USB_SetTurnaroundTime+0x130>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d802      	bhi.n	8004aaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004aa4:	230b      	movs	r3, #11
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e036      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <USB_SetTurnaroundTime+0x130>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d906      	bls.n	8004ac0 <USB_SetTurnaroundTime+0x98>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a29      	ldr	r2, [pc, #164]	; (8004b5c <USB_SetTurnaroundTime+0x134>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d802      	bhi.n	8004ac0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aba:	230a      	movs	r3, #10
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e02b      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <USB_SetTurnaroundTime+0x134>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d906      	bls.n	8004ad6 <USB_SetTurnaroundTime+0xae>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <USB_SetTurnaroundTime+0x138>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d202      	bcs.n	8004ad6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ad0:	2309      	movs	r3, #9
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e020      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <USB_SetTurnaroundTime+0x138>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d306      	bcc.n	8004aec <USB_SetTurnaroundTime+0xc4>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <USB_SetTurnaroundTime+0x13c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d802      	bhi.n	8004aec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e015      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <USB_SetTurnaroundTime+0x13c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d906      	bls.n	8004b02 <USB_SetTurnaroundTime+0xda>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <USB_SetTurnaroundTime+0x140>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d202      	bcs.n	8004b02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004afc:	2307      	movs	r3, #7
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e00a      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b02:	2306      	movs	r3, #6
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e007      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b0e:	2309      	movs	r3, #9
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e001      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b14:	2309      	movs	r3, #9
 8004b16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	00d8acbf 	.word	0x00d8acbf
 8004b48:	00e4e1c0 	.word	0x00e4e1c0
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	01067380 	.word	0x01067380
 8004b54:	011a499f 	.word	0x011a499f
 8004b58:	01312cff 	.word	0x01312cff
 8004b5c:	014ca43f 	.word	0x014ca43f
 8004b60:	016e3600 	.word	0x016e3600
 8004b64:	01a6ab1f 	.word	0x01a6ab1f
 8004b68:	01e84800 	.word	0x01e84800

08004b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f043 0201 	orr.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d115      	bne.n	8004bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bde:	2001      	movs	r0, #1
 8004be0:	f7fd f8fc 	bl	8001ddc <HAL_Delay>
      ms++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 fa45 	bl	800607a <USB_GetMode>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d01e      	beq.n	8004c34 <USB_SetCurrentMode+0x84>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b31      	cmp	r3, #49	; 0x31
 8004bfa:	d9f0      	bls.n	8004bde <USB_SetCurrentMode+0x2e>
 8004bfc:	e01a      	b.n	8004c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d115      	bne.n	8004c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c10:	2001      	movs	r0, #1
 8004c12:	f7fd f8e3 	bl	8001ddc <HAL_Delay>
      ms++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 fa2c 	bl	800607a <USB_GetMode>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <USB_SetCurrentMode+0x84>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b31      	cmp	r3, #49	; 0x31
 8004c2c:	d9f0      	bls.n	8004c10 <USB_SetCurrentMode+0x60>
 8004c2e:	e001      	b.n	8004c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e005      	b.n	8004c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b32      	cmp	r3, #50	; 0x32
 8004c38:	d101      	bne.n	8004c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c48:	b084      	sub	sp, #16
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e009      	b.n	8004c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3340      	adds	r3, #64	; 0x40
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	2200      	movs	r2, #0
 8004c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0e      	cmp	r3, #14
 8004c80:	d9f2      	bls.n	8004c68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d11c      	bne.n	8004cc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc0:	e00b      	b.n	8004cda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	4619      	mov	r1, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	680b      	ldr	r3, [r1, #0]
 8004cf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d10c      	bne.n	8004d1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d06:	2100      	movs	r1, #0
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f965 	bl	8004fd8 <USB_SetDevSpeed>
 8004d0e:	e008      	b.n	8004d22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d10:	2101      	movs	r1, #1
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f960 	bl	8004fd8 <USB_SetDevSpeed>
 8004d18:	e003      	b.n	8004d22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d1a:	2103      	movs	r1, #3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f95b 	bl	8004fd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d22:	2110      	movs	r1, #16
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8f3 	bl	8004f10 <USB_FlushTxFifo>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f91f 	bl	8004f78 <USB_FlushRxFifo>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d56:	461a      	mov	r2, r3
 8004d58:	2300      	movs	r3, #0
 8004d5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	461a      	mov	r2, r3
 8004d64:	2300      	movs	r3, #0
 8004d66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e043      	b.n	8004df6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d84:	d118      	bne.n	8004db8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	e013      	b.n	8004dca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	461a      	mov	r2, r3
 8004db0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e008      	b.n	8004dca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	461a      	mov	r2, r3
 8004dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	3301      	adds	r3, #1
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d3b7      	bcc.n	8004d6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	e043      	b.n	8004e8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e1a:	d118      	bne.n	8004e4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e013      	b.n	8004e60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	461a      	mov	r2, r3
 8004e46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	e008      	b.n	8004e60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2300      	movs	r3, #0
 8004e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d3b7      	bcc.n	8004e04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f043 0210 	orr.w	r2, r3, #16
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <USB_DevInit+0x2c4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f043 0208 	orr.w	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d107      	bne.n	8004efc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f08:	b004      	add	sp, #16
 8004f0a:	4770      	bx	lr
 8004f0c:	803c3800 	.word	0x803c3800

08004f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <USB_FlushTxFifo+0x64>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e01b      	b.n	8004f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	daf2      	bge.n	8004f1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	019b      	lsls	r3, r3, #6
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <USB_FlushTxFifo+0x64>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e006      	b.n	8004f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d0f0      	beq.n	8004f48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	00030d40 	.word	0x00030d40

08004f78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a11      	ldr	r2, [pc, #68]	; (8004fd4 <USB_FlushRxFifo+0x5c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e018      	b.n	8004fc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	daf2      	bge.n	8004f84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <USB_FlushRxFifo+0x5c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e006      	b.n	8004fc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d0f0      	beq.n	8004fa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	00030d40 	.word	0x00030d40

08004fd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800500a:	b480      	push	{r7}
 800500c:	b087      	sub	sp, #28
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0306 	and.w	r3, r3, #6
 8005022:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
 800502e:	e00a      	b.n	8005046 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d002      	beq.n	800503c <USB_GetDevSpeed+0x32>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b06      	cmp	r3, #6
 800503a:	d102      	bne.n	8005042 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800503c:	2302      	movs	r3, #2
 800503e:	75fb      	strb	r3, [r7, #23]
 8005040:	e001      	b.n	8005046 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005042:	230f      	movs	r3, #15
 8005044:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
}
 8005048:	4618      	mov	r0, r3
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d13a      	bne.n	80050e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2101      	movs	r1, #1
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	b29b      	uxth	r3, r3
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800508e:	4313      	orrs	r3, r2
 8005090:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d155      	bne.n	8005154 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	791b      	ldrb	r3, [r3, #4]
 80050c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	059b      	lsls	r3, r3, #22
 80050ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050cc:	4313      	orrs	r3, r2
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e036      	b.n	8005154 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	2101      	movs	r1, #1
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4313      	orrs	r3, r2
 8005106:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d11a      	bne.n	8005154 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	791b      	ldrb	r3, [r3, #4]
 8005138:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800513a:	430b      	orrs	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005152:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d161      	bne.n	8005244 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005196:	d11f      	bne.n	80051d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f303 	lsl.w	r3, r1, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051f8:	4013      	ands	r3, r2
 80051fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	2101      	movs	r1, #1
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	b29b      	uxth	r3, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800521c:	4013      	ands	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	0159      	lsls	r1, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	440b      	add	r3, r1
 8005236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523a:	4619      	mov	r1, r3
 800523c:	4b35      	ldr	r3, [pc, #212]	; (8005314 <USB_DeactivateEndpoint+0x1b0>)
 800523e:	4013      	ands	r3, r2
 8005240:	600b      	str	r3, [r1, #0]
 8005242:	e060      	b.n	8005306 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525a:	d11f      	bne.n	800529c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800527a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800529a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	2101      	movs	r1, #1
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	43db      	mvns	r3, r3
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052bc:	4013      	ands	r3, r2
 80052be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	2101      	movs	r1, #1
 80052d2:	fa01 f303 	lsl.w	r3, r1, r3
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	43db      	mvns	r3, r3
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e0:	4013      	ands	r3, r2
 80052e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	0159      	lsls	r1, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	440b      	add	r3, r1
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	4619      	mov	r1, r3
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <USB_DeactivateEndpoint+0x1b4>)
 8005302:	4013      	ands	r3, r2
 8005304:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	ec337800 	.word	0xec337800
 8005318:	eff37800 	.word	0xeff37800

0800531c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	f040 815c 	bne.w	80055f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d132      	bne.n	80053ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a4:	0cdb      	lsrs	r3, r3, #19
 80053a6:	04db      	lsls	r3, r3, #19
 80053a8:	6113      	str	r3, [r2, #16]
 80053aa:	e074      	b.n	8005496 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c6:	0cdb      	lsrs	r3, r3, #19
 80053c8:	04db      	lsls	r3, r3, #19
 80053ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	440b      	add	r3, r1
 8005408:	1e59      	subs	r1, r3, #1
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005412:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005414:	4b9d      	ldr	r3, [pc, #628]	; (800568c <USB_EPStartXfer+0x370>)
 8005416:	400b      	ands	r3, r1
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	0148      	lsls	r0, r1, #5
 800541c:	69f9      	ldr	r1, [r7, #28]
 800541e:	4401      	add	r1, r0
 8005420:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005424:	4313      	orrs	r3, r2
 8005426:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	0148      	lsls	r0, r1, #5
 8005442:	69f9      	ldr	r1, [r7, #28]
 8005444:	4401      	add	r1, r0
 8005446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800544a:	4313      	orrs	r3, r2
 800544c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	791b      	ldrb	r3, [r3, #4]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d11f      	bne.n	8005496 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005470:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005474:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005494:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d14b      	bne.n	8005534 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	461a      	mov	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	791b      	ldrb	r3, [r3, #4]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d128      	bne.n	8005512 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d110      	bne.n	80054f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e00f      	b.n	8005512 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	0151      	lsls	r1, r2, #5
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	440a      	add	r2, r1
 8005508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005510:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	e133      	b.n	800579c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005552:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	791b      	ldrb	r3, [r3, #4]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d015      	beq.n	8005588 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 811b 	beq.w	800579c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	2101      	movs	r1, #1
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	69f9      	ldr	r1, [r7, #28]
 800557e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005582:	4313      	orrs	r3, r2
 8005584:	634b      	str	r3, [r1, #52]	; 0x34
 8005586:	e109      	b.n	800579c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d110      	bne.n	80055ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e00f      	b.n	80055da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6919      	ldr	r1, [r3, #16]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	b298      	uxth	r0, r3
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	4603      	mov	r3, r0
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fade 	bl	8005bb0 <USB_WritePacket>
 80055f4:	e0d2      	b.n	800579c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005610:	0cdb      	lsrs	r3, r3, #19
 8005612:	04db      	lsls	r3, r3, #19
 8005614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005630:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005634:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005638:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d126      	bne.n	8005690 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	0148      	lsls	r0, r1, #5
 800565c:	69f9      	ldr	r1, [r7, #28]
 800565e:	4401      	add	r1, r0
 8005660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005686:	6113      	str	r3, [r2, #16]
 8005688:	e03a      	b.n	8005700 <USB_EPStartXfer+0x3e4>
 800568a:	bf00      	nop
 800568c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	699a      	ldr	r2, [r3, #24]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4413      	add	r3, r2
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	8afa      	ldrh	r2, [r7, #22]
 80056ac:	fb03 f202 	mul.w	r2, r3, r2
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	8afb      	ldrh	r3, [r7, #22]
 80056c4:	04d9      	lsls	r1, r3, #19
 80056c6:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <USB_EPStartXfer+0x48c>)
 80056c8:	400b      	ands	r3, r1
 80056ca:	69b9      	ldr	r1, [r7, #24]
 80056cc:	0148      	lsls	r0, r1, #5
 80056ce:	69f9      	ldr	r1, [r7, #28]
 80056d0:	4401      	add	r1, r0
 80056d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056d6:	4313      	orrs	r3, r2
 80056d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	0148      	lsls	r0, r1, #5
 80056f4:	69f9      	ldr	r1, [r7, #28]
 80056f6:	4401      	add	r1, r0
 80056f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056fc:	4313      	orrs	r3, r2
 80056fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10d      	bne.n	8005722 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6919      	ldr	r1, [r3, #16]
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	460a      	mov	r2, r1
 8005720:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d128      	bne.n	800577c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	2b00      	cmp	r3, #0
 8005738:	d110      	bne.n	800575c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e00f      	b.n	800577c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	440a      	add	r2, r1
 8005792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800579a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	1ff80000 	.word	0x1ff80000

080057ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f040 80ce 	bne.w	800596a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d132      	bne.n	800583c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005834:	0cdb      	lsrs	r3, r3, #19
 8005836:	04db      	lsls	r3, r3, #19
 8005838:	6113      	str	r3, [r2, #16]
 800583a:	e04e      	b.n	80058da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005856:	0cdb      	lsrs	r3, r3, #19
 8005858:	04db      	lsls	r3, r3, #19
 800585a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005876:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800587a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800587e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	429a      	cmp	r2, r3
 800588a:	d903      	bls.n	8005894 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ca:	6939      	ldr	r1, [r7, #16]
 80058cc:	0148      	lsls	r0, r1, #5
 80058ce:	6979      	ldr	r1, [r7, #20]
 80058d0:	4401      	add	r1, r0
 80058d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058d6:	4313      	orrs	r3, r2
 80058d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d11e      	bne.n	800591e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e097      	b.n	8005a4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800593c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8083 	beq.w	8005a4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	6979      	ldr	r1, [r7, #20]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4313      	orrs	r3, r2
 8005966:	634b      	str	r3, [r1, #52]	; 0x34
 8005968:	e071      	b.n	8005a4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005984:	0cdb      	lsrs	r3, r3, #19
 8005986:	04db      	lsls	r3, r3, #19
 8005988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fc:	6939      	ldr	r1, [r7, #16]
 80059fe:	0148      	lsls	r0, r1, #5
 8005a00:	6979      	ldr	r1, [r7, #20]
 8005a02:	4401      	add	r1, r0
 8005a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d10d      	bne.n	8005a2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6919      	ldr	r1, [r3, #16]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d14a      	bne.n	8005b10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a92:	f040 8086 	bne.w	8005ba2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	7812      	ldrb	r2, [r2, #0]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ab8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005adc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d902      	bls.n	8005af4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
          break;
 8005af2:	e056      	b.n	8005ba2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0c:	d0e7      	beq.n	8005ade <USB_EPStopXfer+0x82>
 8005b0e:	e048      	b.n	8005ba2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b28:	d13b      	bne.n	8005ba2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d902      	bls.n	8005b88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
          break;
 8005b86:	e00c      	b.n	8005ba2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba0:	d0e7      	beq.n	8005b72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	71fb      	strb	r3, [r7, #7]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d123      	bne.n	8005c1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bd6:	88bb      	ldrh	r3, [r7, #4]
 8005bd8:	3303      	adds	r3, #3
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e018      	b.n	8005c16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	031a      	lsls	r2, r3, #12
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3301      	adds	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	3301      	adds	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3e2      	bcc.n	8005be4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3724      	adds	r7, #36	; 0x24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b08b      	sub	sp, #44	; 0x2c
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	e014      	b.n	8005c82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	3301      	adds	r3, #1
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	3301      	adds	r3, #1
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	3301      	adds	r3, #1
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	6a3a      	ldr	r2, [r7, #32]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3e6      	bcc.n	8005c58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c8a:	8bfb      	ldrh	r3, [r7, #30]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01e      	beq.n	8005cce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f107 0310 	add.w	r3, r7, #16
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	701a      	strb	r2, [r3, #0]
      i++;
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cc2:	8bfb      	ldrh	r3, [r7, #30]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cc8:	8bfb      	ldrh	r3, [r7, #30]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1ea      	bne.n	8005ca4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	372c      	adds	r7, #44	; 0x2c
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d12c      	bne.n	8005d52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	db12      	blt.n	8005d30 <USB_EPSetStall+0x54>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00f      	beq.n	8005d30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	0151      	lsls	r1, r2, #5
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	440a      	add	r2, r1
 8005d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	e02b      	b.n	8005daa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	db12      	blt.n	8005d8a <USB_EPSetStall+0xae>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00f      	beq.n	8005d8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005da8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d128      	bne.n	8005e26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	791b      	ldrb	r3, [r3, #4]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d003      	beq.n	8005e04 <USB_EPClearStall+0x4c>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	791b      	ldrb	r3, [r3, #4]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d138      	bne.n	8005e76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	e027      	b.n	8005e76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d003      	beq.n	8005e56 <USB_EPClearStall+0x9e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	791b      	ldrb	r3, [r3, #4]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d10f      	bne.n	8005e76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ea6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005eb8:	68f9      	ldr	r1, [r7, #12]
 8005eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005efe:	f023 0302 	bic.w	r3, r3, #2
 8005f02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f2c:	f023 0303 	bic.w	r3, r3, #3
 8005f30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	0c1b      	lsrs	r3, r3, #16
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	b29b      	uxth	r3, r3
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4013      	ands	r3, r2
 800600e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006010:	68bb      	ldr	r3, [r7, #8]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800601e:	b480      	push	{r7}
 8006020:	b087      	sub	sp, #28
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	b2db      	uxtb	r3, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4013      	ands	r3, r2
 800606a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800606c:	68bb      	ldr	r3, [r7, #8]
}
 800606e:	4618      	mov	r0, r3
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0301 	and.w	r3, r3, #1
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060b4:	f023 0307 	bic.w	r3, r3, #7
 80060b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	460b      	mov	r3, r1
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	333c      	adds	r3, #60	; 0x3c
 80060f2:	3304      	adds	r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4a26      	ldr	r2, [pc, #152]	; (8006194 <USB_EP0_OutStart+0xb8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d90a      	bls.n	8006116 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800610c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006110:	d101      	bne.n	8006116 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	e037      	b.n	8006186 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006144:	f043 0318 	orr.w	r3, r3, #24
 8006148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006158:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800615c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800615e:	7afb      	ldrb	r3, [r7, #11]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10f      	bne.n	8006184 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	4f54300a 	.word	0x4f54300a

08006198 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a13      	ldr	r2, [pc, #76]	; (80061fc <USB_CoreReset+0x64>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d901      	bls.n	80061b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e01b      	b.n	80061ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	daf2      	bge.n	80061a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f043 0201 	orr.w	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a09      	ldr	r2, [pc, #36]	; (80061fc <USB_CoreReset+0x64>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d901      	bls.n	80061e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e006      	b.n	80061ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d0f0      	beq.n	80061ce <USB_CoreReset+0x36>

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	00030d40 	.word	0x00030d40

08006200 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <LL_mDelay+0x48>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800620e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d00c      	beq.n	8006232 <LL_mDelay+0x32>
  {
    Delay++;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3301      	adds	r3, #1
 800621c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800621e:	e008      	b.n	8006232 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <LL_mDelay+0x48>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <LL_mDelay+0x32>
    {
      Delay--;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3b01      	subs	r3, #1
 8006230:	607b      	str	r3, [r7, #4]
  while (Delay)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f3      	bne.n	8006220 <LL_mDelay+0x20>
    }
  }
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	e000e010 	.word	0xe000e010

0800624c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006254:	4a04      	ldr	r2, [pc, #16]	; (8006268 <LL_SetSystemCoreClock+0x1c>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6013      	str	r3, [r2, #0]
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000004 	.word	0x20000004

0800626c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006278:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800627c:	f002 fc9e 	bl	8008bbc <USBD_static_malloc>
 8006280:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	32b0      	adds	r2, #176	; 0xb0
 8006292:	2100      	movs	r1, #0
 8006294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006298:	2302      	movs	r3, #2
 800629a:	e0d4      	b.n	8006446 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800629c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80062a0:	2100      	movs	r1, #0
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f002 fd00 	bl	8008ca8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32b0      	adds	r2, #176	; 0xb0
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	32b0      	adds	r2, #176	; 0xb0
 80062c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	7c1b      	ldrb	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d138      	bne.n	8006346 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062d4:	4b5e      	ldr	r3, [pc, #376]	; (8006450 <USBD_CDC_Init+0x1e4>)
 80062d6:	7819      	ldrb	r1, [r3, #0]
 80062d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062dc:	2202      	movs	r2, #2
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f002 fb49 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062e4:	4b5a      	ldr	r3, [pc, #360]	; (8006450 <USBD_CDC_Init+0x1e4>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f003 020f 	and.w	r2, r3, #15
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	3324      	adds	r3, #36	; 0x24
 80062fa:	2201      	movs	r2, #1
 80062fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062fe:	4b55      	ldr	r3, [pc, #340]	; (8006454 <USBD_CDC_Init+0x1e8>)
 8006300:	7819      	ldrb	r1, [r3, #0]
 8006302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006306:	2202      	movs	r2, #2
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f002 fb34 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800630e:	4b51      	ldr	r3, [pc, #324]	; (8006454 <USBD_CDC_Init+0x1e8>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	f003 020f 	and.w	r2, r3, #15
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006326:	2201      	movs	r2, #1
 8006328:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800632a:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <USBD_CDC_Init+0x1ec>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	3326      	adds	r3, #38	; 0x26
 8006340:	2210      	movs	r2, #16
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e035      	b.n	80063b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006346:	4b42      	ldr	r3, [pc, #264]	; (8006450 <USBD_CDC_Init+0x1e4>)
 8006348:	7819      	ldrb	r1, [r3, #0]
 800634a:	2340      	movs	r3, #64	; 0x40
 800634c:	2202      	movs	r2, #2
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f002 fb11 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006354:	4b3e      	ldr	r3, [pc, #248]	; (8006450 <USBD_CDC_Init+0x1e4>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f003 020f 	and.w	r2, r3, #15
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	3324      	adds	r3, #36	; 0x24
 800636a:	2201      	movs	r2, #1
 800636c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800636e:	4b39      	ldr	r3, [pc, #228]	; (8006454 <USBD_CDC_Init+0x1e8>)
 8006370:	7819      	ldrb	r1, [r3, #0]
 8006372:	2340      	movs	r3, #64	; 0x40
 8006374:	2202      	movs	r2, #2
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f002 fafd 	bl	8008976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800637c:	4b35      	ldr	r3, [pc, #212]	; (8006454 <USBD_CDC_Init+0x1e8>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f003 020f 	and.w	r2, r3, #15
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	440b      	add	r3, r1
 8006390:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006394:	2201      	movs	r2, #1
 8006396:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006398:	4b2f      	ldr	r3, [pc, #188]	; (8006458 <USBD_CDC_Init+0x1ec>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3326      	adds	r3, #38	; 0x26
 80063ae:	2210      	movs	r2, #16
 80063b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063b2:	4b29      	ldr	r3, [pc, #164]	; (8006458 <USBD_CDC_Init+0x1ec>)
 80063b4:	7819      	ldrb	r1, [r3, #0]
 80063b6:	2308      	movs	r3, #8
 80063b8:	2203      	movs	r2, #3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f002 fadb 	bl	8008976 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <USBD_CDC_Init+0x1ec>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f003 020f 	and.w	r2, r3, #15
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	3324      	adds	r3, #36	; 0x24
 80063d6:	2201      	movs	r2, #1
 80063d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	33b0      	adds	r3, #176	; 0xb0
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006410:	2302      	movs	r3, #2
 8006412:	e018      	b.n	8006446 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	7c1b      	ldrb	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800641c:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <USBD_CDC_Init+0x1e8>)
 800641e:	7819      	ldrb	r1, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 fb92 	bl	8008b54 <USBD_LL_PrepareReceive>
 8006430:	e008      	b.n	8006444 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006432:	4b08      	ldr	r3, [pc, #32]	; (8006454 <USBD_CDC_Init+0x1e8>)
 8006434:	7819      	ldrb	r1, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f002 fb88 	bl	8008b54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000097 	.word	0x20000097
 8006454:	20000098 	.word	0x20000098
 8006458:	20000099 	.word	0x20000099

0800645c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006468:	4b3a      	ldr	r3, [pc, #232]	; (8006554 <USBD_CDC_DeInit+0xf8>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f002 faa7 	bl	80089c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006474:	4b37      	ldr	r3, [pc, #220]	; (8006554 <USBD_CDC_DeInit+0xf8>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 020f 	and.w	r2, r3, #15
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	3324      	adds	r3, #36	; 0x24
 800648a:	2200      	movs	r2, #0
 800648c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800648e:	4b32      	ldr	r3, [pc, #200]	; (8006558 <USBD_CDC_DeInit+0xfc>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 fa94 	bl	80089c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800649a:	4b2f      	ldr	r3, [pc, #188]	; (8006558 <USBD_CDC_DeInit+0xfc>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f003 020f 	and.w	r2, r3, #15
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064b2:	2200      	movs	r2, #0
 80064b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80064b6:	4b29      	ldr	r3, [pc, #164]	; (800655c <USBD_CDC_DeInit+0x100>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f002 fa80 	bl	80089c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80064c2:	4b26      	ldr	r3, [pc, #152]	; (800655c <USBD_CDC_DeInit+0x100>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	3324      	adds	r3, #36	; 0x24
 80064d8:	2200      	movs	r2, #0
 80064da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064dc:	4b1f      	ldr	r3, [pc, #124]	; (800655c <USBD_CDC_DeInit+0x100>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 020f 	and.w	r2, r3, #15
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	3326      	adds	r3, #38	; 0x26
 80064f2:	2200      	movs	r2, #0
 80064f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	32b0      	adds	r2, #176	; 0xb0
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01f      	beq.n	8006548 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	33b0      	adds	r3, #176	; 0xb0
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	32b0      	adds	r2, #176	; 0xb0
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	4618      	mov	r0, r3
 800652c:	f002 fb54 	bl	8008bd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32b0      	adds	r2, #176	; 0xb0
 800653a:	2100      	movs	r1, #0
 800653c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000097 	.word	0x20000097
 8006558:	20000098 	.word	0x20000098
 800655c:	20000099 	.word	0x20000099

08006560 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	32b0      	adds	r2, #176	; 0xb0
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e0bf      	b.n	8006710 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006598:	2b00      	cmp	r3, #0
 800659a:	d050      	beq.n	800663e <USBD_CDC_Setup+0xde>
 800659c:	2b20      	cmp	r3, #32
 800659e:	f040 80af 	bne.w	8006700 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	88db      	ldrh	r3, [r3, #6]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d03a      	beq.n	8006620 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	b25b      	sxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da1b      	bge.n	80065ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	33b0      	adds	r3, #176	; 0xb0
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80065ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	88d2      	ldrh	r2, [r2, #6]
 80065d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	88db      	ldrh	r3, [r3, #6]
 80065d6:	2b07      	cmp	r3, #7
 80065d8:	bf28      	it	cs
 80065da:	2307      	movcs	r3, #7
 80065dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	89fa      	ldrh	r2, [r7, #14]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fd89 	bl	80080fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80065ea:	e090      	b.n	800670e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	785a      	ldrb	r2, [r3, #1]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	88db      	ldrh	r3, [r3, #6]
 80065fa:	2b3f      	cmp	r3, #63	; 0x3f
 80065fc:	d803      	bhi.n	8006606 <USBD_CDC_Setup+0xa6>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	88db      	ldrh	r3, [r3, #6]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	e000      	b.n	8006608 <USBD_CDC_Setup+0xa8>
 8006606:	2240      	movs	r2, #64	; 0x40
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800660e:	6939      	ldr	r1, [r7, #16]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006616:	461a      	mov	r2, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fd9b 	bl	8008154 <USBD_CtlPrepareRx>
      break;
 800661e:	e076      	b.n	800670e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	33b0      	adds	r3, #176	; 0xb0
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	7850      	ldrb	r0, [r2, #1]
 8006636:	2200      	movs	r2, #0
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	4798      	blx	r3
      break;
 800663c:	e067      	b.n	800670e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b0b      	cmp	r3, #11
 8006644:	d851      	bhi.n	80066ea <USBD_CDC_Setup+0x18a>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <USBD_CDC_Setup+0xec>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	0800667d 	.word	0x0800667d
 8006650:	080066f9 	.word	0x080066f9
 8006654:	080066eb 	.word	0x080066eb
 8006658:	080066eb 	.word	0x080066eb
 800665c:	080066eb 	.word	0x080066eb
 8006660:	080066eb 	.word	0x080066eb
 8006664:	080066eb 	.word	0x080066eb
 8006668:	080066eb 	.word	0x080066eb
 800666c:	080066eb 	.word	0x080066eb
 8006670:	080066eb 	.word	0x080066eb
 8006674:	080066a7 	.word	0x080066a7
 8006678:	080066d1 	.word	0x080066d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b03      	cmp	r3, #3
 8006686:	d107      	bne.n	8006698 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006688:	f107 030a 	add.w	r3, r7, #10
 800668c:	2202      	movs	r2, #2
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 fd33 	bl	80080fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006696:	e032      	b.n	80066fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fcbd 	bl	800801a <USBD_CtlError>
            ret = USBD_FAIL;
 80066a0:	2303      	movs	r3, #3
 80066a2:	75fb      	strb	r3, [r7, #23]
          break;
 80066a4:	e02b      	b.n	80066fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d107      	bne.n	80066c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066b2:	f107 030d 	add.w	r3, r7, #13
 80066b6:	2201      	movs	r2, #1
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fd1e 	bl	80080fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066c0:	e01d      	b.n	80066fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fca8 	bl	800801a <USBD_CtlError>
            ret = USBD_FAIL;
 80066ca:	2303      	movs	r3, #3
 80066cc:	75fb      	strb	r3, [r7, #23]
          break;
 80066ce:	e016      	b.n	80066fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d00f      	beq.n	80066fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fc9b 	bl	800801a <USBD_CtlError>
            ret = USBD_FAIL;
 80066e4:	2303      	movs	r3, #3
 80066e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066e8:	e008      	b.n	80066fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fc94 	bl	800801a <USBD_CtlError>
          ret = USBD_FAIL;
 80066f2:	2303      	movs	r3, #3
 80066f4:	75fb      	strb	r3, [r7, #23]
          break;
 80066f6:	e002      	b.n	80066fe <USBD_CDC_Setup+0x19e>
          break;
 80066f8:	bf00      	nop
 80066fa:	e008      	b.n	800670e <USBD_CDC_Setup+0x1ae>
          break;
 80066fc:	bf00      	nop
      }
      break;
 80066fe:	e006      	b.n	800670e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 fc89 	bl	800801a <USBD_CtlError>
      ret = USBD_FAIL;
 8006708:	2303      	movs	r3, #3
 800670a:	75fb      	strb	r3, [r7, #23]
      break;
 800670c:	bf00      	nop
  }

  return (uint8_t)ret;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800672a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	32b0      	adds	r2, #176	; 0xb0
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800673e:	2303      	movs	r3, #3
 8006740:	e065      	b.n	800680e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	32b0      	adds	r2, #176	; 0xb0
 800674c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006750:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	f003 020f 	and.w	r2, r3, #15
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	3318      	adds	r3, #24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d02f      	beq.n	80067cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	f003 020f 	and.w	r2, r3, #15
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	3318      	adds	r3, #24
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	f003 010f 	and.w	r1, r3, #15
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	460b      	mov	r3, r1
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	440b      	add	r3, r1
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4403      	add	r3, r0
 8006794:	3348      	adds	r3, #72	; 0x48
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	fbb2 f1f3 	udiv	r1, r2, r3
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d112      	bne.n	80067cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	f003 020f 	and.w	r2, r3, #15
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3318      	adds	r3, #24
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067be:	78f9      	ldrb	r1, [r7, #3]
 80067c0:	2300      	movs	r3, #0
 80067c2:	2200      	movs	r2, #0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f002 f9a4 	bl	8008b12 <USBD_LL_Transmit>
 80067ca:	e01f      	b.n	800680c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	33b0      	adds	r3, #176	; 0xb0
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d010      	beq.n	800680c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	33b0      	adds	r3, #176	; 0xb0
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	32b0      	adds	r2, #176	; 0xb0
 800682c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006830:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	32b0      	adds	r2, #176	; 0xb0
 800683c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	e01a      	b.n	800687e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f002 f9a2 	bl	8008b96 <USBD_LL_GetRxDataSize>
 8006852:	4602      	mov	r2, r0
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	33b0      	adds	r3, #176	; 0xb0
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006878:	4611      	mov	r1, r2
 800687a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	32b0      	adds	r2, #176	; 0xb0
 8006898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e025      	b.n	80068f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	33b0      	adds	r3, #176	; 0xb0
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01a      	beq.n	80068f2 <USBD_CDC_EP0_RxReady+0x6c>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068c2:	2bff      	cmp	r3, #255	; 0xff
 80068c4:	d015      	beq.n	80068f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	33b0      	adds	r3, #176	; 0xb0
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80068de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068e6:	b292      	uxth	r2, r2
 80068e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	22ff      	movs	r2, #255	; 0xff
 80068ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006904:	2182      	movs	r1, #130	; 0x82
 8006906:	4818      	ldr	r0, [pc, #96]	; (8006968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006908:	f000 fd4f 	bl	80073aa <USBD_GetEpDesc>
 800690c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800690e:	2101      	movs	r1, #1
 8006910:	4815      	ldr	r0, [pc, #84]	; (8006968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006912:	f000 fd4a 	bl	80073aa <USBD_GetEpDesc>
 8006916:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006918:	2181      	movs	r1, #129	; 0x81
 800691a:	4813      	ldr	r0, [pc, #76]	; (8006968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800691c:	f000 fd45 	bl	80073aa <USBD_GetEpDesc>
 8006920:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2210      	movs	r2, #16
 800692c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2200      	movs	r2, #0
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	711a      	strb	r2, [r3, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d006      	beq.n	8006956 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006950:	711a      	strb	r2, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2243      	movs	r2, #67	; 0x43
 800695a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000054 	.word	0x20000054

0800696c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006974:	2182      	movs	r1, #130	; 0x82
 8006976:	4818      	ldr	r0, [pc, #96]	; (80069d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006978:	f000 fd17 	bl	80073aa <USBD_GetEpDesc>
 800697c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800697e:	2101      	movs	r1, #1
 8006980:	4815      	ldr	r0, [pc, #84]	; (80069d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006982:	f000 fd12 	bl	80073aa <USBD_GetEpDesc>
 8006986:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006988:	2181      	movs	r1, #129	; 0x81
 800698a:	4813      	ldr	r0, [pc, #76]	; (80069d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800698c:	f000 fd0d 	bl	80073aa <USBD_GetEpDesc>
 8006990:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2210      	movs	r2, #16
 800699c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2200      	movs	r2, #0
 80069a8:	711a      	strb	r2, [r3, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f042 0202 	orr.w	r2, r2, #2
 80069b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	711a      	strb	r2, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f042 0202 	orr.w	r2, r2, #2
 80069c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2243      	movs	r2, #67	; 0x43
 80069ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000054 	.word	0x20000054

080069dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069e4:	2182      	movs	r1, #130	; 0x82
 80069e6:	4818      	ldr	r0, [pc, #96]	; (8006a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069e8:	f000 fcdf 	bl	80073aa <USBD_GetEpDesc>
 80069ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069ee:	2101      	movs	r1, #1
 80069f0:	4815      	ldr	r0, [pc, #84]	; (8006a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069f2:	f000 fcda 	bl	80073aa <USBD_GetEpDesc>
 80069f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069f8:	2181      	movs	r1, #129	; 0x81
 80069fa:	4813      	ldr	r0, [pc, #76]	; (8006a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069fc:	f000 fcd5 	bl	80073aa <USBD_GetEpDesc>
 8006a00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a1c:	711a      	strb	r2, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d006      	beq.n	8006a36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a30:	711a      	strb	r2, [r3, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2243      	movs	r2, #67	; 0x43
 8006a3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000054 	.word	0x20000054

08006a4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	220a      	movs	r2, #10
 8006a58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a5a:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20000010 	.word	0x20000010

08006a6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e009      	b.n	8006a94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	33b0      	adds	r3, #176	; 0xb0
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	32b0      	adds	r2, #176	; 0xb0
 8006ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e008      	b.n	8006ad8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	32b0      	adds	r2, #176	; 0xb0
 8006af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e004      	b.n	8006b12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	32b0      	adds	r2, #176	; 0xb0
 8006b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	32b0      	adds	r2, #176	; 0xb0
 8006b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e025      	b.n	8006b9e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d11f      	bne.n	8006b9c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <USBD_CDC_TransmitPacket+0x88>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 020f 	and.w	r2, r3, #15
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4403      	add	r3, r0
 8006b7e:	3318      	adds	r3, #24
 8006b80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <USBD_CDC_TransmitPacket+0x88>)
 8006b84:	7819      	ldrb	r1, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 ffbd 	bl	8008b12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000097 	.word	0x20000097

08006bac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	32b0      	adds	r2, #176	; 0xb0
 8006bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	32b0      	adds	r2, #176	; 0xb0
 8006bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e018      	b.n	8006c0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7c1b      	ldrb	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006be2:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <USBD_CDC_ReceivePacket+0x68>)
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 ffaf 	bl	8008b54 <USBD_LL_PrepareReceive>
 8006bf6:	e008      	b.n	8006c0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <USBD_CDC_ReceivePacket+0x68>)
 8006bfa:	7819      	ldrb	r1, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c02:	2340      	movs	r3, #64	; 0x40
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 ffa5 	bl	8008b54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000098 	.word	0x20000098

08006c18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e01f      	b.n	8006c70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	79fa      	ldrb	r2, [r7, #7]
 8006c62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f001 fe1f 	bl	80088a8 <USBD_LL_Init>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e025      	b.n	8006cdc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32ae      	adds	r2, #174	; 0xae
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00f      	beq.n	8006ccc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	32ae      	adds	r2, #174	; 0xae
 8006cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	f107 020e 	add.w	r2, r7, #14
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fe27 	bl	8008940 <USBD_LL_Start>
 8006cf2:	4603      	mov	r3, r0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d009      	beq.n	8006d40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	4611      	mov	r1, r2
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	4611      	mov	r1, r2
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d70:	2303      	movs	r3, #3
 8006d72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 f908 	bl	8007fa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006da4:	461a      	mov	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d01a      	beq.n	8006df0 <USBD_LL_SetupStage+0x72>
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d822      	bhi.n	8006e04 <USBD_LL_SetupStage+0x86>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <USBD_LL_SetupStage+0x4a>
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d00a      	beq.n	8006ddc <USBD_LL_SetupStage+0x5e>
 8006dc6:	e01d      	b.n	8006e04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fb5f 	bl	8007494 <USBD_StdDevReq>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dda:	e020      	b.n	8006e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fbc7 	bl	8007578 <USBD_StdItfReq>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
      break;
 8006dee:	e016      	b.n	8006e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc29 	bl	8007650 <USBD_StdEPReq>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
      break;
 8006e02:	e00c      	b.n	8006e1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 fdf4 	bl	8008a00 <USBD_LL_StallEP>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1c:	bf00      	nop
  }

  return ret;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	460b      	mov	r3, r1
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d16e      	bne.n	8006f1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	f040 8098 	bne.w	8006f84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d913      	bls.n	8006e88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bf28      	it	cs
 8006e7a:	4613      	movcs	r3, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f001 f984 	bl	800818e <USBD_CtlContinueRx>
 8006e86:	e07d      	b.n	8006f84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e8e:	f003 031f 	and.w	r3, r3, #31
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d014      	beq.n	8006ec0 <USBD_LL_DataOutStage+0x98>
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d81d      	bhi.n	8006ed6 <USBD_LL_DataOutStage+0xae>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <USBD_LL_DataOutStage+0x7c>
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d003      	beq.n	8006eaa <USBD_LL_DataOutStage+0x82>
 8006ea2:	e018      	b.n	8006ed6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ea8:	e018      	b.n	8006edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fa5e 	bl	8007376 <USBD_CoreFindIF>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75bb      	strb	r3, [r7, #22]
            break;
 8006ebe:	e00d      	b.n	8006edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fa60 	bl	8007390 <USBD_CoreFindEP>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ed4:	e002      	b.n	8006edc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8006eda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006edc:	7dbb      	ldrb	r3, [r7, #22]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d119      	bne.n	8006f16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d113      	bne.n	8006f16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006eee:	7dba      	ldrb	r2, [r7, #22]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	32ae      	adds	r2, #174	; 0xae
 8006ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006efe:	7dba      	ldrb	r2, [r7, #22]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f06:	7dba      	ldrb	r2, [r7, #22]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	32ae      	adds	r2, #174	; 0xae
 8006f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f001 f94a 	bl	80081b0 <USBD_CtlSendStatus>
 8006f1c:	e032      	b.n	8006f84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
 8006f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	4619      	mov	r1, r3
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fa31 	bl	8007390 <USBD_CoreFindEP>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f32:	7dbb      	ldrb	r3, [r7, #22]
 8006f34:	2bff      	cmp	r3, #255	; 0xff
 8006f36:	d025      	beq.n	8006f84 <USBD_LL_DataOutStage+0x15c>
 8006f38:	7dbb      	ldrb	r3, [r7, #22]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d122      	bne.n	8006f84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d117      	bne.n	8006f7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f4a:	7dba      	ldrb	r2, [r7, #22]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	32ae      	adds	r2, #174	; 0xae
 8006f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00f      	beq.n	8006f7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f5a:	7dba      	ldrb	r2, [r7, #22]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f62:	7dba      	ldrb	r2, [r7, #22]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	32ae      	adds	r2, #174	; 0xae
 8006f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	7afa      	ldrb	r2, [r7, #11]
 8006f70:	4611      	mov	r1, r2
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	4798      	blx	r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	e000      	b.n	8006f86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	460b      	mov	r3, r1
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f9c:	7afb      	ldrb	r3, [r7, #11]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d16f      	bne.n	8007082 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3314      	adds	r3, #20
 8006fa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d15a      	bne.n	8007068 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d914      	bls.n	8006fe8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 f8ac 	bl	8008132 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f001 fdb7 	bl	8008b54 <USBD_LL_PrepareReceive>
 8006fe6:	e03f      	b.n	8007068 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d11c      	bne.n	800702e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d316      	bcc.n	800702e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800700a:	429a      	cmp	r2, r3
 800700c:	d20f      	bcs.n	800702e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800700e:	2200      	movs	r2, #0
 8007010:	2100      	movs	r1, #0
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f001 f88d 	bl	8008132 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007020:	2300      	movs	r3, #0
 8007022:	2200      	movs	r2, #0
 8007024:	2100      	movs	r1, #0
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f001 fd94 	bl	8008b54 <USBD_LL_PrepareReceive>
 800702c:	e01c      	b.n	8007068 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b03      	cmp	r3, #3
 8007038:	d10f      	bne.n	800705a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800705a:	2180      	movs	r1, #128	; 0x80
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f001 fccf 	bl	8008a00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f001 f8b7 	bl	80081d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d03a      	beq.n	80070e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fe42 	bl	8006cfc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007080:	e032      	b.n	80070e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007088:	b2db      	uxtb	r3, r3
 800708a:	4619      	mov	r1, r3
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f97f 	bl	8007390 <USBD_CoreFindEP>
 8007092:	4603      	mov	r3, r0
 8007094:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2bff      	cmp	r3, #255	; 0xff
 800709a:	d025      	beq.n	80070e8 <USBD_LL_DataInStage+0x15a>
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d122      	bne.n	80070e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d11c      	bne.n	80070e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070ae:	7dfa      	ldrb	r2, [r7, #23]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	32ae      	adds	r2, #174	; 0xae
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d014      	beq.n	80070e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070be:	7dfa      	ldrb	r2, [r7, #23]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070c6:	7dfa      	ldrb	r2, [r7, #23]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	32ae      	adds	r2, #174	; 0xae
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	7afa      	ldrb	r2, [r7, #11]
 80070d4:	4611      	mov	r1, r2
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070de:	7dbb      	ldrb	r3, [r7, #22]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80070e4:	7dbb      	ldrb	r3, [r7, #22]
 80070e6:	e000      	b.n	80070ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d014      	beq.n	8007158 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00e      	beq.n	8007158 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6852      	ldr	r2, [r2, #4]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	4611      	mov	r1, r2
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007158:	2340      	movs	r3, #64	; 0x40
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fc09 	bl	8008976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2240      	movs	r2, #64	; 0x40
 8007170:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	2200      	movs	r2, #0
 8007178:	2180      	movs	r1, #128	; 0x80
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fbfb 	bl	8008976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2240      	movs	r2, #64	; 0x40
 800718a:	621a      	str	r2, [r3, #32]

  return ret;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2204      	movs	r2, #4
 80071d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d106      	bne.n	8007204 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b03      	cmp	r3, #3
 8007224:	d110      	bne.n	8007248 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	32ae      	adds	r2, #174	; 0xae
 8007268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	e01c      	b.n	80072ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d115      	bne.n	80072ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32ae      	adds	r2, #174	; 0xae
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	32ae      	adds	r2, #174	; 0xae
 800729e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4611      	mov	r1, r2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	32ae      	adds	r2, #174	; 0xae
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e01c      	b.n	8007312 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d115      	bne.n	8007310 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32ae      	adds	r2, #174	; 0xae
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32ae      	adds	r2, #174	; 0xae
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	4611      	mov	r1, r2
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00e      	beq.n	800736c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6852      	ldr	r2, [r2, #4]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	4611      	mov	r1, r2
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007382:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800739c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b086      	sub	sp, #24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	885b      	ldrh	r3, [r3, #2]
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d920      	bls.n	8007414 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073da:	e013      	b.n	8007404 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073dc:	f107 030a 	add.w	r3, r7, #10
 80073e0:	4619      	mov	r1, r3
 80073e2:	6978      	ldr	r0, [r7, #20]
 80073e4:	f000 f81b 	bl	800741e <USBD_GetNextDesc>
 80073e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b05      	cmp	r3, #5
 80073f0:	d108      	bne.n	8007404 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	789b      	ldrb	r3, [r3, #2]
 80073fa:	78fa      	ldrb	r2, [r7, #3]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d008      	beq.n	8007412 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007400:	2300      	movs	r3, #0
 8007402:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	885b      	ldrh	r3, [r3, #2]
 8007408:	b29a      	uxth	r2, r3
 800740a:	897b      	ldrh	r3, [r7, #10]
 800740c:	429a      	cmp	r2, r3
 800740e:	d8e5      	bhi.n	80073dc <USBD_GetEpDesc+0x32>
 8007410:	e000      	b.n	8007414 <USBD_GetEpDesc+0x6a>
          break;
 8007412:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007414:	693b      	ldr	r3, [r7, #16]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	4413      	add	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4413      	add	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	3301      	adds	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007476:	8a3b      	ldrh	r3, [r7, #16]
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	b21a      	sxth	r2, r3
 800747c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007480:	4313      	orrs	r3, r2
 8007482:	b21b      	sxth	r3, r3
 8007484:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007486:	89fb      	ldrh	r3, [r7, #14]
}
 8007488:	4618      	mov	r0, r3
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074aa:	2b40      	cmp	r3, #64	; 0x40
 80074ac:	d005      	beq.n	80074ba <USBD_StdDevReq+0x26>
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d857      	bhi.n	8007562 <USBD_StdDevReq+0xce>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00f      	beq.n	80074d6 <USBD_StdDevReq+0x42>
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d153      	bne.n	8007562 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	32ae      	adds	r2, #174	; 0xae
 80074c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	4798      	blx	r3
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	e04a      	b.n	800756c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b09      	cmp	r3, #9
 80074dc:	d83b      	bhi.n	8007556 <USBD_StdDevReq+0xc2>
 80074de:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <USBD_StdDevReq+0x50>)
 80074e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e4:	08007539 	.word	0x08007539
 80074e8:	0800754d 	.word	0x0800754d
 80074ec:	08007557 	.word	0x08007557
 80074f0:	08007543 	.word	0x08007543
 80074f4:	08007557 	.word	0x08007557
 80074f8:	08007517 	.word	0x08007517
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	08007557 	.word	0x08007557
 8007504:	0800752f 	.word	0x0800752f
 8007508:	08007521 	.word	0x08007521
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa3c 	bl	800798c <USBD_GetDescriptor>
          break;
 8007514:	e024      	b.n	8007560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fba1 	bl	8007c60 <USBD_SetAddress>
          break;
 800751e:	e01f      	b.n	8007560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fbe0 	bl	8007ce8 <USBD_SetConfig>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
          break;
 800752c:	e018      	b.n	8007560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc83 	bl	8007e3c <USBD_GetConfig>
          break;
 8007536:	e013      	b.n	8007560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fcb4 	bl	8007ea8 <USBD_GetStatus>
          break;
 8007540:	e00e      	b.n	8007560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fce3 	bl	8007f10 <USBD_SetFeature>
          break;
 800754a:	e009      	b.n	8007560 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fd07 	bl	8007f62 <USBD_ClrFeature>
          break;
 8007554:	e004      	b.n	8007560 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fd5e 	bl	800801a <USBD_CtlError>
          break;
 800755e:	bf00      	nop
      }
      break;
 8007560:	e004      	b.n	800756c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fd58 	bl	800801a <USBD_CtlError>
      break;
 800756a:	bf00      	nop
  }

  return ret;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop

08007578 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800758e:	2b40      	cmp	r3, #64	; 0x40
 8007590:	d005      	beq.n	800759e <USBD_StdItfReq+0x26>
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d852      	bhi.n	800763c <USBD_StdItfReq+0xc4>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <USBD_StdItfReq+0x26>
 800759a:	2b20      	cmp	r3, #32
 800759c:	d14e      	bne.n	800763c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d840      	bhi.n	800762e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	889b      	ldrh	r3, [r3, #4]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d836      	bhi.n	8007624 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	889b      	ldrh	r3, [r3, #4]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fed9 	bl	8007376 <USBD_CoreFindIF>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2bff      	cmp	r3, #255	; 0xff
 80075cc:	d01d      	beq.n	800760a <USBD_StdItfReq+0x92>
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d11a      	bne.n	800760a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075d4:	7bba      	ldrb	r2, [r7, #14]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	32ae      	adds	r2, #174	; 0xae
 80075da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00f      	beq.n	8007604 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80075e4:	7bba      	ldrb	r2, [r7, #14]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075ec:	7bba      	ldrb	r2, [r7, #14]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32ae      	adds	r2, #174	; 0xae
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007602:	e004      	b.n	800760e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007604:	2303      	movs	r3, #3
 8007606:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007608:	e001      	b.n	800760e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800760a:	2303      	movs	r3, #3
 800760c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	88db      	ldrh	r3, [r3, #6]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d110      	bne.n	8007638 <USBD_StdItfReq+0xc0>
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10d      	bne.n	8007638 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fdc7 	bl	80081b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007622:	e009      	b.n	8007638 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fcf7 	bl	800801a <USBD_CtlError>
          break;
 800762c:	e004      	b.n	8007638 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fcf2 	bl	800801a <USBD_CtlError>
          break;
 8007636:	e000      	b.n	800763a <USBD_StdItfReq+0xc2>
          break;
 8007638:	bf00      	nop
      }
      break;
 800763a:	e004      	b.n	8007646 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fceb 	bl	800801a <USBD_CtlError>
      break;
 8007644:	bf00      	nop
  }

  return ret;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	889b      	ldrh	r3, [r3, #4]
 8007662:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766c:	2b40      	cmp	r3, #64	; 0x40
 800766e:	d007      	beq.n	8007680 <USBD_StdEPReq+0x30>
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	f200 817f 	bhi.w	8007974 <USBD_StdEPReq+0x324>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d02a      	beq.n	80076d0 <USBD_StdEPReq+0x80>
 800767a:	2b20      	cmp	r3, #32
 800767c:	f040 817a 	bne.w	8007974 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fe83 	bl	8007390 <USBD_CoreFindEP>
 800768a:	4603      	mov	r3, r0
 800768c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800768e:	7b7b      	ldrb	r3, [r7, #13]
 8007690:	2bff      	cmp	r3, #255	; 0xff
 8007692:	f000 8174 	beq.w	800797e <USBD_StdEPReq+0x32e>
 8007696:	7b7b      	ldrb	r3, [r7, #13]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f040 8170 	bne.w	800797e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800769e:	7b7a      	ldrb	r2, [r7, #13]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076a6:	7b7a      	ldrb	r2, [r7, #13]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	32ae      	adds	r2, #174	; 0xae
 80076ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 8163 	beq.w	800797e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076b8:	7b7a      	ldrb	r2, [r7, #13]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	32ae      	adds	r2, #174	; 0xae
 80076be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ce:	e156      	b.n	800797e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d008      	beq.n	80076ea <USBD_StdEPReq+0x9a>
 80076d8:	2b03      	cmp	r3, #3
 80076da:	f300 8145 	bgt.w	8007968 <USBD_StdEPReq+0x318>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 809b 	beq.w	800781a <USBD_StdEPReq+0x1ca>
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d03c      	beq.n	8007762 <USBD_StdEPReq+0x112>
 80076e8:	e13e      	b.n	8007968 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d002      	beq.n	80076fc <USBD_StdEPReq+0xac>
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d016      	beq.n	8007728 <USBD_StdEPReq+0xd8>
 80076fa:	e02c      	b.n	8007756 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <USBD_StdEPReq+0xce>
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b80      	cmp	r3, #128	; 0x80
 8007706:	d00a      	beq.n	800771e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f977 	bl	8008a00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007712:	2180      	movs	r1, #128	; 0x80
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f973 	bl	8008a00 <USBD_LL_StallEP>
 800771a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800771c:	e020      	b.n	8007760 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc7a 	bl	800801a <USBD_CtlError>
              break;
 8007726:	e01b      	b.n	8007760 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10e      	bne.n	800774e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <USBD_StdEPReq+0xfe>
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	2b80      	cmp	r3, #128	; 0x80
 800773a:	d008      	beq.n	800774e <USBD_StdEPReq+0xfe>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	88db      	ldrh	r3, [r3, #6]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 f959 	bl	8008a00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fd2e 	bl	80081b0 <USBD_CtlSendStatus>

              break;
 8007754:	e004      	b.n	8007760 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc5e 	bl	800801a <USBD_CtlError>
              break;
 800775e:	bf00      	nop
          }
          break;
 8007760:	e107      	b.n	8007972 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d002      	beq.n	8007774 <USBD_StdEPReq+0x124>
 800776e:	2b03      	cmp	r3, #3
 8007770:	d016      	beq.n	80077a0 <USBD_StdEPReq+0x150>
 8007772:	e04b      	b.n	800780c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00d      	beq.n	8007796 <USBD_StdEPReq+0x146>
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d00a      	beq.n	8007796 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 f93b 	bl	8008a00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800778a:	2180      	movs	r1, #128	; 0x80
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 f937 	bl	8008a00 <USBD_LL_StallEP>
 8007792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007794:	e040      	b.n	8007818 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc3e 	bl	800801a <USBD_CtlError>
              break;
 800779e:	e03b      	b.n	8007818 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	885b      	ldrh	r3, [r3, #2]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d136      	bne.n	8007816 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 f941 	bl	8008a3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fcf7 	bl	80081b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fde2 	bl	8007390 <USBD_CoreFindEP>
 80077cc:	4603      	mov	r3, r0
 80077ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077d0:	7b7b      	ldrb	r3, [r7, #13]
 80077d2:	2bff      	cmp	r3, #255	; 0xff
 80077d4:	d01f      	beq.n	8007816 <USBD_StdEPReq+0x1c6>
 80077d6:	7b7b      	ldrb	r3, [r7, #13]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11c      	bne.n	8007816 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077dc:	7b7a      	ldrb	r2, [r7, #13]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80077e4:	7b7a      	ldrb	r2, [r7, #13]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32ae      	adds	r2, #174	; 0xae
 80077ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d010      	beq.n	8007816 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077f4:	7b7a      	ldrb	r2, [r7, #13]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32ae      	adds	r2, #174	; 0xae
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800780a:	e004      	b.n	8007816 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fc03 	bl	800801a <USBD_CtlError>
              break;
 8007814:	e000      	b.n	8007818 <USBD_StdEPReq+0x1c8>
              break;
 8007816:	bf00      	nop
          }
          break;
 8007818:	e0ab      	b.n	8007972 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d002      	beq.n	800782c <USBD_StdEPReq+0x1dc>
 8007826:	2b03      	cmp	r3, #3
 8007828:	d032      	beq.n	8007890 <USBD_StdEPReq+0x240>
 800782a:	e097      	b.n	800795c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <USBD_StdEPReq+0x1f2>
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b80      	cmp	r3, #128	; 0x80
 8007836:	d004      	beq.n	8007842 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fbed 	bl	800801a <USBD_CtlError>
                break;
 8007840:	e091      	b.n	8007966 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	da0b      	bge.n	8007862 <USBD_StdEPReq+0x212>
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	3310      	adds	r3, #16
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	3304      	adds	r3, #4
 8007860:	e00b      	b.n	800787a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	4413      	add	r3, r2
 8007878:	3304      	adds	r3, #4
 800787a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2202      	movs	r2, #2
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fc37 	bl	80080fc <USBD_CtlSendData>
              break;
 800788e:	e06a      	b.n	8007966 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	da11      	bge.n	80078bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 020f 	and.w	r2, r3, #15
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	440b      	add	r3, r1
 80078aa:	3324      	adds	r3, #36	; 0x24
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d117      	bne.n	80078e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fbb0 	bl	800801a <USBD_CtlError>
                  break;
 80078ba:	e054      	b.n	8007966 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	f003 020f 	and.w	r2, r3, #15
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d104      	bne.n	80078e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fb9d 	bl	800801a <USBD_CtlError>
                  break;
 80078e0:	e041      	b.n	8007966 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	da0b      	bge.n	8007902 <USBD_StdEPReq+0x2b2>
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	3310      	adds	r3, #16
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4413      	add	r3, r2
 80078fe:	3304      	adds	r3, #4
 8007900:	e00b      	b.n	800791a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4413      	add	r3, r2
 8007918:	3304      	adds	r3, #4
 800791a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <USBD_StdEPReq+0x2d8>
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b80      	cmp	r3, #128	; 0x80
 8007926:	d103      	bne.n	8007930 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e00e      	b.n	800794e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f8a1 	bl	8008a7c <USBD_LL_IsStallEP>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2201      	movs	r2, #1
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	e002      	b.n	800794e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2202      	movs	r2, #2
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fbd1 	bl	80080fc <USBD_CtlSendData>
              break;
 800795a:	e004      	b.n	8007966 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fb5b 	bl	800801a <USBD_CtlError>
              break;
 8007964:	bf00      	nop
          }
          break;
 8007966:	e004      	b.n	8007972 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fb55 	bl	800801a <USBD_CtlError>
          break;
 8007970:	bf00      	nop
      }
      break;
 8007972:	e005      	b.n	8007980 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb4f 	bl	800801a <USBD_CtlError>
      break;
 800797c:	e000      	b.n	8007980 <USBD_StdEPReq+0x330>
      break;
 800797e:	bf00      	nop
  }

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	2b06      	cmp	r3, #6
 80079ae:	f200 8128 	bhi.w	8007c02 <USBD_GetDescriptor+0x276>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <USBD_GetDescriptor+0x2c>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079d5 	.word	0x080079d5
 80079bc:	080079ed 	.word	0x080079ed
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007c03 	.word	0x08007c03
 80079c8:	08007c03 	.word	0x08007c03
 80079cc:	08007ba3 	.word	0x08007ba3
 80079d0:	08007bcf 	.word	0x08007bcf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7c12      	ldrb	r2, [r2, #16]
 80079e0:	f107 0108 	add.w	r1, r7, #8
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	60f8      	str	r0, [r7, #12]
      break;
 80079ea:	e112      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7c1b      	ldrb	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10d      	bne.n	8007a10 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	f107 0208 	add.w	r2, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a0e:	e100      	b.n	8007c12 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	f107 0208 	add.w	r2, r7, #8
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4798      	blx	r3
 8007a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	2202      	movs	r2, #2
 8007a28:	701a      	strb	r2, [r3, #0]
      break;
 8007a2a:	e0f2      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	885b      	ldrh	r3, [r3, #2]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	f200 80ac 	bhi.w	8007b90 <USBD_GetDescriptor+0x204>
 8007a38:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <USBD_GetDescriptor+0xb4>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a59 	.word	0x08007a59
 8007a44:	08007a8d 	.word	0x08007a8d
 8007a48:	08007ac1 	.word	0x08007ac1
 8007a4c:	08007af5 	.word	0x08007af5
 8007a50:	08007b29 	.word	0x08007b29
 8007a54:	08007b5d 	.word	0x08007b5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	7c12      	ldrb	r2, [r2, #16]
 8007a70:	f107 0108 	add.w	r1, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7a:	e091      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 facb 	bl	800801a <USBD_CtlError>
            err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8a:	e089      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e077      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fab1 	bl	800801a <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e06f      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae2:	e05d      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa97 	bl	800801a <USBD_CtlError>
            err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
          break;
 8007af2:	e055      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e043      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa7d 	bl	800801a <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e03b      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e029      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa63 	bl	800801a <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e021      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e00f      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa49 	bl	800801a <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e007      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa41 	bl	800801a <USBD_CtlError>
          err++;
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b9e:	bf00      	nop
      }
      break;
 8007ba0:	e037      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7c1b      	ldrb	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	f107 0208 	add.w	r2, r7, #8
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	4798      	blx	r3
 8007bba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bbc:	e029      	b.n	8007c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fa2a 	bl	800801a <USBD_CtlError>
        err++;
 8007bc6:	7afb      	ldrb	r3, [r7, #11]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	72fb      	strb	r3, [r7, #11]
      break;
 8007bcc:	e021      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7c1b      	ldrb	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	f107 0208 	add.w	r2, r7, #8
 8007be2:	4610      	mov	r0, r2
 8007be4:	4798      	blx	r3
 8007be6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	2207      	movs	r2, #7
 8007bee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bf0:	e00f      	b.n	8007c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa10 	bl	800801a <USBD_CtlError>
        err++;
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8007c00:	e007      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa08 	bl	800801a <USBD_CtlError>
      err++;
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c10:	bf00      	nop
  }

  if (err != 0U)
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d11e      	bne.n	8007c56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	88db      	ldrh	r3, [r3, #6]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d016      	beq.n	8007c4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c20:	893b      	ldrh	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00e      	beq.n	8007c44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	88da      	ldrh	r2, [r3, #6]
 8007c2a:	893b      	ldrh	r3, [r7, #8]
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	bf28      	it	cs
 8007c30:	4613      	movcs	r3, r2
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c36:	893b      	ldrh	r3, [r7, #8]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	68f9      	ldr	r1, [r7, #12]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fa5d 	bl	80080fc <USBD_CtlSendData>
 8007c42:	e009      	b.n	8007c58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9e7 	bl	800801a <USBD_CtlError>
 8007c4c:	e004      	b.n	8007c58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 faae 	bl	80081b0 <USBD_CtlSendStatus>
 8007c54:	e000      	b.n	8007c58 <USBD_GetDescriptor+0x2cc>
    return;
 8007c56:	bf00      	nop
  }
}
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop

08007c60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	889b      	ldrh	r3, [r3, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d131      	bne.n	8007cd6 <USBD_SetAddress+0x76>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	88db      	ldrh	r3, [r3, #6]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d12d      	bne.n	8007cd6 <USBD_SetAddress+0x76>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	885b      	ldrh	r3, [r3, #2]
 8007c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c80:	d829      	bhi.n	8007cd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d104      	bne.n	8007ca4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f9bc 	bl	800801a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca2:	e01d      	b.n	8007ce0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7bfa      	ldrb	r2, [r7, #15]
 8007ca8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 ff0f 	bl	8008ad4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa7a 	bl	80081b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cca:	e009      	b.n	8007ce0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd4:	e004      	b.n	8007ce0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f99e 	bl	800801a <USBD_CtlError>
  }
}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	4b4e      	ldr	r3, [pc, #312]	; (8007e38 <USBD_SetConfig+0x150>)
 8007cfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d00:	4b4d      	ldr	r3, [pc, #308]	; (8007e38 <USBD_SetConfig+0x150>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d905      	bls.n	8007d14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f985 	bl	800801a <USBD_CtlError>
    return USBD_FAIL;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e08c      	b.n	8007e2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d002      	beq.n	8007d26 <USBD_SetConfig+0x3e>
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d029      	beq.n	8007d78 <USBD_SetConfig+0x90>
 8007d24:	e075      	b.n	8007e12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d26:	4b44      	ldr	r3, [pc, #272]	; (8007e38 <USBD_SetConfig+0x150>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d020      	beq.n	8007d70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d2e:	4b42      	ldr	r3, [pc, #264]	; (8007e38 <USBD_SetConfig+0x150>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d38:	4b3f      	ldr	r3, [pc, #252]	; (8007e38 <USBD_SetConfig+0x150>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fe ffe7 	bl	8006d12 <USBD_SetClassConfig>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f962 	bl	800801a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d5e:	e065      	b.n	8007e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa25 	bl	80081b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2203      	movs	r2, #3
 8007d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d6e:	e05d      	b.n	8007e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fa1d 	bl	80081b0 <USBD_CtlSendStatus>
      break;
 8007d76:	e059      	b.n	8007e2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d78:	4b2f      	ldr	r3, [pc, #188]	; (8007e38 <USBD_SetConfig+0x150>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d112      	bne.n	8007da6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d88:	4b2b      	ldr	r3, [pc, #172]	; (8007e38 <USBD_SetConfig+0x150>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d92:	4b29      	ldr	r3, [pc, #164]	; (8007e38 <USBD_SetConfig+0x150>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fe ffd6 	bl	8006d4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa06 	bl	80081b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007da4:	e042      	b.n	8007e2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <USBD_SetConfig+0x150>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d02a      	beq.n	8007e0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fe ffc4 	bl	8006d4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dc2:	4b1d      	ldr	r3, [pc, #116]	; (8007e38 <USBD_SetConfig+0x150>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <USBD_SetConfig+0x150>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fe ff9d 	bl	8006d12 <USBD_SetClassConfig>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00f      	beq.n	8007e02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f918 	bl	800801a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fe ffa9 	bl	8006d4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e00:	e014      	b.n	8007e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f9d4 	bl	80081b0 <USBD_CtlSendStatus>
      break;
 8007e08:	e010      	b.n	8007e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f9d0 	bl	80081b0 <USBD_CtlSendStatus>
      break;
 8007e10:	e00c      	b.n	8007e2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f900 	bl	800801a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e1a:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <USBD_SetConfig+0x150>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7fe ff92 	bl	8006d4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e26:	2303      	movs	r3, #3
 8007e28:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2a:	bf00      	nop
  }

  return ret;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000988 	.word	0x20000988

08007e3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	88db      	ldrh	r3, [r3, #6]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d004      	beq.n	8007e58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f8e2 	bl	800801a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e56:	e023      	b.n	8007ea0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	dc02      	bgt.n	8007e6a <USBD_GetConfig+0x2e>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dc03      	bgt.n	8007e70 <USBD_GetConfig+0x34>
 8007e68:	e015      	b.n	8007e96 <USBD_GetConfig+0x5a>
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d00b      	beq.n	8007e86 <USBD_GetConfig+0x4a>
 8007e6e:	e012      	b.n	8007e96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f93c 	bl	80080fc <USBD_CtlSendData>
        break;
 8007e84:	e00c      	b.n	8007ea0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f934 	bl	80080fc <USBD_CtlSendData>
        break;
 8007e94:	e004      	b.n	8007ea0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f8be 	bl	800801a <USBD_CtlError>
        break;
 8007e9e:	bf00      	nop
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d81e      	bhi.n	8007efe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	88db      	ldrh	r3, [r3, #6]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d004      	beq.n	8007ed2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f8a5 	bl	800801a <USBD_CtlError>
        break;
 8007ed0:	e01a      	b.n	8007f08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f043 0202 	orr.w	r2, r3, #2
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f900 	bl	80080fc <USBD_CtlSendData>
      break;
 8007efc:	e004      	b.n	8007f08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f88a 	bl	800801a <USBD_CtlError>
      break;
 8007f06:	bf00      	nop
  }
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	885b      	ldrh	r3, [r3, #2]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d107      	bne.n	8007f32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f940 	bl	80081b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f30:	e013      	b.n	8007f5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d10b      	bne.n	8007f52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	889b      	ldrh	r3, [r3, #4]
 8007f3e:	0a1b      	lsrs	r3, r3, #8
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f930 	bl	80081b0 <USBD_CtlSendStatus>
}
 8007f50:	e003      	b.n	8007f5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f860 	bl	800801a <USBD_CtlError>
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d80b      	bhi.n	8007f92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	885b      	ldrh	r3, [r3, #2]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d10c      	bne.n	8007f9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f910 	bl	80081b0 <USBD_CtlSendStatus>
      }
      break;
 8007f90:	e004      	b.n	8007f9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f840 	bl	800801a <USBD_CtlError>
      break;
 8007f9a:	e000      	b.n	8007f9e <USBD_ClrFeature+0x3c>
      break;
 8007f9c:	bf00      	nop
  }
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	781a      	ldrb	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	781a      	ldrb	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fa41 	bl	8007458 <SWAPBYTE>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	461a      	mov	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7ff fa34 	bl	8007458 <SWAPBYTE>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff fa27 	bl	8007458 <SWAPBYTE>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	80da      	strh	r2, [r3, #6]
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008024:	2180      	movs	r1, #128	; 0x80
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fcea 	bl	8008a00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fce6 	bl	8008a00 <USBD_LL_StallEP>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d036      	beq.n	80080c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008056:	6938      	ldr	r0, [r7, #16]
 8008058:	f000 f836 	bl	80080c8 <USBD_GetLen>
 800805c:	4603      	mov	r3, r0
 800805e:	3301      	adds	r3, #1
 8008060:	b29b      	uxth	r3, r3
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	4413      	add	r3, r2
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	7812      	ldrb	r2, [r2, #0]
 8008074:	701a      	strb	r2, [r3, #0]
  idx++;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	3301      	adds	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4413      	add	r3, r2
 8008082:	2203      	movs	r2, #3
 8008084:	701a      	strb	r2, [r3, #0]
  idx++;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	3301      	adds	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800808c:	e013      	b.n	80080b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	4413      	add	r3, r2
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	3301      	adds	r3, #1
 800809e:	613b      	str	r3, [r7, #16]
    idx++;
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	3301      	adds	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	4413      	add	r3, r2
 80080ac:	2200      	movs	r2, #0
 80080ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	3301      	adds	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e7      	bne.n	800808e <USBD_GetString+0x52>
 80080be:	e000      	b.n	80080c2 <USBD_GetString+0x86>
    return;
 80080c0:	bf00      	nop
  }
}
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080d8:	e005      	b.n	80080e6 <USBD_GetLen+0x1e>
  {
    len++;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	3301      	adds	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f5      	bne.n	80080da <USBD_GetLen+0x12>
  }

  return len;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2202      	movs	r2, #2
 800810c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	2100      	movs	r1, #0
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fcf5 	bl	8008b12 <USBD_LL_Transmit>

  return USBD_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	2100      	movs	r1, #0
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fce4 	bl	8008b12 <USBD_LL_Transmit>

  return USBD_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2203      	movs	r2, #3
 8008164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fce8 	bl	8008b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	2100      	movs	r1, #0
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fcd7 	bl	8008b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2204      	movs	r2, #4
 80081bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081c0:	2300      	movs	r3, #0
 80081c2:	2200      	movs	r2, #0
 80081c4:	2100      	movs	r1, #0
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fca3 	bl	8008b12 <USBD_LL_Transmit>

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2205      	movs	r2, #5
 80081e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081e6:	2300      	movs	r3, #0
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fcb1 	bl	8008b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008200:	2200      	movs	r2, #0
 8008202:	4912      	ldr	r1, [pc, #72]	; (800824c <MX_USB_DEVICE_Init+0x50>)
 8008204:	4812      	ldr	r0, [pc, #72]	; (8008250 <MX_USB_DEVICE_Init+0x54>)
 8008206:	f7fe fd07 	bl	8006c18 <USBD_Init>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008210:	f7f8 fd42 	bl	8000c98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008214:	490f      	ldr	r1, [pc, #60]	; (8008254 <MX_USB_DEVICE_Init+0x58>)
 8008216:	480e      	ldr	r0, [pc, #56]	; (8008250 <MX_USB_DEVICE_Init+0x54>)
 8008218:	f7fe fd2e 	bl	8006c78 <USBD_RegisterClass>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008222:	f7f8 fd39 	bl	8000c98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008226:	490c      	ldr	r1, [pc, #48]	; (8008258 <MX_USB_DEVICE_Init+0x5c>)
 8008228:	4809      	ldr	r0, [pc, #36]	; (8008250 <MX_USB_DEVICE_Init+0x54>)
 800822a:	f7fe fc1f 	bl	8006a6c <USBD_CDC_RegisterInterface>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008234:	f7f8 fd30 	bl	8000c98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008238:	4805      	ldr	r0, [pc, #20]	; (8008250 <MX_USB_DEVICE_Init+0x54>)
 800823a:	f7fe fd53 	bl	8006ce4 <USBD_Start>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008244:	f7f8 fd28 	bl	8000c98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008248:	bf00      	nop
 800824a:	bd80      	pop	{r7, pc}
 800824c:	200000b0 	.word	0x200000b0
 8008250:	2000098c 	.word	0x2000098c
 8008254:	2000001c 	.word	0x2000001c
 8008258:	2000009c 	.word	0x2000009c

0800825c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008260:	2200      	movs	r2, #0
 8008262:	4905      	ldr	r1, [pc, #20]	; (8008278 <CDC_Init_FS+0x1c>)
 8008264:	4805      	ldr	r0, [pc, #20]	; (800827c <CDC_Init_FS+0x20>)
 8008266:	f7fe fc1b 	bl	8006aa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800826a:	4905      	ldr	r1, [pc, #20]	; (8008280 <CDC_Init_FS+0x24>)
 800826c:	4803      	ldr	r0, [pc, #12]	; (800827c <CDC_Init_FS+0x20>)
 800826e:	f7fe fc39 	bl	8006ae4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008274:	4618      	mov	r0, r3
 8008276:	bd80      	pop	{r7, pc}
 8008278:	200014a8 	.word	0x200014a8
 800827c:	2000098c 	.word	0x2000098c
 8008280:	20000ca8 	.word	0x20000ca8

08008284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800828a:	4618      	mov	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
 80082a0:	4613      	mov	r3, r2
 80082a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b23      	cmp	r3, #35	; 0x23
 80082a8:	d84a      	bhi.n	8008340 <CDC_Control_FS+0xac>
 80082aa:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <CDC_Control_FS+0x1c>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	08008341 	.word	0x08008341
 80082b4:	08008341 	.word	0x08008341
 80082b8:	08008341 	.word	0x08008341
 80082bc:	08008341 	.word	0x08008341
 80082c0:	08008341 	.word	0x08008341
 80082c4:	08008341 	.word	0x08008341
 80082c8:	08008341 	.word	0x08008341
 80082cc:	08008341 	.word	0x08008341
 80082d0:	08008341 	.word	0x08008341
 80082d4:	08008341 	.word	0x08008341
 80082d8:	08008341 	.word	0x08008341
 80082dc:	08008341 	.word	0x08008341
 80082e0:	08008341 	.word	0x08008341
 80082e4:	08008341 	.word	0x08008341
 80082e8:	08008341 	.word	0x08008341
 80082ec:	08008341 	.word	0x08008341
 80082f0:	08008341 	.word	0x08008341
 80082f4:	08008341 	.word	0x08008341
 80082f8:	08008341 	.word	0x08008341
 80082fc:	08008341 	.word	0x08008341
 8008300:	08008341 	.word	0x08008341
 8008304:	08008341 	.word	0x08008341
 8008308:	08008341 	.word	0x08008341
 800830c:	08008341 	.word	0x08008341
 8008310:	08008341 	.word	0x08008341
 8008314:	08008341 	.word	0x08008341
 8008318:	08008341 	.word	0x08008341
 800831c:	08008341 	.word	0x08008341
 8008320:	08008341 	.word	0x08008341
 8008324:	08008341 	.word	0x08008341
 8008328:	08008341 	.word	0x08008341
 800832c:	08008341 	.word	0x08008341
 8008330:	08008341 	.word	0x08008341
 8008334:	08008341 	.word	0x08008341
 8008338:	08008341 	.word	0x08008341
 800833c:	08008341 	.word	0x08008341
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008340:	bf00      	nop
  }

  return (USBD_OK);
 8008342:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4809      	ldr	r0, [pc, #36]	; (8008384 <CDC_Receive_FS+0x34>)
 800835e:	f7fe fbc1 	bl	8006ae4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008362:	4808      	ldr	r0, [pc, #32]	; (8008384 <CDC_Receive_FS+0x34>)
 8008364:	f7fe fc22 	bl	8006bac <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	73fb      	strb	r3, [r7, #15]
  memcpy (USB_Rx_buffer, Buf, len);
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	461a      	mov	r2, r3
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4804      	ldr	r0, [pc, #16]	; (8008388 <CDC_Receive_FS+0x38>)
 8008376:	f000 fc89 	bl	8008c8c <memcpy>
  return (USBD_OK);
 800837a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	2000098c 	.word	0x2000098c
 8008388:	20000c68 	.word	0x20000c68

0800838c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800839c:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <CDC_Transmit_FS+0x48>)
 800839e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e00b      	b.n	80083ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083b2:	887b      	ldrh	r3, [r7, #2]
 80083b4:	461a      	mov	r2, r3
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4806      	ldr	r0, [pc, #24]	; (80083d4 <CDC_Transmit_FS+0x48>)
 80083ba:	f7fe fb71 	bl	8006aa0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083be:	4805      	ldr	r0, [pc, #20]	; (80083d4 <CDC_Transmit_FS+0x48>)
 80083c0:	f7fe fbae 	bl	8006b20 <USBD_CDC_TransmitPacket>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	2000098c 	.word	0x2000098c

080083d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	371c      	adds	r7, #28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
	...

080083fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	6039      	str	r1, [r7, #0]
 8008406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2212      	movs	r2, #18
 800840c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800840e:	4b03      	ldr	r3, [pc, #12]	; (800841c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	200000cc 	.word	0x200000cc

08008420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2204      	movs	r2, #4
 8008430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008432:	4b03      	ldr	r3, [pc, #12]	; (8008440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	200000e0 	.word	0x200000e0

08008444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d105      	bne.n	8008462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4907      	ldr	r1, [pc, #28]	; (8008478 <USBD_FS_ProductStrDescriptor+0x34>)
 800845a:	4808      	ldr	r0, [pc, #32]	; (800847c <USBD_FS_ProductStrDescriptor+0x38>)
 800845c:	f7ff fdee 	bl	800803c <USBD_GetString>
 8008460:	e004      	b.n	800846c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4904      	ldr	r1, [pc, #16]	; (8008478 <USBD_FS_ProductStrDescriptor+0x34>)
 8008466:	4805      	ldr	r0, [pc, #20]	; (800847c <USBD_FS_ProductStrDescriptor+0x38>)
 8008468:	f7ff fde8 	bl	800803c <USBD_GetString>
  }
  return USBD_StrDesc;
 800846c:	4b02      	ldr	r3, [pc, #8]	; (8008478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20001ca8 	.word	0x20001ca8
 800847c:	08008d18 	.word	0x08008d18

08008480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	4904      	ldr	r1, [pc, #16]	; (80084a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008490:	4804      	ldr	r0, [pc, #16]	; (80084a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008492:	f7ff fdd3 	bl	800803c <USBD_GetString>
  return USBD_StrDesc;
 8008496:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20001ca8 	.word	0x20001ca8
 80084a4:	08008d24 	.word	0x08008d24

080084a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	221a      	movs	r2, #26
 80084b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084ba:	f000 f843 	bl	8008544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084be:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	200000e4 	.word	0x200000e4

080084cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4907      	ldr	r1, [pc, #28]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084e2:	4808      	ldr	r0, [pc, #32]	; (8008504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084e4:	f7ff fdaa 	bl	800803c <USBD_GetString>
 80084e8:	e004      	b.n	80084f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	4904      	ldr	r1, [pc, #16]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ee:	4805      	ldr	r0, [pc, #20]	; (8008504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084f0:	f7ff fda4 	bl	800803c <USBD_GetString>
  }
  return USBD_StrDesc;
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20001ca8 	.word	0x20001ca8
 8008504:	08008d28 	.word	0x08008d28

08008508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	6039      	str	r1, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d105      	bne.n	8008526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	4907      	ldr	r1, [pc, #28]	; (800853c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800851e:	4808      	ldr	r0, [pc, #32]	; (8008540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008520:	f7ff fd8c 	bl	800803c <USBD_GetString>
 8008524:	e004      	b.n	8008530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4904      	ldr	r1, [pc, #16]	; (800853c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800852a:	4805      	ldr	r0, [pc, #20]	; (8008540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800852c:	f7ff fd86 	bl	800803c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008530:	4b02      	ldr	r3, [pc, #8]	; (800853c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20001ca8 	.word	0x20001ca8
 8008540:	08008d34 	.word	0x08008d34

08008544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800854a:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <Get_SerialNum+0x44>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <Get_SerialNum+0x48>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008556:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <Get_SerialNum+0x4c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800856a:	2208      	movs	r2, #8
 800856c:	4909      	ldr	r1, [pc, #36]	; (8008594 <Get_SerialNum+0x50>)
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f814 	bl	800859c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008574:	2204      	movs	r2, #4
 8008576:	4908      	ldr	r1, [pc, #32]	; (8008598 <Get_SerialNum+0x54>)
 8008578:	68b8      	ldr	r0, [r7, #8]
 800857a:	f000 f80f 	bl	800859c <IntToUnicode>
  }
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	1fff7a10 	.word	0x1fff7a10
 800858c:	1fff7a14 	.word	0x1fff7a14
 8008590:	1fff7a18 	.word	0x1fff7a18
 8008594:	200000e6 	.word	0x200000e6
 8008598:	200000f6 	.word	0x200000f6

0800859c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]
 80085b2:	e027      	b.n	8008604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	0f1b      	lsrs	r3, r3, #28
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	d80b      	bhi.n	80085d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	0f1b      	lsrs	r3, r3, #28
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4619      	mov	r1, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	440b      	add	r3, r1
 80085cc:	3230      	adds	r2, #48	; 0x30
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e00a      	b.n	80085ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	0f1b      	lsrs	r3, r3, #28
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	4619      	mov	r1, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	440b      	add	r3, r1
 80085e4:	3237      	adds	r2, #55	; 0x37
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	3301      	adds	r3, #1
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4413      	add	r3, r2
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	3301      	adds	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
 8008604:	7dfa      	ldrb	r2, [r7, #23]
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	429a      	cmp	r2, r3
 800860a:	d3d3      	bcc.n	80085b4 <IntToUnicode+0x18>
  }
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	605a      	str	r2, [r3, #4]
 800862e:	609a      	str	r2, [r3, #8]
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800863c:	d13a      	bne.n	80086b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800863e:	2300      	movs	r3, #0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	4b1e      	ldr	r3, [pc, #120]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	4a1d      	ldr	r2, [pc, #116]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 8008648:	f043 0301 	orr.w	r3, r3, #1
 800864c:	6313      	str	r3, [r2, #48]	; 0x30
 800864e:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800865a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800865e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008660:	2302      	movs	r3, #2
 8008662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008664:	2300      	movs	r3, #0
 8008666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008668:	2303      	movs	r3, #3
 800866a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800866c:	230a      	movs	r3, #10
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	4619      	mov	r1, r3
 8008676:	4812      	ldr	r0, [pc, #72]	; (80086c0 <HAL_PCD_MspInit+0xa4>)
 8008678:	f7f9 fd34 	bl	80020e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 800867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008680:	4a0e      	ldr	r2, [pc, #56]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 8008682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008686:	6353      	str	r3, [r2, #52]	; 0x34
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 800868e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 8008692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008696:	6453      	str	r3, [r2, #68]	; 0x44
 8008698:	4b08      	ldr	r3, [pc, #32]	; (80086bc <HAL_PCD_MspInit+0xa0>)
 800869a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	2043      	movs	r0, #67	; 0x43
 80086aa:	f7f9 fc96 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086ae:	2043      	movs	r0, #67	; 0x43
 80086b0:	f7f9 fcaf 	bl	8002012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086b4:	bf00      	nop
 80086b6:	3728      	adds	r7, #40	; 0x28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40023800 	.word	0x40023800
 80086c0:	40020000 	.word	0x40020000

080086c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fe fb4f 	bl	8006d7e <USBD_LL_SetupStage>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80086fa:	78fa      	ldrb	r2, [r7, #3]
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	4613      	mov	r3, r2
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	440b      	add	r3, r1
 8008708:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	4619      	mov	r1, r3
 8008712:	f7fe fb89 	bl	8006e28 <USBD_LL_DataOutStage>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	4613      	mov	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	334c      	adds	r3, #76	; 0x4c
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	4619      	mov	r1, r3
 8008746:	f7fe fc22 	bl	8006f8e <USBD_LL_DataInStage>
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe fd56 	bl	8007212 <USBD_LL_SOF>
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	e008      	b.n	800879a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d102      	bne.n	8008796 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
 8008794:	e001      	b.n	800879a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008796:	f7f8 fa7f 	bl	8000c98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087a0:	7bfa      	ldrb	r2, [r7, #15]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fcf6 	bl	8007196 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fe fc9e 	bl	80070f2 <USBD_LL_Reset>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fcf1 	bl	80071b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <HAL_PCD_SuspendCallback+0x48>)
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	4a03      	ldr	r2, [pc, #12]	; (8008808 <HAL_PCD_SuspendCallback+0x48>)
 80087fa:	f043 0306 	orr.w	r3, r3, #6
 80087fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	e000ed00 	.word	0xe000ed00

0800880c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fce1 	bl	80071e2 <USBD_LL_Resume>
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fd39 	bl	80072b6 <USBD_LL_IsoOUTIncomplete>
}
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fcf5 	bl	8007252 <USBD_LL_IsoINIncomplete>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fd4b 	bl	800731a <USBD_LL_DevConnected>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fd48 	bl	8007330 <USBD_LL_DevDisconnected>
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d13c      	bne.n	8008932 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088b8:	4a20      	ldr	r2, [pc, #128]	; (800893c <USBD_LL_Init+0x94>)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a1e      	ldr	r2, [pc, #120]	; (800893c <USBD_LL_Init+0x94>)
 80088c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088c8:	4b1c      	ldr	r3, [pc, #112]	; (800893c <USBD_LL_Init+0x94>)
 80088ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088d0:	4b1a      	ldr	r3, [pc, #104]	; (800893c <USBD_LL_Init+0x94>)
 80088d2:	2204      	movs	r2, #4
 80088d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <USBD_LL_Init+0x94>)
 80088d8:	2202      	movs	r2, #2
 80088da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088dc:	4b17      	ldr	r3, [pc, #92]	; (800893c <USBD_LL_Init+0x94>)
 80088de:	2200      	movs	r2, #0
 80088e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088e2:	4b16      	ldr	r3, [pc, #88]	; (800893c <USBD_LL_Init+0x94>)
 80088e4:	2202      	movs	r2, #2
 80088e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088e8:	4b14      	ldr	r3, [pc, #80]	; (800893c <USBD_LL_Init+0x94>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <USBD_LL_Init+0x94>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088f4:	4b11      	ldr	r3, [pc, #68]	; (800893c <USBD_LL_Init+0x94>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80088fa:	4b10      	ldr	r3, [pc, #64]	; (800893c <USBD_LL_Init+0x94>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008900:	4b0e      	ldr	r3, [pc, #56]	; (800893c <USBD_LL_Init+0x94>)
 8008902:	2200      	movs	r2, #0
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008906:	480d      	ldr	r0, [pc, #52]	; (800893c <USBD_LL_Init+0x94>)
 8008908:	f7f9 fd70 	bl	80023ec <HAL_PCD_Init>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008912:	f7f8 f9c1 	bl	8000c98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008916:	2180      	movs	r1, #128	; 0x80
 8008918:	4808      	ldr	r0, [pc, #32]	; (800893c <USBD_LL_Init+0x94>)
 800891a:	f7fa ffc8 	bl	80038ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800891e:	2240      	movs	r2, #64	; 0x40
 8008920:	2100      	movs	r1, #0
 8008922:	4806      	ldr	r0, [pc, #24]	; (800893c <USBD_LL_Init+0x94>)
 8008924:	f7fa ff7c 	bl	8003820 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008928:	2280      	movs	r2, #128	; 0x80
 800892a:	2101      	movs	r1, #1
 800892c:	4803      	ldr	r0, [pc, #12]	; (800893c <USBD_LL_Init+0x94>)
 800892e:	f7fa ff77 	bl	8003820 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20001ea8 	.word	0x20001ea8

08008940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008956:	4618      	mov	r0, r3
 8008958:	f7f9 fe65 	bl	8002626 <HAL_PCD_Start>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f942 	bl	8008bec <USBD_Get_USB_Status>
 8008968:	4603      	mov	r3, r0
 800896a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	461a      	mov	r2, r3
 8008984:	4603      	mov	r3, r0
 8008986:	70fb      	strb	r3, [r7, #3]
 8008988:	460b      	mov	r3, r1
 800898a:	70bb      	strb	r3, [r7, #2]
 800898c:	4613      	mov	r3, r2
 800898e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800899e:	78bb      	ldrb	r3, [r7, #2]
 80089a0:	883a      	ldrh	r2, [r7, #0]
 80089a2:	78f9      	ldrb	r1, [r7, #3]
 80089a4:	f7fa fb36 	bl	8003014 <HAL_PCD_EP_Open>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f91c 	bl	8008bec <USBD_Get_USB_Status>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fa fb7f 	bl	80030e4 <HAL_PCD_EP_Close>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f8fd 	bl	8008bec <USBD_Get_USB_Status>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fa fc57 	bl	80032d2 <HAL_PCD_EP_SetStall>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f8de 	bl	8008bec <USBD_Get_USB_Status>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fa fc9c 	bl	800339a <HAL_PCD_EP_ClrStall>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f8bf 	bl	8008bec <USBD_Get_USB_Status>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da0b      	bge.n	8008ab0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	333e      	adds	r3, #62	; 0x3e
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	e00b      	b.n	8008ac8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab6:	68f9      	ldr	r1, [r7, #12]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008ac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fa fa69 	bl	8002fca <HAL_PCD_SetAddress>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f874 	bl	8008bec <USBD_Get_USB_Status>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b086      	sub	sp, #24
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b30:	7af9      	ldrb	r1, [r7, #11]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	f7fa fb82 	bl	800323e <HAL_PCD_EP_Transmit>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f853 	bl	8008bec <USBD_Get_USB_Status>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	460b      	mov	r3, r1
 8008b62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b72:	7af9      	ldrb	r1, [r7, #11]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	f7fa fafe 	bl	8003178 <HAL_PCD_EP_Receive>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f832 	bl	8008bec <USBD_Get_USB_Status>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fa fb2e 	bl	800320e <HAL_PCD_EP_GetRxCount>
 8008bb2:	4603      	mov	r3, r0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bc4:	4b03      	ldr	r3, [pc, #12]	; (8008bd4 <USBD_static_malloc+0x18>)
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	200023b4 	.word	0x200023b4

08008bd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]

}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d817      	bhi.n	8008c30 <USBD_Get_USB_Status+0x44>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <USBD_Get_USB_Status+0x1c>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c1f 	.word	0x08008c1f
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c2b 	.word	0x08008c2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1c:	e00b      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	73fb      	strb	r3, [r7, #15]
    break;
 8008c22:	e008      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
    break;
 8008c28:	e005      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2e:	e002      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c30:	2303      	movs	r3, #3
 8008c32:	73fb      	strb	r3, [r7, #15]
    break;
 8008c34:	bf00      	nop
  }
  return usb_status;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <__libc_init_array>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4d0d      	ldr	r5, [pc, #52]	; (8008c7c <__libc_init_array+0x38>)
 8008c48:	4c0d      	ldr	r4, [pc, #52]	; (8008c80 <__libc_init_array+0x3c>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	2600      	movs	r6, #0
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	d109      	bne.n	8008c68 <__libc_init_array+0x24>
 8008c54:	4d0b      	ldr	r5, [pc, #44]	; (8008c84 <__libc_init_array+0x40>)
 8008c56:	4c0c      	ldr	r4, [pc, #48]	; (8008c88 <__libc_init_array+0x44>)
 8008c58:	f000 f852 	bl	8008d00 <_init>
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	10a4      	asrs	r4, r4, #2
 8008c60:	2600      	movs	r6, #0
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	d105      	bne.n	8008c72 <__libc_init_array+0x2e>
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6c:	4798      	blx	r3
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7ee      	b.n	8008c50 <__libc_init_array+0xc>
 8008c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c76:	4798      	blx	r3
 8008c78:	3601      	adds	r6, #1
 8008c7a:	e7f2      	b.n	8008c62 <__libc_init_array+0x1e>
 8008c7c:	08008d84 	.word	0x08008d84
 8008c80:	08008d84 	.word	0x08008d84
 8008c84:	08008d84 	.word	0x08008d84
 8008c88:	08008d88 	.word	0x08008d88

08008c8c <memcpy>:
 8008c8c:	440a      	add	r2, r1
 8008c8e:	4291      	cmp	r1, r2
 8008c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c94:	d100      	bne.n	8008c98 <memcpy+0xc>
 8008c96:	4770      	bx	lr
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ca2:	4291      	cmp	r1, r2
 8008ca4:	d1f9      	bne.n	8008c9a <memcpy+0xe>
 8008ca6:	bd10      	pop	{r4, pc}

08008ca8 <memset>:
 8008ca8:	4402      	add	r2, r0
 8008caa:	4603      	mov	r3, r0
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d100      	bne.n	8008cb2 <memset+0xa>
 8008cb0:	4770      	bx	lr
 8008cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cb6:	e7f9      	b.n	8008cac <memset+0x4>

08008cb8 <roundf>:
 8008cb8:	ee10 0a10 	vmov	r0, s0
 8008cbc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008cc0:	3a7f      	subs	r2, #127	; 0x7f
 8008cc2:	2a16      	cmp	r2, #22
 8008cc4:	dc15      	bgt.n	8008cf2 <roundf+0x3a>
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	da08      	bge.n	8008cdc <roundf+0x24>
 8008cca:	3201      	adds	r2, #1
 8008ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008cd0:	d101      	bne.n	8008cd6 <roundf+0x1e>
 8008cd2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8008cd6:	ee00 3a10 	vmov	s0, r3
 8008cda:	4770      	bx	lr
 8008cdc:	4907      	ldr	r1, [pc, #28]	; (8008cfc <roundf+0x44>)
 8008cde:	4111      	asrs	r1, r2
 8008ce0:	4208      	tst	r0, r1
 8008ce2:	d0fa      	beq.n	8008cda <roundf+0x22>
 8008ce4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ce8:	4113      	asrs	r3, r2
 8008cea:	4403      	add	r3, r0
 8008cec:	ea23 0301 	bic.w	r3, r3, r1
 8008cf0:	e7f1      	b.n	8008cd6 <roundf+0x1e>
 8008cf2:	2a80      	cmp	r2, #128	; 0x80
 8008cf4:	d1f1      	bne.n	8008cda <roundf+0x22>
 8008cf6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008cfa:	4770      	bx	lr
 8008cfc:	007fffff 	.word	0x007fffff

08008d00 <_init>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr

08008d0c <_fini>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr
