
force_sensor_lineralazer_rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b74  08003b74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b74  08003b74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b74  08003b74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000008e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ec  200008ec  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1dd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a97  00000000  00000000  0002c219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  0002ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b58  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213e9  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010da6  00000000  00000000  000518b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfe17  00000000  00000000  0006265f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122476  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000320c  00000000  00000000  001224c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b44 	.word	0x08003b44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b44 	.word	0x08003b44

080001c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b44      	ldr	r3, [pc, #272]	; (80002fc <MX_ADC1_Init+0x134>)
 80001ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f2:	4b42      	ldr	r3, [pc, #264]	; (80002fc <MX_ADC1_Init+0x134>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f8:	4b40      	ldr	r3, [pc, #256]	; (80002fc <MX_ADC1_Init+0x134>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001fe:	4b3f      	ldr	r3, [pc, #252]	; (80002fc <MX_ADC1_Init+0x134>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000204:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <MX_ADC1_Init+0x134>)
 8000206:	2200      	movs	r2, #0
 8000208:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800020a:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <MX_ADC1_Init+0x134>)
 800020c:	2201      	movs	r2, #1
 800020e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000212:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <MX_ADC1_Init+0x134>)
 8000214:	2201      	movs	r2, #1
 8000216:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000218:	4b38      	ldr	r3, [pc, #224]	; (80002fc <MX_ADC1_Init+0x134>)
 800021a:	2200      	movs	r2, #0
 800021c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800021e:	4b37      	ldr	r3, [pc, #220]	; (80002fc <MX_ADC1_Init+0x134>)
 8000220:	2201      	movs	r2, #1
 8000222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000224:	4b35      	ldr	r3, [pc, #212]	; (80002fc <MX_ADC1_Init+0x134>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <MX_ADC1_Init+0x134>)
 800022c:	2204      	movs	r2, #4
 800022e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000230:	4b32      	ldr	r3, [pc, #200]	; (80002fc <MX_ADC1_Init+0x134>)
 8000232:	2200      	movs	r2, #0
 8000234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <MX_ADC1_Init+0x134>)
 800023a:	2204      	movs	r2, #4
 800023c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800023e:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <MX_ADC1_Init+0x134>)
 8000240:	2200      	movs	r2, #0
 8000242:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000244:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <MX_ADC1_Init+0x134>)
 8000246:	2200      	movs	r2, #0
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024a:	482c      	ldr	r0, [pc, #176]	; (80002fc <MX_ADC1_Init+0x134>)
 800024c:	f001 f862 	bl	8001314 <HAL_ADC_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000256:	f000 fcab 	bl	8000bb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800025e:	f107 031c 	add.w	r3, r7, #28
 8000262:	4619      	mov	r1, r3
 8000264:	4825      	ldr	r0, [pc, #148]	; (80002fc <MX_ADC1_Init+0x134>)
 8000266:	f001 ff7d 	bl	8002164 <HAL_ADCEx_MultiModeConfigChannel>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000270:	f000 fc9e 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000274:	2301      	movs	r3, #1
 8000276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000278:	2301      	movs	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000280:	2303      	movs	r3, #3
 8000282:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4619      	mov	r1, r3
 8000290:	481a      	ldr	r0, [pc, #104]	; (80002fc <MX_ADC1_Init+0x134>)
 8000292:	f001 fc7b 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800029c:	f000 fc88 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002a0:	2302      	movs	r3, #2
 80002a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4619      	mov	r1, r3
 80002ac:	4813      	ldr	r0, [pc, #76]	; (80002fc <MX_ADC1_Init+0x134>)
 80002ae:	f001 fc6d 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80002b8:	f000 fc7a 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002bc:	2303      	movs	r3, #3
 80002be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002c0:	2303      	movs	r3, #3
 80002c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4619      	mov	r1, r3
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <MX_ADC1_Init+0x134>)
 80002ca:	f001 fc5f 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80002d4:	f000 fc6c 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002d8:	2304      	movs	r3, #4
 80002da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002dc:	2304      	movs	r3, #4
 80002de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_ADC1_Init+0x134>)
 80002e6:	f001 fc51 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80002f0:	f000 fc5e 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	3728      	adds	r7, #40	; 0x28
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000028 	.word	0x20000028

08000300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08a      	sub	sp, #40	; 0x28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000320:	d124      	bne.n	800036c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a13      	ldr	r2, [pc, #76]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	6153      	str	r3, [r2, #20]
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	613b      	str	r3, [r7, #16]
 8000338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <HAL_ADC_MspInit+0x74>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000352:	230f      	movs	r3, #15
 8000354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000356:	2303      	movs	r3, #3
 8000358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	4619      	mov	r1, r3
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f002 fc5a 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800036c:	bf00      	nop
 800036e:	3728      	adds	r7, #40	; 0x28
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000

08000378 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <MX_CRC_Init+0x3c>)
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <MX_CRC_Init+0x40>)
 8000380:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_CRC_Init+0x3c>)
 8000384:	2200      	movs	r2, #0
 8000386:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <MX_CRC_Init+0x3c>)
 800038a:	2200      	movs	r2, #0
 800038c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_CRC_Init+0x3c>)
 8000390:	2200      	movs	r2, #0
 8000392:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <MX_CRC_Init+0x3c>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_CRC_Init+0x3c>)
 800039c:	2203      	movs	r2, #3
 800039e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <MX_CRC_Init+0x3c>)
 80003a2:	f002 fa37 	bl	8002814 <HAL_CRC_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003ac:	f000 fc00 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000078 	.word	0x20000078
 80003b8:	40023000 	.word	0x40023000

080003bc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <HAL_CRC_MspInit+0x38>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d10b      	bne.n	80003e6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_CRC_MspInit+0x3c>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a09      	ldr	r2, [pc, #36]	; (80003f8 <HAL_CRC_MspInit+0x3c>)
 80003d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <HAL_CRC_MspInit+0x3c>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40023000 	.word	0x40023000
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800040c:	2b40      	cmp	r3, #64	; 0x40
 800040e:	d101      	bne.n	8000414 <LL_USART_IsActiveFlag_TC+0x18>
 8000410:	2301      	movs	r3, #1
 8000412:	e000      	b.n	8000416 <LL_USART_IsActiveFlag_TC+0x1a>
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000432:	2b80      	cmp	r3, #128	; 0x80
 8000434:	d101      	bne.n	800043a <LL_USART_IsActiveFlag_TXE+0x18>
 8000436:	2301      	movs	r3, #1
 8000438:	e000      	b.n	800043c <LL_USART_IsActiveFlag_TXE+0x1a>
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2240      	movs	r2, #64	; 0x40
 8000454:	621a      	str	r2, [r3, #32]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	b29a      	uxth	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	619a      	str	r2, [r3, #24]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
 80004a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <transmitData>:
#include "gpio.h"
#include "crc.h"
#include "adc.h"

void transmitData(USART_TypeDef *USARTx, uint8_t *data, int length)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	LL_GPIO_SetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Tx mode
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f7ff ffd7 	bl	8000482 <LL_GPIO_SetOutputPin>
	for (int i = 0; i < length; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e011      	b.n	80004fe <transmitData+0x42>
	{
		while (!LL_USART_IsActiveFlag_TXE(USART1));
 80004da:	bf00      	nop
 80004dc:	4814      	ldr	r0, [pc, #80]	; (8000530 <transmitData+0x74>)
 80004de:	f7ff ffa0 	bl	8000422 <LL_USART_IsActiveFlag_TXE>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <transmitData+0x20>
		LL_USART_TransmitData8(USARTx, data[i]);
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	68f8      	ldr	r0, [r7, #12]
 80004f4:	f7ff ffb5 	bl	8000462 <LL_USART_TransmitData8>
	for (int i = 0; i < length; i++)
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbe9      	blt.n	80004da <transmitData+0x1e>
	}
	while (!LL_USART_IsActiveFlag_TC(USARTx))
 8000506:	bf00      	nop
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f7ff ff77 	bl	80003fc <LL_USART_IsActiveFlag_TC>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0f9      	beq.n	8000508 <transmitData+0x4c>
		;
	LL_USART_ClearFlag_TC(USART1);
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <transmitData+0x74>)
 8000516:	f7ff ff97 	bl	8000448 <LL_USART_ClearFlag_TC>
	LL_GPIO_ResetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Rx mode
 800051a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000522:	f7ff ffbc 	bl	800049e <LL_GPIO_ResetOutputPin>
}
 8000526:	bf00      	nop
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40013800 	.word	0x40013800

08000534 <clearBufferAndCounter>:

void clearBufferAndCounter(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	memset(rxBuffer, 0, sizeof(rxBuffer));
 8000538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053c:	2100      	movs	r1, #0
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <clearBufferAndCounter+0x40>)
 8000540:	f003 faf8 	bl	8003b34 <memset>
	rxBufferCounter = 0;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <clearBufferAndCounter+0x44>)
 8000546:	2200      	movs	r2, #0
 8000548:	801a      	strh	r2, [r3, #0]
	memset(txBuffer, 0, sizeof(txBuffer));
 800054a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054e:	2100      	movs	r1, #0
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <clearBufferAndCounter+0x48>)
 8000552:	f003 faef 	bl	8003b34 <memset>
	memset(adcForTransmitt, 0, sizeof(adcForTransmitt));
 8000556:	2202      	movs	r2, #2
 8000558:	2100      	movs	r1, #0
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <clearBufferAndCounter+0x4c>)
 800055c:	f003 faea 	bl	8003b34 <memset>
	memset(adcBuffer, 0, sizeof(adcBuffer));
 8000560:	2208      	movs	r2, #8
 8000562:	2100      	movs	r1, #0
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <clearBufferAndCounter+0x50>)
 8000566:	f003 fae5 	bl	8003b34 <memset>
	recieved_CRC_32 = 0;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <clearBufferAndCounter+0x54>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000490 	.word	0x20000490
 8000578:	2000009c 	.word	0x2000009c
 800057c:	200000a8 	.word	0x200000a8
 8000580:	20000880 	.word	0x20000880
 8000584:	20000878 	.word	0x20000878
 8000588:	200000a4 	.word	0x200000a4

0800058c <readADCchannels>:

void readADCchannels(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	memset(adcBuffer, 0, sizeof(adcBuffer));
 8000592:	2208      	movs	r2, #8
 8000594:	2100      	movs	r1, #0
 8000596:	4811      	ldr	r0, [pc, #68]	; (80005dc <readADCchannels+0x50>)
 8000598:	f003 facc 	bl	8003b34 <memset>

    for (uint8_t i = 0; i < 4; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e012      	b.n	80005c8 <readADCchannels+0x3c>
		{
			HAL_ADC_Start(&hadc1);
 80005a2:	480f      	ldr	r0, [pc, #60]	; (80005e0 <readADCchannels+0x54>)
 80005a4:	f001 f896 	bl	80016d4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80005a8:	2164      	movs	r1, #100	; 0x64
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <readADCchannels+0x54>)
 80005ac:	f001 f9de 	bl	800196c <HAL_ADC_PollForConversion>
			adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <readADCchannels+0x54>)
 80005b2:	f001 fadd 	bl	8001b70 <HAL_ADC_GetValue>
 80005b6:	4602      	mov	r2, r0
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	b291      	uxth	r1, r2
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <readADCchannels+0x50>)
 80005be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 4; i++)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	3301      	adds	r3, #1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d9e9      	bls.n	80005a2 <readADCchannels+0x16>
		}

    HAL_ADC_Stop(&hadc1);
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <readADCchannels+0x54>)
 80005d0:	f001 f996 	bl	8001900 <HAL_ADC_Stop>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000878 	.word	0x20000878
 80005e0:	20000028 	.word	0x20000028

080005e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <LL_GPIO_ResetOutputPin>:
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000646:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800064a:	f7ff ffcb 	bl	80005e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800064e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000652:	f7ff ffc7 	bl	80005e4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin);
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f7ff ffd9 	bl	8000614 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8000662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000666:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f002 fdf8 	bl	8003274 <LL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db0b      	blt.n	80006b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 021f 	and.w	r2, r3, #31
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <__NVIC_EnableIRQ+0x38>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	2001      	movs	r0, #1
 80006ae:	fa00 f202 	lsl.w	r2, r0, r2
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <LL_RCC_HSE_Enable+0x1c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <LL_RCC_HSE_Enable+0x1c>)
 80006d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <LL_RCC_HSE_IsReady+0x24>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006f8:	bf0c      	ite	eq
 80006fa:	2301      	moveq	r3, #1
 80006fc:	2300      	movne	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LL_RCC_SetSysClkSource+0x24>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f023 0203 	bic.w	r2, r3, #3
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <LL_RCC_SetSysClkSource+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	604b      	str	r3, [r1, #4]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000

08000738 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <LL_RCC_GetSysClkSource+0x18>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f003 030c 	and.w	r3, r3, #12
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <LL_RCC_SetAHBPrescaler+0x24>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000764:	4904      	ldr	r1, [pc, #16]	; (8000778 <LL_RCC_SetAHBPrescaler+0x24>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	604b      	str	r3, [r1, #4]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000

0800077c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800078c:	4904      	ldr	r1, [pc, #16]	; (80007a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4313      	orrs	r3, r2
 8000792:	604b      	str	r3, [r1, #4]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000

080007a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80007b4:	4904      	ldr	r1, [pc, #16]	; (80007c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	604b      	str	r3, [r1, #4]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40021000 	.word	0x40021000

080007cc <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <LL_RCC_SetUSARTClockSource+0x34>)
 80007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	0e1b      	lsrs	r3, r3, #24
 80007dc:	2103      	movs	r1, #3
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	401a      	ands	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007ec:	4904      	ldr	r1, [pc, #16]	; (8000800 <LL_RCC_SetUSARTClockSource+0x34>)
 80007ee:	4313      	orrs	r3, r2
 80007f0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <LL_RCC_SetADCClockSource+0x2c>)
 800080e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	0c1b      	lsrs	r3, r3, #16
 8000814:	43db      	mvns	r3, r3
 8000816:	401a      	ands	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	b29b      	uxth	r3, r3
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <LL_RCC_SetADCClockSource+0x2c>)
 800081e:	4313      	orrs	r3, r2
 8000820:	62cb      	str	r3, [r1, #44]	; 0x2c
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
#endif /* RCC_CFGR2_ADCPRE34 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <LL_RCC_PLL_Enable+0x1c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <LL_RCC_PLL_Enable+0x1c>)
 800083e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <LL_RCC_PLL_IsReady+0x24>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	430b      	orrs	r3, r1
 8000898:	4909      	ldr	r1, [pc, #36]	; (80008c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800089a:	4313      	orrs	r3, r2
 800089c:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a2:	f023 020f 	bic.w	r2, r3, #15
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	4904      	ldr	r1, [pc, #16]	; (80008c0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008ae:	4313      	orrs	r3, r2
 80008b0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <LL_FLASH_SetLatency+0x24>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f023 0207 	bic.w	r2, r3, #7
 80008d4:	4904      	ldr	r1, [pc, #16]	; (80008e8 <LL_FLASH_SetLatency+0x24>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	600b      	str	r3, [r1, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40022000 	.word	0x40022000

080008ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <LL_FLASH_GetLatency+0x18>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 0307 	and.w	r3, r3, #7
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <LL_USART_EnableIT_RXNE>:
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	e853 3f00 	ldrex	r3, [r3]
 800091a:	60bb      	str	r3, [r7, #8]
   return(result);
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	f043 0320 	orr.w	r3, r3, #32
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	61ba      	str	r2, [r7, #24]
 800092a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800092c:	6979      	ldr	r1, [r7, #20]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	e841 2300 	strex	r3, r2, [r1]
 8000934:	613b      	str	r3, [r7, #16]
   return(result);
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1e9      	bne.n	8000910 <LL_USART_EnableIT_RXNE+0x8>
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <LL_USART_EnableIT_ERROR>:
{
 800094a:	b480      	push	{r7}
 800094c:	b089      	sub	sp, #36	; 0x24
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3308      	adds	r3, #8
 8000956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	e853 3f00 	ldrex	r3, [r3]
 800095e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3308      	adds	r3, #8
 800096c:	69fa      	ldr	r2, [r7, #28]
 800096e:	61ba      	str	r2, [r7, #24]
 8000970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000972:	6979      	ldr	r1, [r7, #20]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	e841 2300 	strex	r3, r2, [r1]
 800097a:	613b      	str	r3, [r7, #16]
   return(result);
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1e7      	bne.n	8000952 <LL_USART_EnableIT_ERROR+0x8>
}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	3724      	adds	r7, #36	; 0x24
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <LL_GPIO_ResetOutputPin>:
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fc49 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f8af 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff fe39 	bl	8000630 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009be:	f7ff fc03 	bl	80001c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80009c2:	f000 fbb3 	bl	800112c <MX_USART1_UART_Init>
  MX_CRC_Init();
 80009c6:	f7ff fcd7 	bl	8000378 <MX_CRC_Init>
  MX_SPI1_Init();
 80009ca:	f000 f8f7 	bl	8000bbc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t crc_test_value = 462;
 80009ce:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
 80009d2:	617b      	str	r3, [r7, #20]
  uint32_t crcInput_value = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  uint32_t adc_uint32_Buffer[4] = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]

  // Allow USART 1 to work
  NVIC_EnableIRQ(USART1_IRQn);
 80009e4:	2025      	movs	r0, #37	; 0x25
 80009e6:	f7ff fe51 	bl	800068c <__NVIC_EnableIRQ>

  USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80009ea:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <main+0x14c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a42      	ldr	r2, [pc, #264]	; (8000af8 <main+0x14c>)
 80009f0:	f043 030c 	orr.w	r3, r3, #12
 80009f4:	6013      	str	r3, [r2, #0]
  LL_USART_EnableIT_RXNE(USART1);
 80009f6:	4840      	ldr	r0, [pc, #256]	; (8000af8 <main+0x14c>)
 80009f8:	f7ff ff86 	bl	8000908 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART1);
 80009fc:	483e      	ldr	r0, [pc, #248]	; (8000af8 <main+0x14c>)
 80009fe:	f7ff ffa4 	bl	800094a <LL_USART_EnableIT_ERROR>
  LL_GPIO_ResetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Rx mode
 8000a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f7ff ffc1 	bl	8000990 <LL_GPIO_ResetOutputPin>
  // Clear variables and arrays to calm my anxiety (￢‿￢ )
  memset(rxBuffer, 0, sizeof(rxBuffer));
 8000a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a12:	2100      	movs	r1, #0
 8000a14:	4839      	ldr	r0, [pc, #228]	; (8000afc <main+0x150>)
 8000a16:	f003 f88d 	bl	8003b34 <memset>
  rxBufferCounter = 0;
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <main+0x154>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LL_mDelay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f003 f82d 	bl	8003a80 <LL_mDelay>
	  switch(rxBuffer[0]) // Pointer to command
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <main+0x150>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b66      	cmp	r3, #102	; 0x66
 8000a2c:	d04a      	beq.n	8000ac4 <main+0x118>
 8000a2e:	2b72      	cmp	r3, #114	; 0x72
 8000a30:	d15e      	bne.n	8000af0 <main+0x144>
		  {
			 case 'r':
				// ADC value equal from 0 to 4095, because we have 12 bit ADC
				memset(adc_uint32_Buffer, 0, sizeof(adc_uint32_Buffer));
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2210      	movs	r2, #16
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 f87b 	bl	8003b34 <memset>
				calculated_CRC_32=0;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <main+0x158>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
				crcInput_value = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]

				readADCchannels(); // ADC conversation for 4 channels
 8000a48:	f7ff fda0 	bl	800058c <readADCchannels>
				for (uint8_t i = 0; i < 4; i++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
 8000a50:	e00c      	b.n	8000a6c <main+0xc0>
					adc_uint32_Buffer[i] = (uint32_t)adcBuffer[i];
 8000a52:	7ffb      	ldrb	r3, [r7, #31]
 8000a54:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <main+0x15c>)
 8000a56:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a5a:	7ffb      	ldrb	r3, [r7, #31]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	3320      	adds	r3, #32
 8000a60:	443b      	add	r3, r7
 8000a62:	f843 2c1c 	str.w	r2, [r3, #-28]
				for (uint8_t i = 0; i < 4; i++)
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	77fb      	strb	r3, [r7, #31]
 8000a6c:	7ffb      	ldrb	r3, [r7, #31]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d9ef      	bls.n	8000a52 <main+0xa6>
				calculated_CRC_32 = HAL_CRC_Calculate(&hcrc, &adc_uint32_Buffer, 4);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2204      	movs	r2, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4824      	ldr	r0, [pc, #144]	; (8000b0c <main+0x160>)
 8000a7a:	f001 ff2f 	bl	80028dc <HAL_CRC_Calculate>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <main+0x158>)
 8000a82:	6013      	str	r3, [r2, #0]

				 for(uint8_t i=0; i<4; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	77bb      	strb	r3, [r7, #30]
 8000a88:	e00d      	b.n	8000aa6 <main+0xfa>
					memcpy(txBuffer + (i * sizeof(adcBuffer[0])), (uint8_t*)(&adcBuffer[i]), sizeof(adcBuffer[0]));
 8000a8a:	7fbb      	ldrb	r3, [r7, #30]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <main+0x164>)
 8000a90:	4413      	add	r3, r2
 8000a92:	7fba      	ldrb	r2, [r7, #30]
 8000a94:	0052      	lsls	r2, r2, #1
 8000a96:	491c      	ldr	r1, [pc, #112]	; (8000b08 <main+0x15c>)
 8000a98:	440a      	add	r2, r1
 8000a9a:	8812      	ldrh	r2, [r2, #0]
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	801a      	strh	r2, [r3, #0]
				 for(uint8_t i=0; i<4; i++)
 8000aa0:	7fbb      	ldrb	r3, [r7, #30]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	77bb      	strb	r3, [r7, #30]
 8000aa6:	7fbb      	ldrb	r3, [r7, #30]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d9ee      	bls.n	8000a8a <main+0xde>
				 memcpy(txBuffer + (4*sizeof(adcBuffer[0])), (uint8_t*)(&calculated_CRC_32), sizeof(calculated_CRC_32));
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <main+0x168>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <main+0x158>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6013      	str	r3, [r2, #0]

				 transmitData(USART1, (uint8_t*)txBuffer, ((4 * sizeof(adcBuffer[0])) + sizeof(calculated_CRC_32)));
 8000ab4:	220c      	movs	r2, #12
 8000ab6:	4916      	ldr	r1, [pc, #88]	; (8000b10 <main+0x164>)
 8000ab8:	480f      	ldr	r0, [pc, #60]	; (8000af8 <main+0x14c>)
 8000aba:	f7ff fcff 	bl	80004bc <transmitData>
				 clearBufferAndCounter();
 8000abe:	f7ff fd39 	bl	8000534 <clearBufferAndCounter>
				 break;
 8000ac2:	e018      	b.n	8000af6 <main+0x14a>

			 case 'f':
				 calculated_CRC_32 = HAL_CRC_Calculate(&hcrc, &crc_test_value, 1); // 462
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4619      	mov	r1, r3
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <main+0x160>)
 8000ace:	f001 ff05 	bl	80028dc <HAL_CRC_Calculate>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <main+0x158>)
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <main+0x158>)
 8000ada:	681b      	ldr	r3, [r3, #0]
				 memcpy(txBuffer, (uint8_t*)(&calculated_CRC_32), sizeof(calculated_CRC_32));
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <main+0x164>)
 8000ade:	6013      	str	r3, [r2, #0]
				 transmitData(USART1, (uint8_t*)txBuffer, 4);
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	490b      	ldr	r1, [pc, #44]	; (8000b10 <main+0x164>)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <main+0x14c>)
 8000ae6:	f7ff fce9 	bl	80004bc <transmitData>
				 clearBufferAndCounter();
 8000aea:	f7ff fd23 	bl	8000534 <clearBufferAndCounter>
				 break;
 8000aee:	e002      	b.n	8000af6 <main+0x14a>

			 default:
				 clearBufferAndCounter();
 8000af0:	f7ff fd20 	bl	8000534 <clearBufferAndCounter>
				 continue;
 8000af4:	bf00      	nop
	  LL_mDelay(1);
 8000af6:	e793      	b.n	8000a20 <main+0x74>
 8000af8:	40013800 	.word	0x40013800
 8000afc:	20000490 	.word	0x20000490
 8000b00:	2000009c 	.word	0x2000009c
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	20000878 	.word	0x20000878
 8000b0c:	20000078 	.word	0x20000078
 8000b10:	200000a8 	.word	0x200000a8
 8000b14:	200000b0 	.word	0x200000b0

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fed1 	bl	80008c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000b22:	bf00      	nop
 8000b24:	f7ff fee2 	bl	80008ec <LL_FLASH_GetLatency>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d1fa      	bne.n	8000b24 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000b2e:	f7ff fdcb 	bl	80006c8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000b32:	bf00      	nop
 8000b34:	f7ff fdd8 	bl	80006e8 <LL_RCC_HSE_IsReady>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d1fa      	bne.n	8000b34 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_9);
 8000b3e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000b42:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 8000b46:	f7ff fe99 	bl	800087c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b4a:	f7ff fe73 	bl	8000834 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b4e:	bf00      	nop
 8000b50:	f7ff fe80 	bl	8000854 <LL_RCC_PLL_IsReady>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d1fa      	bne.n	8000b50 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff fdfa 	bl	8000754 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000b60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b64:	f7ff fe0a 	bl	800077c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000b68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b6c:	f7ff fe1a 	bl	80007a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff fdcd 	bl	8000710 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b76:	bf00      	nop
 8000b78:	f7ff fdde 	bl	8000738 <LL_RCC_GetSysClkSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d1fa      	bne.n	8000b78 <SystemClock_Config+0x60>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <SystemClock_Config+0x90>)
 8000b84:	f002 ffa2 	bl	8003acc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000b88:	200f      	movs	r0, #15
 8000b8a:	f000 fb73 	bl	8001274 <HAL_InitTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b94:	f000 f80c 	bl	8000bb0 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fe17 	bl	80007cc <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <SystemClock_Config+0x94>)
 8000ba0:	f7ff fe30 	bl	8000804 <LL_RCC_SetADCClockSource>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	044aa200 	.word	0x044aa200
 8000bac:	01f00100 	.word	0x01f00100

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000c14:	2208      	movs	r2, #8
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_SPI1_Init+0x70>)
 8000c1a:	f002 f97b 	bl	8002f14 <HAL_SPI_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000c24:	f7ff ffc4 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000884 	.word	0x20000884
 8000c30:	40013000 	.word	0x40013000

08000c34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_SPI_MspInit+0x7c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d128      	bne.n	8000ca8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	6153      	str	r3, [r2, #20]
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_SPI_MspInit+0x80>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23f0      	movs	r3, #240	; 0xf0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c96:	2305      	movs	r3, #5
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f001 ffbc 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_MspInit+0x44>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_MspInit+0x44>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_MspInit+0x44>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x44>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x44>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x44>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <LL_USART_IsActiveFlag_PE>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <LL_USART_IsActiveFlag_PE+0x18>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <LL_USART_IsActiveFlag_PE+0x1a>
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <LL_USART_IsActiveFlag_FE>:
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d101      	bne.n	8000d3e <LL_USART_IsActiveFlag_FE+0x18>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <LL_USART_IsActiveFlag_FE+0x1a>
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_USART_IsActiveFlag_ORE>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d101      	bne.n	8000d64 <LL_USART_IsActiveFlag_ORE+0x18>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <LL_USART_IsActiveFlag_ORE+0x1a>
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_USART_IsActiveFlag_RXNE>:
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	2b20      	cmp	r3, #32
 8000d84:	d101      	bne.n	8000d8a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_USART_ClearFlag_PE>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	621a      	str	r2, [r3, #32]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_USART_ClearFlag_FE>:
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	621a      	str	r2, [r3, #32]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_USART_ClearFlag_ORE>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	621a      	str	r2, [r3, #32]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_USART_IsEnabledIT_RXNE>:
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	2b20      	cmp	r3, #32
 8000df8:	d101      	bne.n	8000dfe <LL_USART_IsEnabledIT_RXNE+0x18>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <LL_USART_IsEnabledIT_RXNE+0x1a>
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_USART_ReceiveData8>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 fa2e 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e7c:	b598      	push	{r3, r4, r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8000e80:	481c      	ldr	r0, [pc, #112]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000e82:	f7ff ff76 	bl	8000d72 <LL_USART_IsActiveFlag_RXNE>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d015      	beq.n	8000eb8 <USART1_IRQHandler+0x3c>
 8000e8c:	4819      	ldr	r0, [pc, #100]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000e8e:	f7ff ffaa 	bl	8000de6 <LL_USART_IsEnabledIT_RXNE>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00f      	beq.n	8000eb8 <USART1_IRQHandler+0x3c>
	{
		rxBuffer[rxBufferCounter] = LL_USART_ReceiveData8(USART1);
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <USART1_IRQHandler+0x7c>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	461c      	mov	r4, r3
 8000e9e:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000ea0:	f7ff ffb4 	bl	8000e0c <LL_USART_ReceiveData8>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <USART1_IRQHandler+0x80>)
 8000eaa:	551a      	strb	r2, [r3, r4]
	    rxBufferCounter ++;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <USART1_IRQHandler+0x7c>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <USART1_IRQHandler+0x7c>)
 8000eb6:	801a      	strh	r2, [r3, #0]
	}

    /* Check UART errors */
    if (LL_USART_IsActiveFlag_ORE(USART1)) // overrun
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000eba:	f7ff ff47 	bl	8000d4c <LL_USART_IsActiveFlag_ORE>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <USART1_IRQHandler+0x4e>
        LL_USART_ClearFlag_ORE(USART1);
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000ec6:	f7ff ff81 	bl	8000dcc <LL_USART_ClearFlag_ORE>

    if (LL_USART_IsActiveFlag_FE(USART1)) // framing error
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000ecc:	f7ff ff2b 	bl	8000d26 <LL_USART_IsActiveFlag_FE>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <USART1_IRQHandler+0x60>
        LL_USART_ClearFlag_FE(USART1);
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000ed8:	f7ff ff6b 	bl	8000db2 <LL_USART_ClearFlag_FE>

    if (LL_USART_IsActiveFlag_PE(USART1)) // parity error
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000ede:	f7ff ff0f 	bl	8000d00 <LL_USART_IsActiveFlag_PE>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <USART1_IRQHandler+0x72>
        LL_USART_ClearFlag_PE(USART1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <USART1_IRQHandler+0x78>)
 8000eea:	f7ff ff55 	bl	8000d98 <LL_USART_ClearFlag_PE>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd98      	pop	{r3, r4, r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	2000009c 	.word	0x2000009c
 8000efc:	20000490 	.word	0x20000490

08000f00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <LL_AHB1_GRP1_EnableClock>:
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4313      	orrs	r3, r2
 800104a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000

08001068 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001072:	699a      	ldr	r2, [r3, #24]
 8001074:	4907      	ldr	r1, [pc, #28]	; (8001094 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4313      	orrs	r3, r2
 800107a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LL_APB2_GRP1_EnableClock+0x2c>)
 800107e:	699a      	ldr	r2, [r3, #24]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4013      	ands	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000

08001098 <LL_USART_Enable>:
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_USART_ConfigAsyncMode>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_USART_DisableIT_CTS>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3308      	adds	r3, #8
 80010f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	e853 3f00 	ldrex	r3, [r3]
 80010f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3308      	adds	r3, #8
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	61ba      	str	r2, [r7, #24]
 800110a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800110c:	6979      	ldr	r1, [r7, #20]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	e841 2300 	strex	r3, r2, [r1]
 8001114:	613b      	str	r3, [r7, #16]
   return(result);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e7      	bne.n	80010ec <LL_USART_DisableIT_CTS+0x8>
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001156:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800115a:	f7ff ff85 	bl	8001068 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800115e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001162:	f7ff ff69 	bl	8001038 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800116c:	2302      	movs	r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800117c:	2307      	movs	r3, #7
 800117e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f002 f874 	bl	8003274 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800118c:	f7ff feca 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 8001190:	4603      	mov	r3, r0
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff1a 	bl	8000fd0 <NVIC_EncodePriority>
 800119c:	4603      	mov	r3, r0
 800119e:	4619      	mov	r1, r3
 80011a0:	2025      	movs	r0, #37	; 0x25
 80011a2:	f7ff feeb 	bl	8000f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80011a6:	2025      	movs	r0, #37	; 0x25
 80011a8:	f7ff feca 	bl	8000f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011b0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011be:	230c      	movs	r3, #12
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_USART1_UART_Init+0xc4>)
 80011d2:	f002 fbd7 	bl	8003984 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_USART1_UART_Init+0xc4>)
 80011d8:	f7ff ff84 	bl	80010e4 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_USART1_UART_Init+0xc4>)
 80011de:	f7ff ff6b 	bl	80010b8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_USART1_UART_Init+0xc4>)
 80011e4:	f7ff ff58 	bl	8001098 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40013800 	.word	0x40013800

080011f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f8:	f7ff fe82 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	; (8001234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <LoopForever+0xe>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	; (8001240 <LoopForever+0x16>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f002 fc63 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001226:	f7ff fbc1 	bl	80009ac <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800122c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001238:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 800123c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001240:	200008ec 	.word	0x200008ec

08001244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_2_IRQHandler>
	...

08001248 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x28>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x28>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f001 faa7 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fd28 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40022000 	.word	0x40022000

08001274 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f001 fab1 	bl	80027fa <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f001 fa87 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	200008e8 	.word	0x200008e8

080012fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200008e8 	.word	0x200008e8

08001314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b09a      	sub	sp, #104	; 0x68
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e1c9      	b.n	80016c8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d176      	bne.n	8001434 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d152      	bne.n	80013f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7fe ffc9 	bl	8000300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d13b      	bne.n	80013f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f001 f847 	bl	8002410 <ADC_Disable>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	d12f      	bne.n	80013f4 <HAL_ADC_Init+0xe0>
 8001394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001398:	2b00      	cmp	r3, #0
 800139a:	d12b      	bne.n	80013f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013a4:	f023 0302 	bic.w	r3, r3, #2
 80013a8:	f043 0202 	orr.w	r2, r3, #2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013d0:	4b86      	ldr	r3, [pc, #536]	; (80015ec <HAL_ADC_Init+0x2d8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a86      	ldr	r2, [pc, #536]	; (80015f0 <HAL_ADC_Init+0x2dc>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9a      	lsrs	r2, r3, #18
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e6:	e002      	b.n	80013ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f9      	bne.n	80013e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800140c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001410:	d110      	bne.n	8001434 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f023 0312 	bic.w	r3, r3, #18
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	f040 8136 	bne.w	80016ae <HAL_ADC_Init+0x39a>
 8001442:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8131 	bne.w	80016ae <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8129 	bne.w	80016ae <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001464:	f043 0202 	orr.w	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001474:	d004      	beq.n	8001480 <HAL_ADC_Init+0x16c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a5e      	ldr	r2, [pc, #376]	; (80015f4 <HAL_ADC_Init+0x2e0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_ADC_Init+0x170>
 8001480:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <HAL_ADC_Init+0x2e4>)
 8001482:	e000      	b.n	8001486 <HAL_ADC_Init+0x172>
 8001484:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_ADC_Init+0x2e8>)
 8001486:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001490:	d102      	bne.n	8001498 <HAL_ADC_Init+0x184>
 8001492:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <HAL_ADC_Init+0x2e0>)
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e01a      	b.n	80014ce <HAL_ADC_Init+0x1ba>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <HAL_ADC_Init+0x2e0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d103      	bne.n	80014aa <HAL_ADC_Init+0x196>
 80014a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e011      	b.n	80014ce <HAL_ADC_Init+0x1ba>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a54      	ldr	r2, [pc, #336]	; (8001600 <HAL_ADC_Init+0x2ec>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d102      	bne.n	80014ba <HAL_ADC_Init+0x1a6>
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_ADC_Init+0x2f0>)
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e009      	b.n	80014ce <HAL_ADC_Init+0x1ba>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_ADC_Init+0x2f0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d102      	bne.n	80014ca <HAL_ADC_Init+0x1b6>
 80014c4:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <HAL_ADC_Init+0x2ec>)
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e001      	b.n	80014ce <HAL_ADC_Init+0x1ba>
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_ADC_Init+0x1da>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Init+0x1da>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_ADC_Init+0x1dc>
 80014ee:	2300      	movs	r3, #0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11c      	bne.n	800152e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d010      	beq.n	800151c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_ADC_Init+0x202>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Init+0x202>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_ADC_Init+0x204>
 8001516:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001518:	2b00      	cmp	r3, #0
 800151a:	d108      	bne.n	800152e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	431a      	orrs	r2, r3
 800152a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7e5b      	ldrb	r3, [r3, #25]
 8001532:	035b      	lsls	r3, r3, #13
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001538:	2a01      	cmp	r2, #1
 800153a:	d002      	beq.n	8001542 <HAL_ADC_Init+0x22e>
 800153c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001540:	e000      	b.n	8001544 <HAL_ADC_Init+0x230>
 8001542:	2200      	movs	r2, #0
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4313      	orrs	r3, r2
 8001552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001554:	4313      	orrs	r3, r2
 8001556:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d11b      	bne.n	800159a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7e5b      	ldrb	r3, [r3, #25]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	3b01      	subs	r3, #1
 8001570:	045a      	lsls	r2, r3, #17
 8001572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001574:	4313      	orrs	r3, r2
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	663b      	str	r3, [r7, #96]	; 0x60
 800157c:	e00d      	b.n	800159a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001586:	f043 0220 	orr.w	r2, r3, #32
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d03a      	beq.n	8001618 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <HAL_ADC_Init+0x2ec>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d004      	beq.n	80015b6 <HAL_ADC_Init+0x2a2>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <HAL_ADC_Init+0x2f0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d128      	bne.n	8001608 <HAL_ADC_Init+0x2f4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80015be:	d012      	beq.n	80015e6 <HAL_ADC_Init+0x2d2>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c8:	d00a      	beq.n	80015e0 <HAL_ADC_Init+0x2cc>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80015d2:	d002      	beq.n	80015da <HAL_ADC_Init+0x2c6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	e018      	b.n	800160c <HAL_ADC_Init+0x2f8>
 80015da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015de:	e015      	b.n	800160c <HAL_ADC_Init+0x2f8>
 80015e0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80015e4:	e012      	b.n	800160c <HAL_ADC_Init+0x2f8>
 80015e6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015ea:	e00f      	b.n	800160c <HAL_ADC_Init+0x2f8>
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	50000100 	.word	0x50000100
 80015f8:	50000300 	.word	0x50000300
 80015fc:	50000700 	.word	0x50000700
 8001600:	50000400 	.word	0x50000400
 8001604:	50000500 	.word	0x50000500
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001610:	4313      	orrs	r3, r2
 8001612:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001614:	4313      	orrs	r3, r2
 8001616:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d114      	bne.n	8001650 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001634:	f023 0302 	bic.w	r3, r3, #2
 8001638:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e1b      	ldrb	r3, [r3, #24]
 800163e:	039a      	lsls	r2, r3, #14
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4313      	orrs	r3, r2
 800164a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800164c:	4313      	orrs	r3, r2
 800164e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_ADC_Init+0x3bc>)
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001660:	430b      	orrs	r3, r1
 8001662:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10c      	bne.n	8001686 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f023 010f 	bic.w	r1, r3, #15
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
 8001684:	e007      	b.n	8001696 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 020f 	bic.w	r2, r2, #15
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f023 0303 	bic.w	r3, r3, #3
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
 80016ac:	e00a      	b.n	80016c4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f023 0312 	bic.w	r3, r3, #18
 80016b6:	f043 0210 	orr.w	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3768      	adds	r7, #104	; 0x68
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	fff0c007 	.word	0xfff0c007

080016d4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 80f9 	bne.w	80018e2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Start+0x2a>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e0f4      	b.n	80018e8 <HAL_ADC_Start+0x214>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fe1e 	bl	8002348 <ADC_Enable>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 80e0 	bne.w	80018d8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001734:	d004      	beq.n	8001740 <HAL_ADC_Start+0x6c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a6d      	ldr	r2, [pc, #436]	; (80018f0 <HAL_ADC_Start+0x21c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d106      	bne.n	800174e <HAL_ADC_Start+0x7a>
 8001740:	4b6c      	ldr	r3, [pc, #432]	; (80018f4 <HAL_ADC_Start+0x220>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2b00      	cmp	r3, #0
 800174a:	d010      	beq.n	800176e <HAL_ADC_Start+0x9a>
 800174c:	e005      	b.n	800175a <HAL_ADC_Start+0x86>
 800174e:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <HAL_ADC_Start+0x224>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_ADC_Start+0x9a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001762:	d004      	beq.n	800176e <HAL_ADC_Start+0x9a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a64      	ldr	r2, [pc, #400]	; (80018fc <HAL_ADC_Start+0x228>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d115      	bne.n	800179a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d036      	beq.n	80017f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001790:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001798:	e02d      	b.n	80017f6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ae:	d004      	beq.n	80017ba <HAL_ADC_Start+0xe6>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_ADC_Start+0x21c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10a      	bne.n	80017d0 <HAL_ADC_Start+0xfc>
 80017ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e008      	b.n	80017e2 <HAL_ADC_Start+0x10e>
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_ADC_Start+0x228>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001802:	d106      	bne.n	8001812 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f023 0206 	bic.w	r2, r3, #6
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
 8001810:	e002      	b.n	8001818 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	221c      	movs	r2, #28
 8001826:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001830:	d004      	beq.n	800183c <HAL_ADC_Start+0x168>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_ADC_Start+0x21c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d106      	bne.n	800184a <HAL_ADC_Start+0x176>
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_ADC_Start+0x220>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03e      	beq.n	80018c6 <HAL_ADC_Start+0x1f2>
 8001848:	e005      	b.n	8001856 <HAL_ADC_Start+0x182>
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_ADC_Start+0x224>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2b00      	cmp	r3, #0
 8001854:	d037      	beq.n	80018c6 <HAL_ADC_Start+0x1f2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185e:	d004      	beq.n	800186a <HAL_ADC_Start+0x196>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_ADC_Start+0x21c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d106      	bne.n	8001878 <HAL_ADC_Start+0x1a4>
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_ADC_Start+0x220>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	2b05      	cmp	r3, #5
 8001874:	d027      	beq.n	80018c6 <HAL_ADC_Start+0x1f2>
 8001876:	e005      	b.n	8001884 <HAL_ADC_Start+0x1b0>
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_ADC_Start+0x224>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	2b05      	cmp	r3, #5
 8001882:	d020      	beq.n	80018c6 <HAL_ADC_Start+0x1f2>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800188c:	d004      	beq.n	8001898 <HAL_ADC_Start+0x1c4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_ADC_Start+0x21c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d106      	bne.n	80018a6 <HAL_ADC_Start+0x1d2>
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_ADC_Start+0x220>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d010      	beq.n	80018c6 <HAL_ADC_Start+0x1f2>
 80018a4:	e005      	b.n	80018b2 <HAL_ADC_Start+0x1de>
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_ADC_Start+0x224>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	d009      	beq.n	80018c6 <HAL_ADC_Start+0x1f2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ba:	d004      	beq.n	80018c6 <HAL_ADC_Start+0x1f2>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_ADC_Start+0x228>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10f      	bne.n	80018e6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0204 	orr.w	r2, r2, #4
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	e006      	b.n	80018e6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80018e0:	e001      	b.n	80018e6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	50000100 	.word	0x50000100
 80018f4:	50000300 	.word	0x50000300
 80018f8:	50000700 	.word	0x50000700
 80018fc:	50000400 	.word	0x50000400

08001900 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_ADC_Stop+0x1a>
 8001916:	2302      	movs	r3, #2
 8001918:	e023      	b.n	8001962 <HAL_ADC_Stop+0x62>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001922:	216c      	movs	r1, #108	; 0x6c
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fdd9 	bl	80024dc <ADC_ConversionStop>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d111      	bne.n	8001958 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fd6b 	bl	8002410 <ADC_Disable>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b08      	cmp	r3, #8
 8001980:	d102      	bne.n	8001988 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001982:	2308      	movs	r3, #8
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e03a      	b.n	80019fe <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001990:	d004      	beq.n	800199c <HAL_ADC_PollForConversion+0x30>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a72      	ldr	r2, [pc, #456]	; (8001b60 <HAL_ADC_PollForConversion+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_ADC_PollForConversion+0x34>
 800199c:	4b71      	ldr	r3, [pc, #452]	; (8001b64 <HAL_ADC_PollForConversion+0x1f8>)
 800199e:	e000      	b.n	80019a2 <HAL_ADC_PollForConversion+0x36>
 80019a0:	4b71      	ldr	r3, [pc, #452]	; (8001b68 <HAL_ADC_PollForConversion+0x1fc>)
 80019a2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d112      	bne.n	80019d6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d11d      	bne.n	80019fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f043 0220 	orr.w	r2, r3, #32
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0bf      	b.n	8001b56 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f043 0220 	orr.w	r2, r3, #32
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0ad      	b.n	8001b56 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80019fa:	230c      	movs	r3, #12
 80019fc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a06:	d004      	beq.n	8001a12 <HAL_ADC_PollForConversion+0xa6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a54      	ldr	r2, [pc, #336]	; (8001b60 <HAL_ADC_PollForConversion+0x1f4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d106      	bne.n	8001a20 <HAL_ADC_PollForConversion+0xb4>
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_ADC_PollForConversion+0x1f8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d010      	beq.n	8001a40 <HAL_ADC_PollForConversion+0xd4>
 8001a1e:	e005      	b.n	8001a2c <HAL_ADC_PollForConversion+0xc0>
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_ADC_PollForConversion+0x1fc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <HAL_ADC_PollForConversion+0xd4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a34:	d004      	beq.n	8001a40 <HAL_ADC_PollForConversion+0xd4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <HAL_ADC_PollForConversion+0x200>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d104      	bne.n	8001a4a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	e00f      	b.n	8001a6a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a52:	d004      	beq.n	8001a5e <HAL_ADC_PollForConversion+0xf2>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a41      	ldr	r2, [pc, #260]	; (8001b60 <HAL_ADC_PollForConversion+0x1f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <HAL_ADC_PollForConversion+0xf8>
 8001a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_PollForConversion+0xfa>
 8001a64:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_ADC_PollForConversion+0x200>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001a6a:	f7ff fc47 	bl	80012fc <HAL_GetTick>
 8001a6e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a70:	e021      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d01d      	beq.n	8001ab6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x124>
 8001a80:	f7ff fc3c 	bl	80012fc <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d212      	bcs.n	8001ab6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f043 0204 	orr.w	r2, r3, #4
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0d6      	beq.n	8001a72 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d131      	bne.n	8001b42 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d12c      	bne.n	8001b42 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d125      	bne.n	8001b42 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d112      	bne.n	8001b2a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d112      	bne.n	8001b42 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
 8001b28:	e00b      	b.n	8001b42 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f043 0220 	orr.w	r2, r3, #32
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d103      	bne.n	8001b54 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	50000100 	.word	0x50000100
 8001b64:	50000300 	.word	0x50000300
 8001b68:	50000700 	.word	0x50000700
 8001b6c:	50000400 	.word	0x50000400

08001b70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b09b      	sub	sp, #108	; 0x6c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x22>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e2ca      	b.n	8002144 <HAL_ADC_ConfigChannel+0x5b8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 82ae 	bne.w	8002122 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d81c      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	461a      	mov	r2, r3
 8001be2:	231f      	movs	r3, #31
 8001be4:	4093      	lsls	r3, r2
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4019      	ands	r1, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
 8001c06:	e063      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d81e      	bhi.n	8001c4e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	3b1e      	subs	r3, #30
 8001c24:	221f      	movs	r2, #31
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4019      	ands	r1, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	3b1e      	subs	r3, #30
 8001c40:	fa00 f203 	lsl.w	r2, r0, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4c:	e040      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b0e      	cmp	r3, #14
 8001c54:	d81e      	bhi.n	8001c94 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	3b3c      	subs	r3, #60	; 0x3c
 8001c6a:	221f      	movs	r2, #31
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4019      	ands	r1, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	3b3c      	subs	r3, #60	; 0x3c
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
 8001c92:	e01d      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	3b5a      	subs	r3, #90	; 0x5a
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4019      	ands	r1, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	3b5a      	subs	r3, #90	; 0x5a
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 80e5 	bne.w	8001eaa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d91c      	bls.n	8001d22 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6999      	ldr	r1, [r3, #24]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b1e      	subs	r3, #30
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4019      	ands	r1, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6898      	ldr	r0, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	3b1e      	subs	r3, #30
 8001d14:	fa00 f203 	lsl.w	r2, r0, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	619a      	str	r2, [r3, #24]
 8001d20:	e019      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6959      	ldr	r1, [r3, #20]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	2207      	movs	r2, #7
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6898      	ldr	r0, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d84f      	bhi.n	8001e18 <HAL_ADC_ConfigChannel+0x28c>
 8001d78:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <HAL_ADC_ConfigChannel+0x1f4>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001db3 	.word	0x08001db3
 8001d88:	08001dd5 	.word	0x08001dd5
 8001d8c:	08001df7 	.word	0x08001df7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d96:	4b9a      	ldr	r3, [pc, #616]	; (8002000 <HAL_ADC_ConfigChannel+0x474>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	0691      	lsls	r1, r2, #26
 8001da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001da2:	430a      	orrs	r2, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001db0:	e07e      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001db8:	4b91      	ldr	r3, [pc, #580]	; (8002000 <HAL_ADC_ConfigChannel+0x474>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	0691      	lsls	r1, r2, #26
 8001dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dd0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dd2:	e06d      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_ADC_ConfigChannel+0x474>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	0691      	lsls	r1, r2, #26
 8001de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001de6:	430a      	orrs	r2, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001df2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001df4:	e05c      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dfc:	4b80      	ldr	r3, [pc, #512]	; (8002000 <HAL_ADC_ConfigChannel+0x474>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	0691      	lsls	r1, r2, #26
 8001e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e14:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e16:	e04b      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	069b      	lsls	r3, r3, #26
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	069b      	lsls	r3, r3, #26
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d107      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e5e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e82:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	069b      	lsls	r3, r3, #26
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10a      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ea6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ea8:	e001      	b.n	8001eae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001eae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d108      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x344>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x344>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x346>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8130 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d00f      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	400a      	ands	r2, r1
 8001efa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001efe:	e049      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	d91c      	bls.n	8001f5c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6999      	ldr	r1, [r3, #24]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1b      	subs	r3, #27
 8001f34:	2207      	movs	r2, #7
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4019      	ands	r1, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6898      	ldr	r0, [r3, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b1b      	subs	r3, #27
 8001f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	619a      	str	r2, [r3, #24]
 8001f5a:	e01b      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6959      	ldr	r1, [r3, #20]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	2207      	movs	r2, #7
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4019      	ands	r1, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6898      	ldr	r0, [r3, #8]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f9c:	d004      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x41c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_ADC_ConfigChannel+0x478>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x420>
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_ADC_ConfigChannel+0x47c>)
 8001faa:	e000      	b.n	8001fae <HAL_ADC_ConfigChannel+0x422>
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_ADC_ConfigChannel+0x480>)
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d105      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d015      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001fc8:	2b11      	cmp	r3, #17
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001fdc:	2b12      	cmp	r3, #18
 8001fde:	f040 80ab 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80a4 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff8:	d10a      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x484>
 8001ffa:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_ADC_ConfigChannel+0x478>)
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e022      	b.n	8002046 <HAL_ADC_ConfigChannel+0x4ba>
 8002000:	83fff000 	.word	0x83fff000
 8002004:	50000100 	.word	0x50000100
 8002008:	50000300 	.word	0x50000300
 800200c:	50000700 	.word	0x50000700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_ADC_ConfigChannel+0x5c4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d103      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x496>
 800201a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e011      	b.n	8002046 <HAL_ADC_ConfigChannel+0x4ba>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4b      	ldr	r2, [pc, #300]	; (8002154 <HAL_ADC_ConfigChannel+0x5c8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d102      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x4a6>
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_ADC_ConfigChannel+0x5cc>)
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e009      	b.n	8002046 <HAL_ADC_ConfigChannel+0x4ba>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a48      	ldr	r2, [pc, #288]	; (8002158 <HAL_ADC_ConfigChannel+0x5cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d102      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x4b6>
 800203c:	4b45      	ldr	r3, [pc, #276]	; (8002154 <HAL_ADC_ConfigChannel+0x5c8>)
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e001      	b.n	8002046 <HAL_ADC_ConfigChannel+0x4ba>
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d108      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x4da>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x4da>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_ADC_ConfigChannel+0x4dc>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d150      	bne.n	800210e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800206c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_ADC_ConfigChannel+0x502>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x502>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_ADC_ConfigChannel+0x504>
 800208e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002090:	2b00      	cmp	r3, #0
 8002092:	d13c      	bne.n	800210e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b10      	cmp	r3, #16
 800209a:	d11d      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x54c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a4:	d118      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80020a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_ADC_ConfigChannel+0x5d0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <HAL_ADC_ConfigChannel+0x5d4>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9a      	lsrs	r2, r3, #18
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020d6:	e02e      	b.n	8002136 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d10b      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x56c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e8:	d106      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80020f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020f6:	e01e      	b.n	8002136 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b12      	cmp	r3, #18
 80020fe:	d11a      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800210c:	e013      	b.n	8002136 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002120:	e00a      	b.n	8002138 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002134:	e000      	b.n	8002138 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002136:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002140:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002144:	4618      	mov	r0, r3
 8002146:	376c      	adds	r7, #108	; 0x6c
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	50000100 	.word	0x50000100
 8002154:	50000400 	.word	0x50000400
 8002158:	50000500 	.word	0x50000500
 800215c:	20000000 	.word	0x20000000
 8002160:	431bde83 	.word	0x431bde83

08002164 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002164:	b480      	push	{r7}
 8002166:	b099      	sub	sp, #100	; 0x64
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217c:	d102      	bne.n	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	e01a      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6a      	ldr	r2, [pc, #424]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d103      	bne.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800218e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	e011      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a67      	ldr	r2, [pc, #412]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d102      	bne.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	e009      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a64      	ldr	r2, [pc, #400]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d102      	bne.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80021b0:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	e001      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0b0      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e0a9      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 808d 	bne.w	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8086 	bne.w	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002200:	d004      	beq.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a4b      	ldr	r2, [pc, #300]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800220e:	e000      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002212:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d040      	beq.n	800229e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800221c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800222e:	035b      	lsls	r3, r3, #13
 8002230:	430b      	orrs	r3, r1
 8002232:	431a      	orrs	r2, r3
 8002234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002236:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d108      	bne.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d15c      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800227a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d14b      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002288:	f023 030f 	bic.w	r3, r3, #15
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	6811      	ldr	r1, [r2, #0]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	6892      	ldr	r2, [r2, #8]
 8002294:	430a      	orrs	r2, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800229a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800229c:	e03c      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800229e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80022ca:	2300      	movs	r3, #0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d123      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80022ec:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d112      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80022f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022fa:	f023 030f 	bic.w	r3, r3, #15
 80022fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002300:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002302:	e009      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002316:	e000      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002318:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002326:	4618      	mov	r0, r3
 8002328:	3764      	adds	r7, #100	; 0x64
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	50000100 	.word	0x50000100
 8002338:	50000400 	.word	0x50000400
 800233c:	50000500 	.word	0x50000500
 8002340:	50000300 	.word	0x50000300
 8002344:	50000700 	.word	0x50000700

08002348 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d108      	bne.n	8002374 <ADC_Enable+0x2c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <ADC_Enable+0x2c>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <ADC_Enable+0x2e>
 8002374:	2300      	movs	r3, #0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d143      	bne.n	8002402 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <ADC_Enable+0xc4>)
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e02f      	b.n	8002404 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80023b4:	f7fe ffa2 	bl	80012fc <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ba:	e01b      	b.n	80023f4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023bc:	f7fe ff9e 	bl	80012fc <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d914      	bls.n	80023f4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d00d      	beq.n	80023f4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f043 0210 	orr.w	r2, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e007      	b.n	8002404 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d1dc      	bne.n	80023bc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	8000003f 	.word	0x8000003f

08002410 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <ADC_Disable+0x2c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <ADC_Disable+0x2c>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <ADC_Disable+0x2e>
 800243c:	2300      	movs	r3, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d047      	beq.n	80024d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030d 	and.w	r3, r3, #13
 800244c:	2b01      	cmp	r3, #1
 800244e:	d10f      	bne.n	8002470 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0202 	orr.w	r2, r2, #2
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2203      	movs	r2, #3
 8002466:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002468:	f7fe ff48 	bl	80012fc <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800246e:	e029      	b.n	80024c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e023      	b.n	80024d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800248c:	f7fe ff36 	bl	80012fc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d914      	bls.n	80024c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10d      	bne.n	80024c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0210 	orr.w	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e007      	b.n	80024d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d0dc      	beq.n	800248c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 809b 	beq.w	8002638 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002510:	d12a      	bne.n	8002568 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002516:	2b01      	cmp	r3, #1
 8002518:	d126      	bne.n	8002568 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800251e:	2b01      	cmp	r3, #1
 8002520:	d122      	bne.n	8002568 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002522:	230c      	movs	r3, #12
 8002524:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002526:	e014      	b.n	8002552 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4a46      	ldr	r2, [pc, #280]	; (8002644 <ADC_ConversionStop+0x168>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d90d      	bls.n	800254c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0210 	orr.w	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e076      	b.n	800263a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	3301      	adds	r3, #1
 8002550:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d1e3      	bne.n	8002528 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b60      	cmp	r3, #96	; 0x60
 800256c:	d015      	beq.n	800259a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d10e      	bne.n	800259a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002586:	2b00      	cmp	r3, #0
 8002588:	d107      	bne.n	800259a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0210 	orr.w	r2, r2, #16
 8002598:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d015      	beq.n	80025cc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d10e      	bne.n	80025cc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0220 	orr.w	r2, r2, #32
 80025ca:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b60      	cmp	r3, #96	; 0x60
 80025d0:	d005      	beq.n	80025de <ADC_ConversionStop+0x102>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b6c      	cmp	r3, #108	; 0x6c
 80025d6:	d105      	bne.n	80025e4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80025d8:	230c      	movs	r3, #12
 80025da:	617b      	str	r3, [r7, #20]
        break;
 80025dc:	e005      	b.n	80025ea <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80025de:	2308      	movs	r3, #8
 80025e0:	617b      	str	r3, [r7, #20]
        break;
 80025e2:	e002      	b.n	80025ea <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80025e4:	2304      	movs	r3, #4
 80025e6:	617b      	str	r3, [r7, #20]
        break;
 80025e8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025ea:	f7fe fe87 	bl	80012fc <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80025f0:	e01b      	b.n	800262a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025f2:	f7fe fe83 	bl	80012fc <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b0b      	cmp	r3, #11
 80025fe:	d914      	bls.n	800262a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e007      	b.n	800263a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1dc      	bne.n	80025f2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	000993ff 	.word	0x000993ff

08002648 <__NVIC_SetPriorityGrouping>:
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_SetPriority>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff47 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff5c 	bl	8002690 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff8e 	bl	8002700 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5d 	bl	80026ac <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffb0 	bl	8002768 <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e054      	b.n	80028d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7f5b      	ldrb	r3, [r3, #29]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fd fdc0 	bl	80003bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	791b      	ldrb	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10c      	bne.n	8002864 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_CRC_Init+0xc4>)
 8002850:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0218 	bic.w	r2, r2, #24
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	e00c      	b.n	800287e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	461a      	mov	r2, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f948 	bl	8002b04 <HAL_CRCEx_Polynomial_Set>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e028      	b.n	80028d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	795b      	ldrb	r3, [r3, #5]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 32ff 	mov.w	r2, #4294967295
 800288e:	611a      	str	r2, [r3, #16]
 8002890:	e004      	b.n	800289c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6912      	ldr	r2, [r2, #16]
 800289a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	04c11db7 	.word	0x04c11db7

080028dc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2202      	movs	r2, #2
 80028f0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d006      	beq.n	8002918 <HAL_CRC_Calculate+0x3c>
 800290a:	2b03      	cmp	r3, #3
 800290c:	d829      	bhi.n	8002962 <HAL_CRC_Calculate+0x86>
 800290e:	2b01      	cmp	r3, #1
 8002910:	d019      	beq.n	8002946 <HAL_CRC_Calculate+0x6a>
 8002912:	2b02      	cmp	r3, #2
 8002914:	d01e      	beq.n	8002954 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002916:	e024      	b.n	8002962 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e00a      	b.n	8002934 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	441a      	add	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d3f0      	bcc.n	800291e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	613b      	str	r3, [r7, #16]
      break;
 8002944:	e00e      	b.n	8002964 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f812 	bl	8002974 <CRC_Handle_8>
 8002950:	6138      	str	r0, [r7, #16]
      break;
 8002952:	e007      	b.n	8002964 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f899 	bl	8002a90 <CRC_Handle_16>
 800295e:	6138      	str	r0, [r7, #16]
      break;
 8002960:	e000      	b.n	8002964 <HAL_CRC_Calculate+0x88>
      break;
 8002962:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800296a:	693b      	ldr	r3, [r7, #16]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e023      	b.n	80029ce <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4413      	add	r3, r2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	3301      	adds	r3, #1
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	440b      	add	r3, r1
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80029a0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	440b      	add	r3, r1
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80029b0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3303      	adds	r3, #3
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	440b      	add	r3, r1
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80029c4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80029c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3d6      	bcc.n	8002986 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04d      	beq.n	8002a7e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	4413      	add	r3, r2
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d116      	bne.n	8002a34 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	3301      	adds	r3, #1
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	440b      	add	r3, r1
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	8b7a      	ldrh	r2, [r7, #26]
 8002a32:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d11f      	bne.n	8002a7e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4413      	add	r3, r2
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	3301      	adds	r3, #1
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	440b      	add	r3, r1
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	8b7a      	ldrh	r2, [r7, #26]
 8002a6a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3724      	adds	r7, #36	; 0x24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e013      	b.n	8002aca <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3e6      	bcc.n	8002aa2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	4413      	add	r3, r2
 8002aec:	881a      	ldrh	r2, [r3, #0]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b14:	231f      	movs	r3, #31
 8002b16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
 8002b26:	e063      	b.n	8002bf0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b28:	bf00      	nop
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	613a      	str	r2, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_CRCEx_Polynomial_Set+0x44>
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b18      	cmp	r3, #24
 8002b4c:	d846      	bhi.n	8002bdc <HAL_CRCEx_Polynomial_Set+0xd8>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002be3 	.word	0x08002be3
 8002b58:	08002bdd 	.word	0x08002bdd
 8002b5c:	08002bdd 	.word	0x08002bdd
 8002b60:	08002bdd 	.word	0x08002bdd
 8002b64:	08002bdd 	.word	0x08002bdd
 8002b68:	08002bdd 	.word	0x08002bdd
 8002b6c:	08002bdd 	.word	0x08002bdd
 8002b70:	08002bdd 	.word	0x08002bdd
 8002b74:	08002bd1 	.word	0x08002bd1
 8002b78:	08002bdd 	.word	0x08002bdd
 8002b7c:	08002bdd 	.word	0x08002bdd
 8002b80:	08002bdd 	.word	0x08002bdd
 8002b84:	08002bdd 	.word	0x08002bdd
 8002b88:	08002bdd 	.word	0x08002bdd
 8002b8c:	08002bdd 	.word	0x08002bdd
 8002b90:	08002bdd 	.word	0x08002bdd
 8002b94:	08002bc5 	.word	0x08002bc5
 8002b98:	08002bdd 	.word	0x08002bdd
 8002b9c:	08002bdd 	.word	0x08002bdd
 8002ba0:	08002bdd 	.word	0x08002bdd
 8002ba4:	08002bdd 	.word	0x08002bdd
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002bdd 	.word	0x08002bdd
 8002bb0:	08002bdd 	.word	0x08002bdd
 8002bb4:	08002bb9 	.word	0x08002bb9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d913      	bls.n	8002be6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002bc2:	e010      	b.n	8002be6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b07      	cmp	r3, #7
 8002bc8:	d90f      	bls.n	8002bea <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002bce:	e00c      	b.n	8002bea <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	d90b      	bls.n	8002bee <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002bda:	e008      	b.n	8002bee <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
        break;
 8002be0:	e006      	b.n	8002bf0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002be2:	bf00      	nop
 8002be4:	e004      	b.n	8002bf0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002bee:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 0118 	bic.w	r1, r3, #24
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	e154      	b.n	8002eda <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8146 	beq.w	8002ed4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d005      	beq.n	8002c60 <HAL_GPIO_Init+0x40>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d130      	bne.n	8002cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c96:	2201      	movs	r2, #1
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0201 	and.w	r2, r3, #1
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d017      	beq.n	8002cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d123      	bne.n	8002d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	6939      	ldr	r1, [r7, #16]
 8002d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a0 	beq.w	8002ed4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_GPIO_Init+0x2d8>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	4a57      	ldr	r2, [pc, #348]	; (8002ef8 <HAL_GPIO_Init+0x2d8>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <HAL_GPIO_Init+0x2d8>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dac:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_GPIO_Init+0x2dc>)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dd6:	d019      	beq.n	8002e0c <HAL_GPIO_Init+0x1ec>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a49      	ldr	r2, [pc, #292]	; (8002f00 <HAL_GPIO_Init+0x2e0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_GPIO_Init+0x1e8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a48      	ldr	r2, [pc, #288]	; (8002f04 <HAL_GPIO_Init+0x2e4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00d      	beq.n	8002e04 <HAL_GPIO_Init+0x1e4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a47      	ldr	r2, [pc, #284]	; (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <HAL_GPIO_Init+0x1e0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a46      	ldr	r2, [pc, #280]	; (8002f0c <HAL_GPIO_Init+0x2ec>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_GPIO_Init+0x1dc>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e008      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002dfc:	2305      	movs	r3, #5
 8002dfe:	e006      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e00:	2303      	movs	r3, #3
 8002e02:	e004      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	4093      	lsls	r3, r2
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e1e:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_GPIO_Init+0x2dc>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2c:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e50:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e56:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e7a:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f aea3 	bne.w	8002c30 <HAL_GPIO_Init+0x10>
  }
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	48000c00 	.word	0x48000c00
 8002f0c:	48001000 	.word	0x48001000
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e09d      	b.n	8003062 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f36:	d009      	beq.n	8002f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
 8002f3e:	e005      	b.n	8002f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fe64 	bl	8000c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f8c:	d902      	bls.n	8002f94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e002      	b.n	8002f9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fa2:	d007      	beq.n	8002fb4 <HAL_SPI_Init+0xa0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fac:	d002      	beq.n	8002fb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	f003 0204 	and.w	r2, r3, #4
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003030:	ea42 0103 	orr.w	r1, r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <LL_GPIO_SetPinMode>:
{
 800306a:	b480      	push	{r7}
 800306c:	b089      	sub	sp, #36	; 0x24
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	613b      	str	r3, [r7, #16]
  return result;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	2103      	movs	r1, #3
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	401a      	ands	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	61bb      	str	r3, [r7, #24]
  return result;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]
}
 80030bc:	bf00      	nop
 80030be:	3724      	adds	r7, #36	; 0x24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_GPIO_SetPinOutputType>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	43db      	mvns	r3, r3
 80030dc:	401a      	ands	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	605a      	str	r2, [r3, #4]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_GPIO_SetPinSpeed>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	613b      	str	r3, [r7, #16]
  return result;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2103      	movs	r1, #3
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	401a      	ands	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	61bb      	str	r3, [r7, #24]
  return result;
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	609a      	str	r2, [r3, #8]
}
 800314a:	bf00      	nop
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_GPIO_SetPinPull>:
{
 8003156:	b480      	push	{r7}
 8003158:	b089      	sub	sp, #36	; 0x24
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	613b      	str	r3, [r7, #16]
  return result;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2103      	movs	r1, #3
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	401a      	ands	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	61bb      	str	r3, [r7, #24]
  return result;
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	60da      	str	r2, [r3, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3724      	adds	r7, #36	; 0x24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_GPIO_SetAFPin_0_7>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	613b      	str	r3, [r7, #16]
  return result;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	210f      	movs	r1, #15
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	61bb      	str	r3, [r7, #24]
  return result;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	3724      	adds	r7, #36	; 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_GPIO_SetAFPin_8_15>:
{
 8003212:	b480      	push	{r7}
 8003214:	b089      	sub	sp, #36	; 0x24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	613b      	str	r3, [r7, #16]
  return result;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	210f      	movs	r1, #15
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	401a      	ands	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	61bb      	str	r3, [r7, #24]
  return result;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	431a      	orrs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003268:	bf00      	nop
 800326a:	3724      	adds	r7, #36	; 0x24
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	613b      	str	r3, [r7, #16]
  return result;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003296:	e051      	b.n	800333c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d043      	beq.n	8003336 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d003      	beq.n	80032be <LL_GPIO_Init+0x4a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d10e      	bne.n	80032dc <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	461a      	mov	r2, r3
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ff16 	bl	80030f8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fef6 	bl	80030c8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	461a      	mov	r2, r3
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff36 	bl	8003156 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d11a      	bne.n	8003328 <LL_GPIO_Init+0xb4>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	60bb      	str	r3, [r7, #8]
  return result;
 80032fe:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b07      	cmp	r3, #7
 8003308:	d807      	bhi.n	800331a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	461a      	mov	r2, r3
 8003310:	69b9      	ldr	r1, [r7, #24]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ff4e 	bl	80031b4 <LL_GPIO_SetAFPin_0_7>
 8003318:	e006      	b.n	8003328 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	461a      	mov	r2, r3
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff75 	bl	8003212 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	461a      	mov	r2, r3
 800332e:	69b9      	ldr	r1, [r7, #24]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff fe9a 	bl	800306a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3301      	adds	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1a6      	bne.n	8003298 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <LL_RCC_HSI_IsReady>:
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <LL_RCC_HSI_IsReady+0x20>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40021000 	.word	0x40021000

08003378 <LL_RCC_LSE_IsReady>:
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <LL_RCC_LSE_IsReady+0x20>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40021000 	.word	0x40021000

0800339c <LL_RCC_GetSysClkSource>:
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <LL_RCC_GetSysClkSource+0x18>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 030c 	and.w	r3, r3, #12
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000

080033b8 <LL_RCC_GetAHBPrescaler>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <LL_RCC_GetAHBPrescaler+0x18>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000

080033d4 <LL_RCC_GetAPB1Prescaler>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <LL_RCC_GetAPB1Prescaler+0x18>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000

080033f0 <LL_RCC_GetAPB2Prescaler>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <LL_RCC_GetAPB2Prescaler+0x18>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000

0800340c <LL_RCC_GetUSARTClockSource>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <LL_RCC_GetUSARTClockSource+0x28>)
 8003416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003418:	2103      	movs	r1, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	401a      	ands	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4313      	orrs	r3, r2
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40021000 	.word	0x40021000

08003438 <LL_RCC_GetUARTClockSource>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, UARTx) | (UARTx >> 8U));
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <LL_RCC_GetUARTClockSource+0x24>)
 8003442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	401a      	ands	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	4313      	orrs	r3, r2
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000

08003460 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <LL_RCC_PLL_GetMainSource+0x18>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000

0800347c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <LL_RCC_PLL_GetPrediv+0x18>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	f003 030f 	and.w	r3, r3, #15
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000

080034b4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d12d      	bne.n	8003522 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ffa0 	bl	800340c <LL_RCC_GetUSARTClockSource>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d00a      	beq.n	80034e8 <LL_RCC_GetUSARTClockFreq+0x34>
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d819      	bhi.n	800350a <LL_RCC_GetUSARTClockFreq+0x56>
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d002      	beq.n	80034e0 <LL_RCC_GetUSARTClockFreq+0x2c>
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d00c      	beq.n	80034f8 <LL_RCC_GetUSARTClockFreq+0x44>
 80034de:	e014      	b.n	800350a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80034e0:	f000 f93c 	bl	800375c <RCC_GetSystemClockFreq>
 80034e4:	60f8      	str	r0, [r7, #12]
        break;
 80034e6:	e021      	b.n	800352c <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80034e8:	f7ff ff34 	bl	8003354 <LL_RCC_HSI_IsReady>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d019      	beq.n	8003526 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80034f2:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80034f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80034f6:	e016      	b.n	8003526 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80034f8:	f7ff ff3e 	bl	8003378 <LL_RCC_LSE_IsReady>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d013      	beq.n	800352a <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8003502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003506:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003508:	e00f      	b.n	800352a <LL_RCC_GetUSARTClockFreq+0x76>
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800350a:	f000 f927 	bl	800375c <RCC_GetSystemClockFreq>
 800350e:	4603      	mov	r3, r0
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f94b 	bl	80037ac <RCC_GetHCLKClockFreq>
 8003516:	4603      	mov	r3, r0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f971 	bl	8003800 <RCC_GetPCLK2ClockFreq>
 800351e:	60f8      	str	r0, [r7, #12]
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8003520:	e004      	b.n	800352c <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800352a:	bf00      	nop
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b10      	cmp	r3, #16
 8003530:	d131      	bne.n	8003596 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff6a 	bl	800340c <LL_RCC_GetUSARTClockSource>
 8003538:	4603      	mov	r3, r0
 800353a:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <LL_RCC_GetUSARTClockFreq+0x170>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00d      	beq.n	800355c <LL_RCC_GetUSARTClockFreq+0xa8>
 8003540:	4a38      	ldr	r2, [pc, #224]	; (8003624 <LL_RCC_GetUSARTClockFreq+0x170>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d81b      	bhi.n	800357e <LL_RCC_GetUSARTClockFreq+0xca>
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <LL_RCC_GetUSARTClockFreq+0x174>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <LL_RCC_GetUSARTClockFreq+0xa0>
 800354c:	4a37      	ldr	r2, [pc, #220]	; (800362c <LL_RCC_GetUSARTClockFreq+0x178>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00c      	beq.n	800356c <LL_RCC_GetUSARTClockFreq+0xb8>
 8003552:	e014      	b.n	800357e <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003554:	f000 f902 	bl	800375c <RCC_GetSystemClockFreq>
 8003558:	60f8      	str	r0, [r7, #12]
        break;
 800355a:	e021      	b.n	80035a0 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800355c:	f7ff fefa 	bl	8003354 <LL_RCC_HSI_IsReady>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <LL_RCC_GetUSARTClockFreq+0xe6>
        {
          usart_frequency = HSI_VALUE;
 8003566:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <LL_RCC_GetUSARTClockFreq+0x16c>)
 8003568:	60fb      	str	r3, [r7, #12]
        }
        break;
 800356a:	e016      	b.n	800359a <LL_RCC_GetUSARTClockFreq+0xe6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800356c:	f7ff ff04 	bl	8003378 <LL_RCC_LSE_IsReady>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d013      	beq.n	800359e <LL_RCC_GetUSARTClockFreq+0xea>
        {
          usart_frequency = LSE_VALUE;
 8003576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800357c:	e00f      	b.n	800359e <LL_RCC_GetUSARTClockFreq+0xea>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800357e:	f000 f8ed 	bl	800375c <RCC_GetSystemClockFreq>
 8003582:	4603      	mov	r3, r0
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f911 	bl	80037ac <RCC_GetHCLKClockFreq>
 800358a:	4603      	mov	r3, r0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f923 	bl	80037d8 <RCC_GetPCLK1ClockFreq>
 8003592:	60f8      	str	r0, [r7, #12]
        break;
 8003594:	e004      	b.n	80035a0 <LL_RCC_GetUSARTClockFreq+0xec>
    }
  }
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <LL_RCC_GetUSARTClockFreq+0xec>
        break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <LL_RCC_GetUSARTClockFreq+0xec>
        break;
 800359e:	bf00      	nop
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b12      	cmp	r3, #18
 80035a4:	d131      	bne.n	800360a <LL_RCC_GetUSARTClockFreq+0x156>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff30 	bl	800340c <LL_RCC_GetUSARTClockSource>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00d      	beq.n	80035d0 <LL_RCC_GetUSARTClockFreq+0x11c>
 80035b4:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d81b      	bhi.n	80035f2 <LL_RCC_GetUSARTClockFreq+0x13e>
 80035ba:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <LL_RCC_GetUSARTClockFreq+0x180>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <LL_RCC_GetUSARTClockFreq+0x114>
 80035c0:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <LL_RCC_GetUSARTClockFreq+0x184>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00c      	beq.n	80035e0 <LL_RCC_GetUSARTClockFreq+0x12c>
 80035c6:	e014      	b.n	80035f2 <LL_RCC_GetUSARTClockFreq+0x13e>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80035c8:	f000 f8c8 	bl	800375c <RCC_GetSystemClockFreq>
 80035cc:	60f8      	str	r0, [r7, #12]
        break;
 80035ce:	e021      	b.n	8003614 <LL_RCC_GetUSARTClockFreq+0x160>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80035d0:	f7ff fec0 	bl	8003354 <LL_RCC_HSI_IsReady>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d019      	beq.n	800360e <LL_RCC_GetUSARTClockFreq+0x15a>
        {
          usart_frequency = HSI_VALUE;
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80035dc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035de:	e016      	b.n	800360e <LL_RCC_GetUSARTClockFreq+0x15a>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80035e0:	f7ff feca 	bl	8003378 <LL_RCC_LSE_IsReady>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d013      	beq.n	8003612 <LL_RCC_GetUSARTClockFreq+0x15e>
        {
          usart_frequency = LSE_VALUE;
 80035ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035f0:	e00f      	b.n	8003612 <LL_RCC_GetUSARTClockFreq+0x15e>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035f2:	f000 f8b3 	bl	800375c <RCC_GetSystemClockFreq>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f8d7 	bl	80037ac <RCC_GetHCLKClockFreq>
 80035fe:	4603      	mov	r3, r0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f8e9 	bl	80037d8 <RCC_GetPCLK1ClockFreq>
 8003606:	60f8      	str	r0, [r7, #12]
        break;
 8003608:	e004      	b.n	8003614 <LL_RCC_GetUSARTClockFreq+0x160>
    }
  }
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <LL_RCC_GetUSARTClockFreq+0x160>
        break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <LL_RCC_GetUSARTClockFreq+0x160>
        break;
 8003612:	bf00      	nop

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003614:	68fb      	ldr	r3, [r7, #12]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	007a1200 	.word	0x007a1200
 8003624:	10030000 	.word	0x10030000
 8003628:	10010000 	.word	0x10010000
 800362c:	10020000 	.word	0x10020000
 8003630:	120c0000 	.word	0x120c0000
 8003634:	12040000 	.word	0x12040000
 8003638:	12080000 	.word	0x12080000

0800363c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(UART4)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800364e:	d131      	bne.n	80036b4 <LL_RCC_GetUARTClockFreq+0x78>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fef1 	bl	8003438 <LL_RCC_GetUARTClockSource>
 8003656:	4603      	mov	r3, r0
 8003658:	4a39      	ldr	r2, [pc, #228]	; (8003740 <LL_RCC_GetUARTClockFreq+0x104>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00d      	beq.n	800367a <LL_RCC_GetUARTClockFreq+0x3e>
 800365e:	4a38      	ldr	r2, [pc, #224]	; (8003740 <LL_RCC_GetUARTClockFreq+0x104>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d81b      	bhi.n	800369c <LL_RCC_GetUARTClockFreq+0x60>
 8003664:	4a37      	ldr	r2, [pc, #220]	; (8003744 <LL_RCC_GetUARTClockFreq+0x108>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <LL_RCC_GetUARTClockFreq+0x36>
 800366a:	4a37      	ldr	r2, [pc, #220]	; (8003748 <LL_RCC_GetUARTClockFreq+0x10c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00c      	beq.n	800368a <LL_RCC_GetUARTClockFreq+0x4e>
 8003670:	e014      	b.n	800369c <LL_RCC_GetUARTClockFreq+0x60>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003672:	f000 f873 	bl	800375c <RCC_GetSystemClockFreq>
 8003676:	60f8      	str	r0, [r7, #12]
        break;
 8003678:	e021      	b.n	80036be <LL_RCC_GetUARTClockFreq+0x82>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800367a:	f7ff fe6b 	bl	8003354 <LL_RCC_HSI_IsReady>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d019      	beq.n	80036b8 <LL_RCC_GetUARTClockFreq+0x7c>
        {
          uart_frequency = HSI_VALUE;
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <LL_RCC_GetUARTClockFreq+0x110>)
 8003686:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003688:	e016      	b.n	80036b8 <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800368a:	f7ff fe75 	bl	8003378 <LL_RCC_LSE_IsReady>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <LL_RCC_GetUARTClockFreq+0x80>
        {
          uart_frequency = LSE_VALUE;
 8003694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003698:	60fb      	str	r3, [r7, #12]
        }
        break;
 800369a:	e00f      	b.n	80036bc <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800369c:	f000 f85e 	bl	800375c <RCC_GetSystemClockFreq>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f882 	bl	80037ac <RCC_GetHCLKClockFreq>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f894 	bl	80037d8 <RCC_GetPCLK1ClockFreq>
 80036b0:	60f8      	str	r0, [r7, #12]
        break;
 80036b2:	e004      	b.n	80036be <LL_RCC_GetUARTClockFreq+0x82>
    }
  }
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <LL_RCC_GetUARTClockFreq+0x82>
        break;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <LL_RCC_GetUARTClockFreq+0x82>
        break;
 80036bc:	bf00      	nop
#endif /* UART4 */

#if defined(UART5)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036c4:	d131      	bne.n	800372a <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff feb6 	bl	8003438 <LL_RCC_GetUARTClockSource>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4a20      	ldr	r2, [pc, #128]	; (8003750 <LL_RCC_GetUARTClockFreq+0x114>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00d      	beq.n	80036f0 <LL_RCC_GetUARTClockFreq+0xb4>
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <LL_RCC_GetUARTClockFreq+0x114>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d81b      	bhi.n	8003712 <LL_RCC_GetUARTClockFreq+0xd6>
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <LL_RCC_GetUARTClockFreq+0x118>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <LL_RCC_GetUARTClockFreq+0xac>
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <LL_RCC_GetUARTClockFreq+0x11c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00c      	beq.n	8003700 <LL_RCC_GetUARTClockFreq+0xc4>
 80036e6:	e014      	b.n	8003712 <LL_RCC_GetUARTClockFreq+0xd6>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80036e8:	f000 f838 	bl	800375c <RCC_GetSystemClockFreq>
 80036ec:	60f8      	str	r0, [r7, #12]
        break;
 80036ee:	e021      	b.n	8003734 <LL_RCC_GetUARTClockFreq+0xf8>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80036f0:	f7ff fe30 	bl	8003354 <LL_RCC_HSI_IsReady>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d019      	beq.n	800372e <LL_RCC_GetUARTClockFreq+0xf2>
        {
          uart_frequency = HSI_VALUE;
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <LL_RCC_GetUARTClockFreq+0x110>)
 80036fc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80036fe:	e016      	b.n	800372e <LL_RCC_GetUARTClockFreq+0xf2>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8003700:	f7ff fe3a 	bl	8003378 <LL_RCC_LSE_IsReady>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <LL_RCC_GetUARTClockFreq+0xf6>
        {
          uart_frequency = LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003710:	e00f      	b.n	8003732 <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003712:	f000 f823 	bl	800375c <RCC_GetSystemClockFreq>
 8003716:	4603      	mov	r3, r0
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f847 	bl	80037ac <RCC_GetHCLKClockFreq>
 800371e:	4603      	mov	r3, r0
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f859 	bl	80037d8 <RCC_GetPCLK1ClockFreq>
 8003726:	60f8      	str	r0, [r7, #12]
        break;
 8003728:	e004      	b.n	8003734 <LL_RCC_GetUARTClockFreq+0xf8>
    }
  }
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <LL_RCC_GetUARTClockFreq+0xf8>
        break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <LL_RCC_GetUARTClockFreq+0xf8>
        break;
 8003732:	bf00      	nop
#endif /* UART5 */

  return uart_frequency;
 8003734:	68fb      	ldr	r3, [r7, #12]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	00303000 	.word	0x00303000
 8003744:	00103000 	.word	0x00103000
 8003748:	00203000 	.word	0x00203000
 800374c:	007a1200 	.word	0x007a1200
 8003750:	00c0c000 	.word	0x00c0c000
 8003754:	0040c000 	.word	0x0040c000
 8003758:	0080c000 	.word	0x0080c000

0800375c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003766:	f7ff fe19 	bl	800339c <LL_RCC_GetSysClkSource>
 800376a:	4603      	mov	r3, r0
 800376c:	2b08      	cmp	r3, #8
 800376e:	d00c      	beq.n	800378a <RCC_GetSystemClockFreq+0x2e>
 8003770:	2b08      	cmp	r3, #8
 8003772:	d80e      	bhi.n	8003792 <RCC_GetSystemClockFreq+0x36>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <RCC_GetSystemClockFreq+0x22>
 8003778:	2b04      	cmp	r3, #4
 800377a:	d003      	beq.n	8003784 <RCC_GetSystemClockFreq+0x28>
 800377c:	e009      	b.n	8003792 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <RCC_GetSystemClockFreq+0x48>)
 8003780:	607b      	str	r3, [r7, #4]
      break;
 8003782:	e009      	b.n	8003798 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <RCC_GetSystemClockFreq+0x4c>)
 8003786:	607b      	str	r3, [r7, #4]
      break;
 8003788:	e006      	b.n	8003798 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800378a:	f000 f84d 	bl	8003828 <RCC_PLL_GetFreqDomain_SYS>
 800378e:	6078      	str	r0, [r7, #4]
      break;
 8003790:	e002      	b.n	8003798 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <RCC_GetSystemClockFreq+0x48>)
 8003794:	607b      	str	r3, [r7, #4]
      break;
 8003796:	bf00      	nop
  }

  return frequency;
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	00f42400 	.word	0x00f42400

080037ac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80037b4:	f7ff fe00 	bl	80033b8 <LL_RCC_GetAHBPrescaler>
 80037b8:	4603      	mov	r3, r0
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <RCC_GetHCLKClockFreq+0x28>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	40d3      	lsrs	r3, r2
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	08003b5c 	.word	0x08003b5c

080037d8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80037e0:	f7ff fdf8 	bl	80033d4 <LL_RCC_GetAPB1Prescaler>
 80037e4:	4603      	mov	r3, r0
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <RCC_GetPCLK1ClockFreq+0x24>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	40d3      	lsrs	r3, r2
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08003b6c 	.word	0x08003b6c

08003800 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003808:	f7ff fdf2 	bl	80033f0 <LL_RCC_GetAPB2Prescaler>
 800380c:	4603      	mov	r3, r0
 800380e:	0adb      	lsrs	r3, r3, #11
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <RCC_GetPCLK2ClockFreq+0x24>)
 8003812:	5cd3      	ldrb	r3, [r2, r3]
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	40d3      	lsrs	r3, r2
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	08003b6c 	.word	0x08003b6c

08003828 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003836:	f7ff fe13 	bl	8003460 <LL_RCC_PLL_GetMainSource>
 800383a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d003      	beq.n	8003852 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800384a:	e005      	b.n	8003858 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800384e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003850:	e005      	b.n	800385e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003854:	60fb      	str	r3, [r7, #12]
      break;
 8003856:	e002      	b.n	800385e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800385a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800385c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800385e:	f7ff fe1b 	bl	8003498 <LL_RCC_PLL_GetPrediv>
 8003862:	4603      	mov	r3, r0
 8003864:	3301      	adds	r3, #1
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	fbb2 f4f3 	udiv	r4, r2, r3
 800386c:	f7ff fe06 	bl	800347c <LL_RCC_PLL_GetMultiplicator>
 8003870:	4603      	mov	r3, r0
 8003872:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003876:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800387a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	fa92 f2a2 	rbit	r2, r2
 8003882:	603a      	str	r2, [r7, #0]
  return result;
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	fab2 f282 	clz	r2, r2
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	40d3      	lsrs	r3, r2
 800388e:	3302      	adds	r3, #2
 8003890:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	003d0900 	.word	0x003d0900
 80038a0:	00f42400 	.word	0x00f42400

080038a4 <LL_USART_IsEnabled>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <LL_USART_IsEnabled+0x18>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <LL_USART_IsEnabled+0x1a>
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_USART_SetStopBitsLength>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	605a      	str	r2, [r3, #4]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_USART_SetHWFlowCtrl>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_USART_SetBaudRate>:
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392a:	d11a      	bne.n	8003962 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	005a      	lsls	r2, r3, #1
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	441a      	add	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	b29b      	uxth	r3, r3
 800393e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	60da      	str	r2, [r3, #12]
}
 8003960:	e00a      	b.n	8003978 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	085a      	lsrs	r2, r3, #1
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	441a      	add	r2, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	60da      	str	r2, [r3, #12]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ff84 	bl	80038a4 <LL_USART_IsEnabled>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15e      	bne.n	8003a60 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039aa:	f023 030c 	bic.w	r3, r3, #12
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	6851      	ldr	r1, [r2, #4]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	4311      	orrs	r1, r2
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	6912      	ldr	r2, [r2, #16]
 80039bc:	4311      	orrs	r1, r2
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	6992      	ldr	r2, [r2, #24]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4619      	mov	r1, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff7a 	bl	80038ca <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff87 	bl	80038f0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <LL_USART_Init+0xe8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d104      	bne.n	80039f4 <LL_USART_Init+0x70>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80039ea:	2000      	movs	r0, #0
 80039ec:	f7ff fd62 	bl	80034b4 <LL_RCC_GetUSARTClockFreq>
 80039f0:	60b8      	str	r0, [r7, #8]
 80039f2:	e024      	b.n	8003a3e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <LL_USART_Init+0xec>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d104      	bne.n	8003a06 <LL_USART_Init+0x82>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80039fc:	2010      	movs	r0, #16
 80039fe:	f7ff fd59 	bl	80034b4 <LL_RCC_GetUSARTClockFreq>
 8003a02:	60b8      	str	r0, [r7, #8]
 8003a04:	e01b      	b.n	8003a3e <LL_USART_Init+0xba>
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <LL_USART_Init+0xf0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d104      	bne.n	8003a18 <LL_USART_Init+0x94>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003a0e:	2012      	movs	r0, #18
 8003a10:	f7ff fd50 	bl	80034b4 <LL_RCC_GetUSARTClockFreq>
 8003a14:	60b8      	str	r0, [r7, #8]
 8003a16:	e012      	b.n	8003a3e <LL_USART_Init+0xba>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART3 Clock selector flag */
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <LL_USART_Init+0xf4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d105      	bne.n	8003a2c <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003a20:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003a24:	f7ff fe0a 	bl	800363c <LL_RCC_GetUARTClockFreq>
 8003a28:	60b8      	str	r0, [r7, #8]
 8003a2a:	e008      	b.n	8003a3e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <LL_USART_Init+0xf8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d104      	bne.n	8003a3e <LL_USART_Init+0xba>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003a34:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8003a38:	f7ff fe00 	bl	800363c <LL_RCC_GetUARTClockFreq>
 8003a3c:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ff5b 	bl	8003916 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	40004400 	.word	0x40004400
 8003a74:	40004800 	.word	0x40004800
 8003a78:	40004c00 	.word	0x40004c00
 8003a7c:	40005000 	.word	0x40005000

08003a80 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <LL_mDelay+0x48>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003a8e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d00c      	beq.n	8003ab2 <LL_mDelay+0x32>
  {
    Delay++;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003a9e:	e008      	b.n	8003ab2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <LL_mDelay+0x48>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <LL_mDelay+0x32>
    {
      Delay--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f3      	bne.n	8003aa0 <LL_mDelay+0x20>
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000e010 	.word	0xe000e010

08003acc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <LL_SetSystemCoreClock+0x1c>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4d0d      	ldr	r5, [pc, #52]	; (8003b24 <__libc_init_array+0x38>)
 8003af0:	4c0d      	ldr	r4, [pc, #52]	; (8003b28 <__libc_init_array+0x3c>)
 8003af2:	1b64      	subs	r4, r4, r5
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	2600      	movs	r6, #0
 8003af8:	42a6      	cmp	r6, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	4d0b      	ldr	r5, [pc, #44]	; (8003b2c <__libc_init_array+0x40>)
 8003afe:	4c0c      	ldr	r4, [pc, #48]	; (8003b30 <__libc_init_array+0x44>)
 8003b00:	f000 f820 	bl	8003b44 <_init>
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	2600      	movs	r6, #0
 8003b0a:	42a6      	cmp	r6, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b14:	4798      	blx	r3
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1e:	4798      	blx	r3
 8003b20:	3601      	adds	r6, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08003b74 	.word	0x08003b74
 8003b28:	08003b74 	.word	0x08003b74
 8003b2c:	08003b74 	.word	0x08003b74
 8003b30:	08003b78 	.word	0x08003b78

08003b34 <memset>:
 8003b34:	4402      	add	r2, r0
 8003b36:	4603      	mov	r3, r0
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d100      	bne.n	8003b3e <memset+0xa>
 8003b3c:	4770      	bx	lr
 8003b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b42:	e7f9      	b.n	8003b38 <memset+0x4>

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
